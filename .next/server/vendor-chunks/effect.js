"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/effect";
exports.ids = ["vendor-chunks/effect"];
exports.modules = {

/***/ "(ssr)/./node_modules/effect/dist/esm/Array.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Array.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   allocate: () => (/* binding */ allocate),\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendAll: () => (/* binding */ appendAll),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   cartesian: () => (/* binding */ cartesian),\n/* harmony export */   cartesianWith: () => (/* binding */ cartesianWith),\n/* harmony export */   chop: () => (/* binding */ chop),\n/* harmony export */   chunksOf: () => (/* binding */ chunksOf),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   containsWith: () => (/* binding */ containsWith),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   countBy: () => (/* binding */ countBy),\n/* harmony export */   dedupe: () => (/* binding */ dedupe),\n/* harmony export */   dedupeAdjacent: () => (/* binding */ dedupeAdjacent),\n/* harmony export */   dedupeAdjacentWith: () => (/* binding */ dedupeAdjacentWith),\n/* harmony export */   dedupeWith: () => (/* binding */ dedupeWith),\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   differenceWith: () => (/* binding */ differenceWith),\n/* harmony export */   drop: () => (/* binding */ drop),\n/* harmony export */   dropRight: () => (/* binding */ dropRight),\n/* harmony export */   dropWhile: () => (/* binding */ dropWhile),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   ensure: () => (/* binding */ ensure),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   filterMapWhile: () => (/* binding */ filterMapWhile),\n/* harmony export */   findFirst: () => (/* binding */ findFirst),\n/* harmony export */   findFirstIndex: () => (/* binding */ findFirstIndex),\n/* harmony export */   findLast: () => (/* binding */ findLast),\n/* harmony export */   findLastIndex: () => (/* binding */ findLastIndex),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatMapNullable: () => (/* binding */ flatMapNullable),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromIterable: () => (/* binding */ fromIterable),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   fromRecord: () => (/* binding */ fromRecord),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLefts: () => (/* binding */ getLefts),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getRights: () => (/* binding */ getRights),\n/* harmony export */   getSomes: () => (/* binding */ getSomes),\n/* harmony export */   group: () => (/* binding */ group),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   groupWith: () => (/* binding */ groupWith),\n/* harmony export */   head: () => (/* binding */ head),\n/* harmony export */   headNonEmpty: () => (/* binding */ headNonEmpty),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   initNonEmpty: () => (/* binding */ initNonEmpty),\n/* harmony export */   insertAt: () => (/* binding */ insertAt),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   intersectionWith: () => (/* binding */ intersectionWith),\n/* harmony export */   intersperse: () => (/* binding */ intersperse),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isEmptyArray: () => (/* binding */ isEmptyArray),\n/* harmony export */   isEmptyReadonlyArray: () => (/* binding */ isEmptyReadonlyArray),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray),\n/* harmony export */   isNonEmptyReadonlyArray: () => (/* binding */ isNonEmptyReadonlyArray),\n/* harmony export */   join: () => (/* binding */ join),\n/* harmony export */   last: () => (/* binding */ last),\n/* harmony export */   lastNonEmpty: () => (/* binding */ lastNonEmpty),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   liftEither: () => (/* binding */ liftEither),\n/* harmony export */   liftNullable: () => (/* binding */ liftNullable),\n/* harmony export */   liftOption: () => (/* binding */ liftOption),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makeBy: () => (/* binding */ makeBy),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapAccum: () => (/* binding */ mapAccum),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   matchLeft: () => (/* binding */ matchLeft),\n/* harmony export */   matchRight: () => (/* binding */ matchRight),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   modify: () => (/* binding */ modify),\n/* harmony export */   modifyNonEmptyHead: () => (/* binding */ modifyNonEmptyHead),\n/* harmony export */   modifyNonEmptyLast: () => (/* binding */ modifyNonEmptyLast),\n/* harmony export */   modifyOption: () => (/* binding */ modifyOption),\n/* harmony export */   of: () => (/* binding */ of),\n/* harmony export */   pad: () => (/* binding */ pad),\n/* harmony export */   partition: () => (/* binding */ partition),\n/* harmony export */   partitionMap: () => (/* binding */ partitionMap),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependAll: () => (/* binding */ prependAll),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   reduceRight: () => (/* binding */ reduceRight),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   removeOption: () => (/* binding */ removeOption),\n/* harmony export */   replace: () => (/* binding */ replace),\n/* harmony export */   replaceOption: () => (/* binding */ replaceOption),\n/* harmony export */   replicate: () => (/* binding */ replicate),\n/* harmony export */   reverse: () => (/* binding */ reverse),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   scan: () => (/* binding */ scan),\n/* harmony export */   scanRight: () => (/* binding */ scanRight),\n/* harmony export */   separate: () => (/* binding */ separate),\n/* harmony export */   setNonEmptyHead: () => (/* binding */ setNonEmptyHead),\n/* harmony export */   setNonEmptyLast: () => (/* binding */ setNonEmptyLast),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   sort: () => (/* binding */ sort),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   sortWith: () => (/* binding */ sortWith),\n/* harmony export */   span: () => (/* binding */ span),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   splitAt: () => (/* binding */ splitAt),\n/* harmony export */   splitNonEmptyAt: () => (/* binding */ splitNonEmptyAt),\n/* harmony export */   splitWhere: () => (/* binding */ splitWhere),\n/* harmony export */   tail: () => (/* binding */ tail),\n/* harmony export */   tailNonEmpty: () => (/* binding */ tailNonEmpty),\n/* harmony export */   take: () => (/* binding */ take),\n/* harmony export */   takeRight: () => (/* binding */ takeRight),\n/* harmony export */   takeWhile: () => (/* binding */ takeWhile),\n/* harmony export */   unappend: () => (/* binding */ unappend),\n/* harmony export */   unfold: () => (/* binding */ unfold),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   unionWith: () => (/* binding */ unionWith),\n/* harmony export */   unprepend: () => (/* binding */ unprepend),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet),\n/* harmony export */   unzip: () => (/* binding */ unzip),\n/* harmony export */   window: () => (/* binding */ window),\n/* harmony export */   zip: () => (/* binding */ zip),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/array.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/array.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _Iterable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Iterable.js */ \"(ssr)/./node_modules/effect/dist/esm/Iterable.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _Order_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Order.js */ \"(ssr)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Record_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Record.js */ \"(ssr)/./node_modules/effect/dist/esm/Record.js\");\n/* harmony import */ var _Tuple_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Tuple.js */ \"(ssr)/./node_modules/effect/dist/esm/Tuple.js\");\n/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */ \n\n\n\n\n\n\n\n\n\n\n\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const make = (...elements)=>elements;\n/**\n * Creates a new `Array` of the specified length.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * console.log(result) // [ <3 empty items> ]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const allocate = (n)=>new Array(n);\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * **Example**\n *\n * ```ts\n * import { makeBy } from \"effect/Array\"\n *\n * const result = makeBy(5, n => n * 2)\n * console.log(result) // [0, 2, 4, 6, 8]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const makeBy = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (n, f)=>{\n    const max = Math.max(1, Math.floor(n));\n    const out = new Array(max);\n    for(let i = 0; i < max; i++){\n        out[i] = f(i);\n    }\n    return out;\n});\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * **Example**\n *\n * ```ts\n * import { range } from \"effect/Array\"\n *\n * const result = range(1, 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const range = (start, end)=>start <= end ? makeBy(end - start + 1, (i)=>start + i) : [\n        start\n    ];\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replicate(\"a\", 3)\n * console.log(result) // [\"a\", \"a\", \"a\"]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const replicate = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (a, n)=>makeBy(n, ()=>a));\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.fromIterable(new Set([1, 2, 3]))\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const fromIterable = (collection)=>Array.isArray(collection) ? collection : Array.from(collection);\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.ensure(\"a\")) // [\"a\"]\n * console.log(Array.ensure([\"a\"])) // [\"a\"]\n * console.log(Array.ensure([\"a\", \"b\", \"c\"])) // [\"a\", \"b\", \"c\"]\n * ```\n *\n * @category constructors\n * @since 3.3.0\n */ const ensure = (self)=>Array.isArray(self) ? self : [\n        self\n    ];\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.fromRecord({ a: 1, b: 2, c: 3 })\n * console.log(result) // [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */ const fromRecord = _Record_js__WEBPACK_IMPORTED_MODULE_1__.toEntries;\n/**\n * Converts an `Option` to an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * console.log(Array.fromOption(Option.some(1))) // [1]\n * console.log(Array.fromOption(Option.none())) // []\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */ const fromOption = _Option_js__WEBPACK_IMPORTED_MODULE_2__.toArray;\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * console.log(match([])) // \"empty\"\n * console.log(match([1, 2, 3])) // \"head: 1, tail: 2\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */ const match = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, { onEmpty, onNonEmpty })=>isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty());\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * console.log(matchLeft([])) // \"empty\"\n * console.log(matchLeft([1, 2, 3])) // \"head: 1, tail: 2\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */ const matchLeft = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, { onEmpty, onNonEmpty })=>isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty());\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * console.log(matchRight([])) // \"empty\"\n * console.log(matchRight([1, 2, 3])) // \"init: 2, last: 3\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */ const matchRight = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, { onEmpty, onNonEmpty })=>isNonEmptyReadonlyArray(self) ? onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) : onEmpty());\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.prepend([2, 3, 4], 1)\n * console.log(result) // [1, 2, 3, 4]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */ const prepend = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, head)=>[\n        head,\n        ...self\n    ]);\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.prependAll([2, 3], [0, 1])\n * console.log(result) // [0, 1, 2, 3]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */ const prependAll = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>fromIterable(that).concat(fromIterable(self)));\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.append([1, 2, 3], 4);\n * console.log(result) // [1, 2, 3, 4]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */ const append = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, last)=>[\n        ...self,\n        last\n    ]);\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */ const appendAll = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>fromIterable(self).concat(fromIterable(that)));\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.scan([1, 2, 3, 4], 0, (acc, value) => acc + value)\n * console.log(result) // [0, 1, 3, 6, 10]\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n * ```\n *\n * @category folding\n * @since 2.0.0\n */ const scan = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f)=>{\n    const out = [\n        b\n    ];\n    let i = 0;\n    for (const a of self){\n        out[i + 1] = f(out[i], a);\n        i++;\n    }\n    return out;\n});\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.scanRight([1, 2, 3, 4], 0, (acc, value) => acc + value)\n * console.log(result) // [10, 9, 7, 4, 0]\n * ```\n *\n * @category folding\n * @since 2.0.0\n */ const scanRight = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f)=>{\n    const input = fromIterable(self);\n    const out = new Array(input.length + 1);\n    out[input.length] = b;\n    for(let i = input.length - 1; i >= 0; i--){\n        out[i] = f(out[i + 1], input[i]);\n    }\n    return out;\n});\n/**\n * Determine if `unknown` is an Array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isArray(null)) // false\n * console.log(Array.isArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isArray = Array.isArray;\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isEmptyArray([])) // true\n * console.log(Array.isEmptyArray([1, 2, 3])) // false\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isEmptyArray = (self)=>self.length === 0;\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isEmptyReadonlyArray([])) // true\n * console.log(Array.isEmptyReadonlyArray([1, 2, 3])) // false\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isEmptyReadonlyArray = isEmptyArray;\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isNonEmptyArray([])) // false\n * console.log(Array.isNonEmptyArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNonEmptyArray = _internal_array_js__WEBPACK_IMPORTED_MODULE_3__.isNonEmptyArray;\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isNonEmptyReadonlyArray([])) // false\n * console.log(Array.isNonEmptyReadonlyArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNonEmptyReadonlyArray = _internal_array_js__WEBPACK_IMPORTED_MODULE_3__.isNonEmptyArray;\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */ const length = (self)=>self.length;\nconst isOutOfBounds = (i, as)=>i < 0 || i >= as.length;\nconst clamp = (i, as)=>Math.floor(Math.min(Math.max(0, i), as.length));\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */ const get = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, index)=>{\n    const i = Math.floor(index);\n    return isOutOfBounds(i, self) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.none() : _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(self[i]);\n});\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */ const unsafeGet = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, index)=>{\n    const i = Math.floor(index);\n    if (isOutOfBounds(i, self)) {\n        throw new Error(`Index ${i} out of bounds`);\n    }\n    return self[i];\n});\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * console.log(result) // [1, [2, 3, 4]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */ const unprepend = (self)=>[\n        headNonEmpty(self),\n        tailNonEmpty(self)\n    ];\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * console.log(result) // [[1, 2, 3], 4]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */ const unappend = (self)=>[\n        initNonEmpty(self),\n        lastNonEmpty(self)\n    ];\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */ const head = /*#__PURE__*/ get(0);\n/**\n * Get the first element of a non empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * console.log(result) // 1\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const headNonEmpty = /*#__PURE__*/ unsafeGet(0);\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */ const last = (self)=>isNonEmptyReadonlyArray(self) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(lastNonEmpty(self)) : _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n/**\n * Get the last element of a non empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * console.log(result) // 4\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const lastNonEmpty = (self)=>self[self.length - 1];\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */ const tail = (self)=>{\n    const input = fromIterable(self);\n    return isNonEmptyReadonlyArray(input) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(tailNonEmpty(input)) : _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n};\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * console.log(result) // [2, 3, 4]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const tailNonEmpty = (self)=>self.slice(1);\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */ const init = (self)=>{\n    const input = fromIterable(self);\n    return isNonEmptyReadonlyArray(input) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(initNonEmpty(input)) : _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n};\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const initNonEmpty = (self)=>self.slice(0, -1);\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.take([1, 2, 3, 4, 5], 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const take = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    return input.slice(0, clamp(n, input));\n});\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.takeRight([1, 2, 3, 4, 5], 3)\n * console.log(result) // [3, 4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const takeRight = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    const i = clamp(n, input);\n    return i === 0 ? [] : input.slice(-i);\n});\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n * console.log(result) // [1, 3, 2]\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const takeWhile = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    let i = 0;\n    const out = [];\n    for (const a of self){\n        if (!predicate(a, i)) {\n            break;\n        }\n        out.push(a);\n        i++;\n    }\n    return out;\n});\nconst spanIndex = (self, predicate)=>{\n    let i = 0;\n    for (const a of self){\n        if (!predicate(a, i)) {\n            break;\n        }\n        i++;\n    }\n    return i;\n};\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */ const span = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>splitAt(self, spanIndex(self, predicate)));\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.drop([1, 2, 3, 4, 5], 2)\n * console.log(result) // [3, 4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const drop = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    return input.slice(clamp(n, input), input.length);\n});\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dropRight([1, 2, 3, 4, 5], 2)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const dropRight = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    return input.slice(0, input.length - clamp(n, input));\n});\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dropWhile([1, 2, 3, 4, 5], x => x < 4)\n * console.log(result) // [4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const dropWhile = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>fromIterable(self).slice(spanIndex(self, predicate)));\n/**\n * Return the first index for which a predicate holds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirstIndex([5, 3, 8, 9], x => x > 5)\n * console.log(result) // Option.some(2)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */ const findFirstIndex = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    let i = 0;\n    for (const a of self){\n        if (predicate(a, i)) {\n            return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(i);\n        }\n        i++;\n    }\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n});\n/**\n * Return the last index for which a predicate holds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findLastIndex([1, 3, 8, 9], x => x < 5)\n * console.log(result) // Option.some(1)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */ const findLastIndex = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    const input = fromIterable(self);\n    for(let i = input.length - 1; i >= 0; i--){\n        if (predicate(input[i], i)) {\n            return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(i);\n        }\n    }\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n});\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n * console.log(result) // Option.some(4)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */ const findFirst = _Iterable_js__WEBPACK_IMPORTED_MODULE_4__.findFirst;\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // Option.some(4)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */ const findLast = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const input = fromIterable(self);\n    for(let i = input.length - 1; i >= 0; i--){\n        const a = input[i];\n        const o = f(a, i);\n        if (_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean(o)) {\n            if (o) {\n                return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(a);\n            }\n        } else {\n            if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(o)) {\n                return o;\n            }\n        }\n    }\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n});\n/**\n * Counts all the element of the given array that pass the given predicate\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // 2\n * ```\n *\n * @category folding\n * @since 3.16.0\n */ const countBy = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    let count = 0;\n    const as = fromIterable(self);\n    for(let i = 0; i < as.length; i++){\n        const a = as[i];\n        if (f(a, i)) {\n            count++;\n        }\n    }\n    return count;\n});\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.insertAt(['a', 'b', 'c', 'e'], 3, 'd')\n * console.log(result) // Option.some(['a', 'b', 'c', 'd', 'e'])\n * ```\n *\n * @since 2.0.0\n */ const insertAt = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, b)=>{\n    const out = Array.from(self);\n    //             v--- `= self.length` is ok, it means inserting in last position\n    if (i < 0 || i > out.length) {\n        return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n    }\n    out.splice(i, 0, b);\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(out);\n});\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replace(['a', 'b', 'c', 'd'], 1, 'z')\n * console.log(result) // ['a', 'z', 'c', 'd']\n * ```\n *\n * @since 2.0.0\n */ const replace = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, b)=>modify(self, i, ()=>b));\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replaceOption([1, 2, 3], 1, 4)\n * console.log(result) // Option.some([1, 4, 3])\n * ```\n *\n * @since 2.0.0\n */ const replaceOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, b)=>modifyOption(self, i, ()=>b));\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modify([1, 2, 3, 4], 2, (n) => n * 2)\n * console.log(result) // [1, 2, 6, 4]\n * ```\n *\n * @since 2.0.0\n */ const modify = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, f)=>{\n    const out = Array.from(self);\n    if (isOutOfBounds(i, out)) {\n        return out;\n    }\n    const b = f(out[i]);\n    out[i] = b;\n    return out;\n});\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const input = [1, 2, 3, 4]\n * const result = Array.modifyOption(input, 2, (n) => n * 2)\n * console.log(result) // Option.some([1, 2, 6, 4])\n *\n * const outOfBoundsResult = Array.modifyOption(input, 5, (n) => n * 2)\n * console.log(outOfBoundsResult) // Option.none()\n * ```\n *\n * @since 2.0.0\n */ const modifyOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, f)=>{\n    const arr = fromIterable(self);\n    if (isOutOfBounds(i, arr)) {\n        return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n    }\n    const out = Array.isArray(self) ? self.slice() : arr;\n    const b = f(arr[i]);\n    out[i] = b;\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(out);\n});\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const input = [1, 2, 3, 4]\n * const result = Array.remove(input, 2)\n * console.log(result) // [1, 2, 4]\n *\n * const outOfBoundsResult = Array.remove(input, 5)\n * console.log(outOfBoundsResult) // [1, 2, 3, 4]\n * ```\n *\n * @since 2.0.0\n */ const remove = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, i)=>{\n    const out = Array.from(self);\n    if (isOutOfBounds(i, out)) {\n        return out;\n    }\n    out.splice(i, 1);\n    return out;\n});\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.removeOption(numbers, 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 4]))\n *\n * const outOfBoundsResult = Array.removeOption(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n * ```\n *\n * @since 3.16.0\n */ const removeOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, i)=>{\n    const arr = fromIterable(self);\n    if (isOutOfBounds(i, arr)) {\n        return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n    }\n    const out = Array.isArray(self) ? self.slice() : arr;\n    out.splice(i, 1);\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(out);\n});\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reverse([1, 2, 3, 4])\n * console.log(result) // [4, 3, 2, 1]\n * ```\n *\n * @category elements\n * @since 2.0.0\n */ const reverse = (self)=>Array.from(self).reverse();\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */ const sort = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, O)=>{\n    const out = Array.from(self);\n    out.sort(O);\n    return out;\n});\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n * ```\n *\n * @since 2.0.0\n * @category elements\n */ const sortWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, f, order)=>Array.from(self).map((a)=>[\n            a,\n            f(a)\n        ]).sort(([, a], [, b])=>order(a, b)).map(([_])=>_));\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order, pipe } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = pipe(\n *   users,\n *   Array.sortBy(\n *     Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *     Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n *   )\n * )\n *\n * console.log(result)\n * // [\n * //   { name: \"Bob\", age: 25 },\n * //   { name: \"Alice\", age: 30 },\n * //   { name: \"Charlie\", age: 30 }\n * // ]\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n * ```\n *\n * @category sorting\n * @since 2.0.0\n */ const sortBy = (...orders)=>{\n    const sortByAll = sort(_Order_js__WEBPACK_IMPORTED_MODULE_6__.combineAll(orders));\n    return (self)=>{\n        const input = fromIterable(self);\n        if (isNonEmptyReadonlyArray(input)) {\n            return sortByAll(input);\n        }\n        return [];\n    };\n};\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.zip([1, 2, 3], ['a', 'b'])\n * console.log(result) // [[1, 'a'], [2, 'b']]\n * ```\n *\n * @category zipping\n * @since 2.0.0\n */ const zip = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>zipWith(self, that, _Tuple_js__WEBPACK_IMPORTED_MODULE_7__.make));\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n * console.log(result) // [5, 7, 9]\n * ```\n *\n * @category zipping\n * @since 2.0.0\n */ const zipWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f)=>{\n    const as = fromIterable(self);\n    const bs = fromIterable(that);\n    if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n        const out = [\n            f(headNonEmpty(as), headNonEmpty(bs))\n        ];\n        const len = Math.min(as.length, bs.length);\n        for(let i = 1; i < len; i++){\n            out[i] = f(as[i], bs[i]);\n        }\n        return out;\n    }\n    return [];\n});\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * console.log(result) // [[1, 2, 3], ['a', 'b', 'c']]\n * ```\n *\n * @since 2.0.0\n */ const unzip = (self)=>{\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n        const fa = [\n            input[0][0]\n        ];\n        const fb = [\n            input[0][1]\n        ];\n        for(let i = 1; i < input.length; i++){\n            fa[i] = input[i][0];\n            fb[i] = input[i][1];\n        }\n        return [\n            fa,\n            fb\n        ];\n    }\n    return [\n        [],\n        []\n    ];\n};\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.intersperse([1, 2, 3], 0)\n * console.log(result) // [1, 0, 2, 0, 3]\n * ```\n *\n * @since 2.0.0\n */ const intersperse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, middle)=>{\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n        const out = [\n            headNonEmpty(input)\n        ];\n        const tail = tailNonEmpty(input);\n        for(let i = 0; i < tail.length; i++){\n            if (i < tail.length) {\n                out.push(middle);\n            }\n            out.push(tail[i]);\n        }\n        return out;\n    }\n    return [];\n});\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * console.log(result) // [10, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const modifyNonEmptyHead = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>[\n        f(headNonEmpty(self)),\n        ...tailNonEmpty(self)\n    ]);\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * console.log(result) // [10, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const setNonEmptyHead = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, b)=>modifyNonEmptyHead(self, ()=>b));\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * console.log(result) // [1, 2, 6]\n * ```\n *\n * @since 2.0.0\n */ const modifyNonEmptyLast = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>append(initNonEmpty(self), f(lastNonEmpty(self))));\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * console.log(result) // [1, 2, 4]\n * ```\n *\n * @since 2.0.0\n */ const setNonEmptyLast = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, b)=>modifyNonEmptyLast(self, ()=>b));\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.rotate(['a', 'b', 'c', 'd'], 2)\n * console.log(result) // ['c', 'd', 'a', 'b']\n * ```\n *\n * @since 2.0.0\n */ const rotate = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n        const len = input.length;\n        const m = Math.round(n) % len;\n        if (isOutOfBounds(Math.abs(m), input) || m === 0) {\n            return copy(input);\n        }\n        if (m < 0) {\n            const [f, s] = splitNonEmptyAt(input, -m);\n            return appendAll(s, f);\n        } else {\n            return rotate(self, m - len);\n        }\n    }\n    return [];\n});\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = pipe([1, 2, 3, 4], containsNumber(3))\n * console.log(result) // true\n * ```\n *\n * @category elements\n * @since 2.0.0\n */ const containsWith = (isEquivalent)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, a)=>{\n        for (const i of self){\n            if (isEquivalent(a, i)) {\n                return true;\n            }\n        }\n        return false;\n    });\nconst _equivalence = /*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence();\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const result = pipe(['a', 'b', 'c', 'd'], Array.contains('c'))\n * console.log(result) // true\n * ```\n *\n * @category elements\n * @since 2.0.0\n */ const contains = /*#__PURE__*/ containsWith(_equivalence);\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * console.log(result) // [2, 4, 6, 8, 10]\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n * ```\n *\n * @since 2.0.0\n */ const chop = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n        const [b, rest] = f(input);\n        const out = [\n            b\n        ];\n        let next = rest;\n        while(_internal_array_js__WEBPACK_IMPORTED_MODULE_3__.isNonEmptyArray(next)){\n            const [b, rest] = f(next);\n            out.push(b);\n            next = rest;\n        }\n        return out;\n    }\n    return [];\n});\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitAt([1, 2, 3, 4, 5], 3)\n * console.log(result) // [[1, 2, 3], [4, 5]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */ const splitAt = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = Array.from(self);\n    const _n = Math.floor(n);\n    if (isNonEmptyReadonlyArray(input)) {\n        if (_n >= 1) {\n            return splitNonEmptyAt(input, _n);\n        }\n        return [\n            [],\n            input\n        ];\n    }\n    return [\n        input,\n        []\n    ];\n});\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * console.log(result) // [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */ const splitNonEmptyAt = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const _n = Math.max(1, Math.floor(n));\n    return _n >= self.length ? [\n        copy(self),\n        []\n    ] : [\n        prepend(self.slice(1, _n), headNonEmpty(self)),\n        self.slice(_n)\n    ];\n});\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.split([1, 2, 3, 4, 5, 6, 7, 8], 3)\n * console.log(result) // [[1, 2, 3], [4, 5, 6], [7, 8]]\n * ```\n *\n * @since 2.0.0\n * @category splitting\n */ const split = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    return chunksOf(input, Math.ceil(input.length / Math.floor(n)));\n});\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitWhere([1, 2, 3, 4, 5], n => n > 3)\n * console.log(result) // [[1, 2, 3], [4, 5]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */ const splitWhere = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>span(self, (a, i)=>!predicate(a, i)));\n/**\n * Copies an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.copy([1, 2, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const copy = (self)=>self.slice();\n/**\n * Pads an array.\n * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n * If `n` is less than or equal to 0, the returned array will be an empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.pad([1, 2, 3], 6, 0)\n * console.log(result) // [1, 2, 3, 0, 0, 0]\n * ```\n *\n * @since 3.8.4\n */ const pad = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, n, fill)=>{\n    if (self.length >= n) {\n        return take(self, n);\n    }\n    return appendAll(self, makeBy(n - self.length, ()=>fill));\n});\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts skip-type-checking\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n * console.log(result) // [[1, 2], [3, 4], [5]]\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */ const chunksOf = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n        return chop(input, splitNonEmptyAt(n));\n    }\n    return [];\n});\n/**\n * Creates sliding windows of size `n` from an `Iterable`.\n * If the number of elements is less than `n` or if `n` is not greater than zero,\n * an empty array is returned.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * assert.deepStrictEqual(Array.window(numbers, 3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n * assert.deepStrictEqual(Array.window(numbers, 6), [])\n * ```\n *\n * @category splitting\n * @since 3.13.2\n */ const window = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const input = fromIterable(self);\n    if (n > 0 && isNonEmptyReadonlyArray(input)) {\n        return Array.from({\n            length: input.length - (n - 1)\n        }, (_, index)=>input.slice(index, index + n));\n    }\n    return [];\n});\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * console.log(result) // [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]]\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */ const groupWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent)=>chop(self, (as)=>{\n        const h = headNonEmpty(as);\n        const out = [\n            h\n        ];\n        let i = 1;\n        for(; i < as.length; i++){\n            const a = as[i];\n            if (isEquivalent(a, h)) {\n                out.push(a);\n            } else {\n                break;\n            }\n        }\n        return [\n            out,\n            as.slice(i)\n        ];\n    }));\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * console.log(result) // [[1, 1], [2, 2, 2], [3], [1]]\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */ const group = /*#__PURE__*/ groupWith(/*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence());\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n *\n * const result = Array.groupBy(people, person => person.group)\n * console.log(result)\n * // {\n * //  A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n * //  B: [{ name: \"Bob\", group: \"B\" }]\n * // }\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */ const groupBy = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = {};\n    for (const a of self){\n        const k = f(a);\n        if (Object.prototype.hasOwnProperty.call(out, k)) {\n            out[k].push(a);\n        } else {\n            out[k] = [\n                a\n            ];\n        }\n    }\n    return out;\n});\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n * console.log(union) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const unionWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, isEquivalent)=>{\n    const a = fromIterable(self);\n    const b = fromIterable(that);\n    if (isNonEmptyReadonlyArray(a)) {\n        if (isNonEmptyReadonlyArray(b)) {\n            const dedupe = dedupeWith(isEquivalent);\n            return dedupe(appendAll(a, b));\n        }\n        return a;\n    }\n    return b;\n});\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.union([1, 2], [2, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const union = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>unionWith(self, that, _equivalence));\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * console.log(result) // [{ id: 1 }, { id: 3 }]\n * ```\n *\n * @since 2.0.0\n */ const intersectionWith = (isEquivalent)=>{\n    const has = containsWith(isEquivalent);\n    return (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>fromIterable(self).filter((a)=>has(that, a)));\n};\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.intersection([1, 2, 3], [3, 4, 1])\n * console.log(result) // [1, 3]\n * ```\n *\n * @since 2.0.0\n */ const intersection = /*#__PURE__*/ intersectionWith(_equivalence);\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * console.log(difference) // [1]\n * ```\n *\n * @since 2.0.0\n */ const differenceWith = (isEquivalent)=>{\n    const has = containsWith(isEquivalent);\n    return (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>fromIterable(self).filter((a)=>!has(that, a)));\n};\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const difference = Array.difference([1, 2, 3], [2, 3, 4])\n * console.log(difference) // [1]\n * ```\n *\n * @since 2.0.0\n */ const difference = /*#__PURE__*/ differenceWith(_equivalence);\n/**\n * @category constructors\n * @since 2.0.0\n */ const empty = ()=>[];\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */ const of = (a)=>[\n        a\n    ];\n/**\n * @category mapping\n * @since 2.0.0\n */ const map = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>self.map(f));\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */ const flatMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    if (isEmptyReadonlyArray(self)) {\n        return [];\n    }\n    const out = [];\n    for(let i = 0; i < self.length; i++){\n        const inner = f(self[i], i);\n        for(let j = 0; j < inner.length; j++){\n            out.push(inner[j]);\n        }\n    }\n    return out;\n});\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.flatten([[1, 2], [], [3, 4], [], [5, 6]])\n * console.log(result) // [1, 2, 3, 4, 5, 6]\n * ```\n *\n * @category sequencing\n * @since 2.0.0\n */ const flatten = /*#__PURE__*/ flatMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n *\n * const result = Array.filterMap([1, 2, 3, 4, 5], evenSquares);\n * console.log(result) // [4, 16]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const filterMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const as = fromIterable(self);\n    const out = [];\n    for(let i = 0; i < as.length; i++){\n        const o = f(as[i], i);\n        if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(o)) {\n            out.push(o.value);\n        }\n    }\n    return out;\n});\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n *\n * const result = Array.filterMapWhile([2, 4, 5], toSquareTillOdd)\n * console.log(result) // [4, 16]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const filterMapWhile = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    let i = 0;\n    const out = [];\n    for (const a of self){\n        const b = f(a, i);\n        if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(b)) {\n            out.push(b.value);\n        } else {\n            break;\n        }\n        i++;\n    }\n    return out;\n});\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\";\n *\n * const isEven = (x: number) => x % 2 === 0\n *\n * const result = Array.partitionMap([1, 2, 3, 4, 5], x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n * console.log(result)\n * // [\n * //   [1, 3, 5],\n * //   [2, 4]\n * // ]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const partitionMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const left = [];\n    const right = [];\n    const as = fromIterable(self);\n    for(let i = 0; i < as.length; i++){\n        const e = f(as[i], i);\n        if (_Either_js__WEBPACK_IMPORTED_MODULE_9__.isLeft(e)) {\n            left.push(e.left);\n        } else {\n            right.push(e.right);\n        }\n    }\n    return [\n        left,\n        right\n    ];\n});\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const result = Array.getSomes([Option.some(1), Option.none(), Option.some(2)])\n * console.log(result) // [1, 2]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getSomes = /*#__PURE__*/ filterMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const result = Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])\n * console.log(result) // [\"err\"]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getLefts = (self)=>{\n    const out = [];\n    for (const a of self){\n        if (_Either_js__WEBPACK_IMPORTED_MODULE_9__.isLeft(a)) {\n            out.push(a.left);\n        }\n    }\n    return out;\n};\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const result = Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])\n * console.log(result) // [1, 2]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getRights = (self)=>{\n    const out = [];\n    for (const a of self){\n        if (_Either_js__WEBPACK_IMPORTED_MODULE_9__.isRight(a)) {\n            out.push(a.right);\n        }\n    }\n    return out;\n};\n/**\n * @category filtering\n * @since 2.0.0\n */ const filter = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    const as = fromIterable(self);\n    const out = [];\n    for(let i = 0; i < as.length; i++){\n        if (predicate(as[i], i)) {\n            out.push(as[i]);\n        }\n    }\n    return out;\n});\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n * console.log(result) // [[1, 3], [2, 4]]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const partition = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    const left = [];\n    const right = [];\n    const as = fromIterable(self);\n    for(let i = 0; i < as.length; i++){\n        if (predicate(as[i], i)) {\n            right.push(as[i]);\n        } else {\n            left.push(as[i]);\n        }\n    }\n    return [\n        left,\n        right\n    ];\n});\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @category filtering\n * @since 2.0.0\n */ const separate = /*#__PURE__*/ partitionMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Reduces an array from the left.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reduce([1, 2, 3], 0, (acc, n) => acc + n)\n * console.log(result) // 6\n * ```\n *\n * @category folding\n * @since 2.0.0\n */ const reduce = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f)=>fromIterable(self).reduce((b, a, i)=>f(b, a, i), b));\n/**\n * Reduces an array from the right.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reduceRight([1, 2, 3], 0, (acc, n) => acc + n)\n * console.log(result) // 6\n * ```\n *\n * @category folding\n * @since 2.0.0\n */ const reduceRight = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f)=>fromIterable(self).reduceRight((b, a, i)=>f(b, a, i), b));\n/**\n * Lifts a predicate into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * console.log(to(1)) // []\n * console.log(to(2)) // [2]\n * ```\n *\n * @category lifting\n * @since 2.0.0\n */ const liftPredicate = (predicate)=>(b)=>predicate(b) ? [\n            b\n        ] : [];\n/**\n * @category lifting\n * @since 2.0.0\n */ const liftOption = (f)=>(...a)=>fromOption(f(...a));\n/**\n * @category conversions\n * @since 2.0.0\n */ const fromNullable = (a)=>a == null ? empty() : [\n        a\n    ];\n/**\n * @category lifting\n * @since 2.0.0\n */ const liftNullable = (f)=>(...a)=>fromNullable(f(...a));\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.flatMapNullable([1, 2, 3], n => (n % 2 === 0 ? null : n))\n * console.log(result) // [1, 3]\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n * ```\n *\n * @category sequencing\n * @since 2.0.0\n */ const flatMapNullable = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>flatMap(self, (a)=>fromNullable(f(a))));\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * console.log(result1) // [42]\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * console.log(result2) // []\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n * ```\n *\n * @category lifting\n * @since 2.0.0\n */ const liftEither = (f)=>(...a)=>{\n        const e = f(...a);\n        return _Either_js__WEBPACK_IMPORTED_MODULE_9__.isLeft(e) ? [] : [\n            e.right\n        ];\n    };\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */ const every = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, refinement)=>self.every(refinement));\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */ const some = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>self.some(predicate));\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.extend([1, 2, 3], as => as.length)\n * console.log(result) // [3, 2, 1]\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n * ```\n *\n * @since 2.0.0\n */ const extend = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>self.map((_, i, as)=>f(as.slice(i))));\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.min([3, 1, 2], Order.number)\n * console.log(result) // 1\n * ```\n *\n * @since 2.0.0\n */ const min = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, O)=>self.reduce(_Order_js__WEBPACK_IMPORTED_MODULE_6__.min(O)));\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.max([3, 1, 2], Order.number)\n * console.log(result) // 3\n * ```\n *\n * @since 2.0.0\n */ const max = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, O)=>self.reduce(_Order_js__WEBPACK_IMPORTED_MODULE_6__.max(O)));\n/**\n * @category constructors\n * @since 2.0.0\n */ const unfold = (b, f)=>{\n    const out = [];\n    let next = b;\n    let o;\n    while(_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(o = f(next))){\n        const [a, b] = o.value;\n        out.push(a);\n        next = b;\n    }\n    return out;\n};\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */ const getOrder = _Order_js__WEBPACK_IMPORTED_MODULE_6__.array;\n/**\n * Creates an equivalence relation for arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * console.log(eq([1, 2, 3], [1, 2, 3])) // true\n * ```\n *\n * @category instances\n * @since 2.0.0\n */ const getEquivalence = _Equivalence_js__WEBPACK_IMPORTED_MODULE_10__.array;\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * Array.forEach([1, 2, 3], n => console.log(n)) // 1, 2, 3\n * ```\n *\n * @since 2.0.0\n */ const forEach = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>fromIterable(self).forEach((a, i)=>f(a, i)));\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const dedupeWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent)=>{\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n        const out = [\n            headNonEmpty(input)\n        ];\n        const rest = tailNonEmpty(input);\n        for (const r of rest){\n            if (out.every((a)=>!isEquivalent(r, a))) {\n                out.push(r);\n            }\n        }\n        return out;\n    }\n    return [];\n});\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */ const dedupe = (self)=>dedupeWith(self, _Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence());\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeAdjacentWith([1, 1, 2, 2, 3, 3], (a, b) => a === b)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const dedupeAdjacentWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent)=>{\n    const out = [];\n    let lastA = _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n    for (const a of self){\n        if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n            out.push(a);\n            lastA = _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(a);\n        }\n    }\n    return out;\n});\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeAdjacent([1, 1, 2, 2, 3, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */ const dedupeAdjacent = /*#__PURE__*/ dedupeAdjacentWith(/*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence());\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * console.log(joined) // \"a-b-c\"\n * ```\n *\n * @since 2.0.0\n * @category folding\n */ const join = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, sep)=>fromIterable(self).join(sep));\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.mapAccum([1, 2, 3], 0, (acc, n) => [acc + n, acc + n])\n * console.log(result) // [6, [1, 3, 6]]\n * ```\n *\n * @since 2.0.0\n * @category folding\n */ const mapAccum = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, s, f)=>{\n    let i = 0;\n    let s1 = s;\n    const out = [];\n    for (const a of self){\n        const r = f(s1, a, i);\n        s1 = r[0];\n        out.push(r[1]);\n        i++;\n    }\n    return [\n        s1,\n        out\n    ];\n});\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.cartesianWith([1, 2], [\"a\", \"b\"], (a, b) => `${a}-${b}`)\n * console.log(result) // [\"1-a\", \"1-b\", \"2-a\", \"2-b\"]\n * ```\n *\n * @since 2.0.0\n * @category elements\n */ const cartesianWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f)=>flatMap(self, (a)=>map(that, (b)=>f(a, b))));\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.cartesian([1, 2], [\"a\", \"b\"])\n * console.log(result) // [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]]\n * ```\n *\n * @since 2.0.0\n * @category elements\n */ const cartesian = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>cartesianWith(self, that, (a, b)=>[\n            a,\n            b\n        ]));\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */ const Do = /*#__PURE__*/ of({});\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */ const bind = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bind(map, flatMap);\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */ const bindTo = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bindTo(map);\nconst let_ = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.let_(map);\n //# sourceMappingURL=Array.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Context.js":
/*!*************************************************!*\
  !*** ./node_modules/effect/dist/esm/Context.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenericTag: () => (/* binding */ GenericTag),\n/* harmony export */   Reference: () => (/* binding */ Reference),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getOption: () => (/* binding */ getOption),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   isContext: () => (/* binding */ isContext),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   mergeAll: () => (/* binding */ mergeAll),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet),\n/* harmony export */   unsafeMake: () => (/* binding */ unsafeMake)\n/* harmony export */ });\n/* harmony import */ var _internal_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/context.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/context.js\");\n\nconst TagTypeId = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.TagTypeId;\nconst ReferenceTypeId = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceTypeId;\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */ const GenericTag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.makeGenericTag;\nconst TypeId = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.TypeId;\n/**\n * @since 2.0.0\n * @category constructors\n */ const unsafeMake = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.makeContext;\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n * ```\n *\n * @since 2.0.0\n * @category guards\n */ const isContext = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.isContext;\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n * ```\n *\n * @since 2.0.0\n * @category guards\n */ const isTag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.isTag;\n/**\n * Checks if the provided argument is a `Reference`.\n *\n * @since 3.11.0\n * @category guards\n * @experimental\n */ const isReference = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.isReference;\n/**\n * Returns an empty `Context`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */ const empty = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.empty;\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */ const make = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.make;\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * ```\n *\n * @since 2.0.0\n */ const add = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.add;\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * ```\n *\n * @since 2.0.0\n * @category getters\n */ const get = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.get;\n/**\n * Get a service from the context that corresponds to the given tag, or\n * use the fallback value.\n *\n * @since 3.7.0\n * @category getters\n */ const getOrElse = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.getOrElse;\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n * ```\n *\n * @since 2.0.0\n * @category unsafe\n */ const unsafeGet = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.unsafeGet;\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n * ```\n *\n * @since 2.0.0\n * @category getters\n */ const getOption = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.getOption;\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * ```\n *\n * @since 2.0.0\n */ const merge = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.merge;\n/**\n * Merges any number of `Context`s, returning a new `Context` containing the services of all.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n * const Host = Context.GenericTag<{ HOST: string }>(\"Host\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n * const thirdContext = Context.make(Host, { HOST: \"localhost\" })\n *\n * const Services = Context.mergeAll(firstContext, secondContext, thirdContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * assert.deepStrictEqual(Context.get(Services, Host), { HOST: \"localhost\" })\n * ```\n *\n * @since 3.12.0\n */ const mergeAll = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.mergeAll;\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n * ```\n *\n * @since 2.0.0\n */ const pick = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.pick;\n/**\n * @since 2.0.0\n */ const omit = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.omit;\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, Layer } from \"effect\"\n *\n * class MyTag extends Context.Tag(\"MyTag\")<\n *  MyTag,\n *  { readonly myNum: number }\n * >() {\n *  static Live = Layer.succeed(this, { myNum: 108 })\n * }\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */ const Tag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.Tag;\n/**\n * Creates a context tag with a default value.\n *\n * **Details**\n *\n * `Context.Reference` allows you to create a tag that can hold a value. You can\n * provide a default value for the service, which will automatically be used\n * when the context is accessed, or override it with a custom implementation\n * when needed.\n *\n * **Example** (Declaring a Tag with a default value)\n *\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, Effect } from \"effect\"\n *\n * class SpecialNumber extends Context.Reference<SpecialNumber>()(\n *   \"SpecialNumber\",\n *   { defaultValue: () => 2048 }\n * ) {}\n *\n * //      ┌─── Effect<void, never, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const specialNumber = yield* SpecialNumber\n *   console.log(`The special number is ${specialNumber}`)\n * })\n *\n * // No need to provide the SpecialNumber implementation\n * Effect.runPromise(program)\n * // Output: The special number is 2048\n * ```\n *\n * **Example** (Overriding the default value)\n *\n * ```ts\n * import { Context, Effect } from \"effect\"\n *\n * class SpecialNumber extends Context.Reference<SpecialNumber>()(\n *   \"SpecialNumber\",\n *   { defaultValue: () => 2048 }\n * ) {}\n *\n * const program = Effect.gen(function* () {\n *   const specialNumber = yield* SpecialNumber\n *   console.log(`The special number is ${specialNumber}`)\n * })\n *\n * Effect.runPromise(program.pipe(Effect.provideService(SpecialNumber, -1)))\n * // Output: The special number is -1\n * ```\n *\n * @since 3.11.0\n * @category constructors\n * @experimental\n */ const Reference = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.Reference; //# sourceMappingURL=Context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Effectable.js":
/*!****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Effectable.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChannelTypeId: () => (/* binding */ ChannelTypeId),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   CommitPrototype: () => (/* binding */ CommitPrototype),\n/* harmony export */   EffectPrototype: () => (/* binding */ EffectPrototype),\n/* harmony export */   EffectTypeId: () => (/* binding */ EffectTypeId),\n/* harmony export */   SinkTypeId: () => (/* binding */ SinkTypeId),\n/* harmony export */   StreamTypeId: () => (/* binding */ StreamTypeId),\n/* harmony export */   StructuralClass: () => (/* binding */ StructuralClass),\n/* harmony export */   StructuralCommitPrototype: () => (/* binding */ StructuralCommitPrototype)\n/* harmony export */ });\n/* harmony import */ var _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n\n/**\n * @since 2.0.0\n * @category type ids\n */ const EffectTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */ const StreamTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StreamTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */ const SinkTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.SinkTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */ const ChannelTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.ChannelTypeId;\n/**\n * @since 2.0.0\n * @category prototypes\n */ const EffectPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */ const CommitPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.CommitPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */ const StructuralCommitPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StructuralCommitPrototype;\nconst Base = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.Base;\nconst StructuralBase = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StructuralBase;\n/**\n * @since 2.0.0\n * @category constructors\n */ class Class extends Base {\n}\n/**\n * @since 2.0.0\n * @category constructors\n */ class StructuralClass extends StructuralBase {\n} //# sourceMappingURL=Effectable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VmZmVjdGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNyRDs7O0NBR0MsR0FDTSxNQUFNQyxlQUFlRCxpRUFBcUIsQ0FBQztBQUNsRDs7O0NBR0MsR0FDTSxNQUFNRSxlQUFlRixpRUFBcUIsQ0FBQztBQUNsRDs7O0NBR0MsR0FDTSxNQUFNRyxhQUFhSCwrREFBbUIsQ0FBQztBQUM5Qzs7O0NBR0MsR0FDTSxNQUFNSSxnQkFBZ0JKLGtFQUFzQixDQUFDO0FBQ3BEOzs7Q0FHQyxHQUNNLE1BQU1LLGtCQUFrQkwsb0VBQXdCLENBQUM7QUFDeEQ7OztDQUdDLEdBQ00sTUFBTU0sa0JBQWtCTixvRUFBd0IsQ0FBQztBQUN4RDs7O0NBR0MsR0FDTSxNQUFNTyw0QkFBNEJQLDhFQUFrQyxDQUFDO0FBQzVFLE1BQU1RLE9BQU9SLHlEQUFhO0FBQzFCLE1BQU1TLGlCQUFpQlQsbUVBQXVCO0FBQzlDOzs7Q0FHQyxHQUNNLE1BQU1VLGNBQWNGO0FBQU07QUFDakM7OztDQUdDLEdBQ00sTUFBTUcsd0JBQXdCRjtBQUFnQixFQUNyRCxzQ0FBc0MiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9FZmZlY3RhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGludGVybmFsIGZyb20gXCIuL2ludGVybmFsL2VmZmVjdGFibGUuanNcIjtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFR5cGVJZCA9IGludGVybmFsLkVmZmVjdFR5cGVJZDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IFN0cmVhbVR5cGVJZCA9IGludGVybmFsLlN0cmVhbVR5cGVJZDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IFNpbmtUeXBlSWQgPSBpbnRlcm5hbC5TaW5rVHlwZUlkO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSB0eXBlIGlkc1xuICovXG5leHBvcnQgY29uc3QgQ2hhbm5lbFR5cGVJZCA9IGludGVybmFsLkNoYW5uZWxUeXBlSWQ7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IHByb3RvdHlwZXNcbiAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFByb3RvdHlwZSA9IGludGVybmFsLkVmZmVjdFByb3RvdHlwZTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgcHJvdG90eXBlc1xuICovXG5leHBvcnQgY29uc3QgQ29tbWl0UHJvdG90eXBlID0gaW50ZXJuYWwuQ29tbWl0UHJvdG90eXBlO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBwcm90b3R5cGVzXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsQ29tbWl0UHJvdG90eXBlID0gaW50ZXJuYWwuU3RydWN0dXJhbENvbW1pdFByb3RvdHlwZTtcbmNvbnN0IEJhc2UgPSBpbnRlcm5hbC5CYXNlO1xuY29uc3QgU3RydWN0dXJhbEJhc2UgPSBpbnRlcm5hbC5TdHJ1Y3R1cmFsQmFzZTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGFzcyBleHRlbmRzIEJhc2Uge31cbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmFsQ2xhc3MgZXh0ZW5kcyBTdHJ1Y3R1cmFsQmFzZSB7fVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RWZmZWN0YWJsZS5qcy5tYXAiXSwibmFtZXMiOlsiaW50ZXJuYWwiLCJFZmZlY3RUeXBlSWQiLCJTdHJlYW1UeXBlSWQiLCJTaW5rVHlwZUlkIiwiQ2hhbm5lbFR5cGVJZCIsIkVmZmVjdFByb3RvdHlwZSIsIkNvbW1pdFByb3RvdHlwZSIsIlN0cnVjdHVyYWxDb21taXRQcm90b3R5cGUiLCJCYXNlIiwiU3RydWN0dXJhbEJhc2UiLCJDbGFzcyIsIlN0cnVjdHVyYWxDbGFzcyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Effectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Either.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Either.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   ap: () => (/* binding */ ap),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   filterOrLeft: () => (/* binding */ filterOrLeft),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   getOrNull: () => (/* binding */ getOrNull),\n/* harmony export */   getOrThrow: () => (/* binding */ getOrThrow),\n/* harmony export */   getOrThrowWith: () => (/* binding */ getOrThrowWith),\n/* harmony export */   getOrUndefined: () => (/* binding */ getOrUndefined),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isEither: () => (/* binding */ isEither),\n/* harmony export */   isLeft: () => (/* binding */ isLeft),\n/* harmony export */   isRight: () => (/* binding */ isRight),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapBoth: () => (/* binding */ mapBoth),\n/* harmony export */   mapLeft: () => (/* binding */ mapLeft),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   right: () => (/* binding */ right),\n/* harmony export */   transposeMapOption: () => (/* binding */ transposeMapOption),\n/* harmony export */   transposeOption: () => (/* binding */ transposeOption),\n/* harmony export */   \"try\": () => (/* binding */ try_),\n/* harmony export */   \"void\": () => (/* binding */ void_),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_either_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/either.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/either.js\");\n/* harmony import */ var _internal_option_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/**\n * @since 2.0.0\n */ \n\n\n\n\n\n\n/**\n * @category symbols\n * @since 2.0.0\n */ const TypeId = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.TypeId;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */ const right = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.right;\nconst void_ = /*#__PURE__*/ right(void 0);\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */ const left = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.left;\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const fromNullable = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNullable)=>self == null ? left(onNullable(self)) : right(self));\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const fromOption = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.fromOption;\nconst try_ = (evaluate)=>{\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isFunction)(evaluate)) {\n        try {\n            return right(evaluate());\n        } catch (e) {\n            return left(e);\n        }\n    } else {\n        try {\n            return right(evaluate.try());\n        } catch (e) {\n            return left(evaluate.catch(e));\n        }\n    }\n};\n\n/**\n * Tests if a value is a `Either`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isEither = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isEither;\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isLeft;\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isRight;\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.getRight;\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.getLeft;\n/**\n * @category equivalence\n * @since 2.0.0\n */ const getEquivalence = ({ left, right })=>_Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.make((x, y)=>isLeft(x) ? isLeft(y) && left(x.left, y.left) : isRight(y) && right(x.right, y.right));\n/**\n * @category mapping\n * @since 2.0.0\n */ const mapBoth = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, { onLeft, onRight })=>isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right)));\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @category mapping\n * @since 2.0.0\n */ const mapLeft = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>isLeft(self) ? left(f(self.left)) : right(self.right));\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @category mapping\n * @since 2.0.0\n */ const map = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>isRight(self) ? right(f(self.right)) : left(self.left));\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */ const match = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, { onLeft, onRight })=>isLeft(self) ? onLeft(self.left) : onRight(self.right));\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *\n * assert.deepStrictEqual(\n *   isPositiveEither(1),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   isPositiveEither(0),\n *   Either.left(\"0 is not positive\")\n * )\n * ```\n *\n * @category lifting\n * @since 3.4.0\n */ const liftPredicate = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (a, predicate, orLeftWith)=>predicate(a) ? right(a) : left(orLeftWith(a)));\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n * ```\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */ const filterOrLeft = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, predicate, orLeftWith)=>flatMap(self, (r)=>predicate(r) ? right(r) : left(orLeftWith(r))));\n/**\n * @category getters\n * @since 2.0.0\n */ const merge = /*#__PURE__*/ match({\n    onLeft: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n    onRight: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n});\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getOrElse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onLeft)=>isLeft(self) ? onLeft(self.left) : self.right);\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getOrNull = /*#__PURE__*/ getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constNull);\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getOrUndefined = /*#__PURE__*/ getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constUndefined);\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getOrThrowWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onLeft)=>{\n    if (isRight(self)) {\n        return self.right;\n    }\n    throw onLeft(self.left);\n});\n// TODO(4.0): by default should throw `L` (i.e getOrThrowWith with the identity function)\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n * ```\n *\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @category getters\n * @since 2.0.0\n */ const getOrThrow = /*#__PURE__*/ getOrThrowWith(()=>new Error(\"getOrThrow called on a Left\"));\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @category error handling\n * @since 2.0.0\n */ const orElse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>isLeft(self) ? that(self.left) : right(self.right));\n/**\n * @category sequencing\n * @since 2.0.0\n */ const flatMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>isLeft(self) ? left(self.left) : f(self.right));\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */ const andThen = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>flatMap(self, (a)=>{\n        const b = (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isFunction)(f) ? f(a) : f;\n        return isEither(b) ? b : right(b);\n    }));\n/**\n * @category zipping\n * @since 2.0.0\n */ const zipWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, that, f)=>flatMap(self, (r)=>map(that, (r2)=>f(r, r2))));\n/**\n * @category combining\n * @since 2.0.0\n */ const ap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>zipWith(self, that, (f, a)=>f(a)));\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n * ```\n *\n * @category combining\n * @since 2.0.0\n */ // @ts-expect-error\nconst all = (input)=>{\n    if (Symbol.iterator in input) {\n        const out = [];\n        for (const e of input){\n            if (isLeft(e)) {\n                return e;\n            }\n            out.push(e.right);\n        }\n        return right(out);\n    }\n    const out = {};\n    for (const key of Object.keys(input)){\n        const e = input[key];\n        if (isLeft(e)) {\n            return e;\n        }\n        out[key] = e.right;\n    }\n    return right(out);\n};\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */ const flip = (self)=>isLeft(self) ? right(self.left) : left(self.right);\nconst adapter = /*#__PURE__*/ _Utils_js__WEBPACK_IMPORTED_MODULE_4__.adapter();\n/**\n * @category generators\n * @since 2.0.0\n */ const gen = (...args)=>{\n    const f = args.length === 1 ? args[0] : args[1].bind(args[0]);\n    const iterator = f(adapter);\n    let state = iterator.next();\n    while(!state.done){\n        const current = _Utils_js__WEBPACK_IMPORTED_MODULE_4__.isGenKind(state.value) ? state.value.value : _Utils_js__WEBPACK_IMPORTED_MODULE_4__.yieldWrapGet(state.value);\n        if (isLeft(current)) {\n            return current;\n        }\n        state = iterator.next(current.right);\n    }\n    return right(state.value);\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */ const Do = /*#__PURE__*/ right({});\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */ const bind = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.bind(map, flatMap);\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */ const bindTo = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.bindTo(map);\nconst let_ = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.let_(map);\n\n/**\n * Converts an `Option` of an `Either` into an `Either` of an `Option`.\n *\n * **Details**\n *\n * This function transforms an `Option<Either<A, E>>` into an\n * `Either<Option<A>, E>`. If the `Option` is `None`, the resulting `Either`\n * will be a `Right` with a `None` value. If the `Option` is `Some`, the\n * inner `Either` will be executed, and its result wrapped in a `Some`.\n *\n * @example\n * ```ts\n * import { Effect, Either, Option } from \"effect\"\n *\n * //      ┌─── Option<Either<number, never>>\n * //      ▼\n * const maybe = Option.some(Either.right(42))\n *\n * //      ┌─── Either<Option<number>, never, never>\n * //      ▼\n * const result = Either.transposeOption(maybe)\n *\n * console.log(Effect.runSync(result))\n * // Output: { _id: 'Option', _tag: 'Some', value: 42 }\n * ```\n *\n * @since 3.14.0\n * @category Optional Wrapping & Unwrapping\n */ const transposeOption = (self)=>{\n    return _internal_option_js__WEBPACK_IMPORTED_MODULE_6__.isNone(self) ? right(_internal_option_js__WEBPACK_IMPORTED_MODULE_6__.none) : map(self.value, _internal_option_js__WEBPACK_IMPORTED_MODULE_6__.some);\n};\n/**\n * Applies an `Either` on an `Option` and transposes the result.\n *\n * **Details**\n *\n * If the `Option` is `None`, the resulting `Either` will immediately succeed with a `Right` value of `None`.\n * If the `Option` is `Some`, the transformation function will be applied to the inner value, and its result wrapped in a `Some`.\n *\n * @example\n * ```ts\n * import { Either, Option, pipe } from \"effect\"\n *\n * //          ┌─── Either<Option<number>, never>>\n * //          ▼\n * const noneResult = pipe(\n *   Option.none(),\n *   Either.transposeMapOption(() => Either.right(42)) // will not be executed\n * )\n * console.log(noneResult)\n * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'None' } }\n *\n * //          ┌─── Either<Option<number>, never>>\n * //          ▼\n * const someRightResult = pipe(\n *   Option.some(42),\n *   Either.transposeMapOption((value) => Either.right(value * 2))\n * )\n * console.log(someRightResult)\n * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'Some', value: 84 } }\n * ```\n *\n * @since 3.15.0\n * @category Optional Wrapping & Unwrapping\n */ const transposeMapOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>_internal_option_js__WEBPACK_IMPORTED_MODULE_6__.isNone(self) ? right(_internal_option_js__WEBPACK_IMPORTED_MODULE_6__.none) : map(f(self.value), _internal_option_js__WEBPACK_IMPORTED_MODULE_6__.some)); //# sourceMappingURL=Either.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Either.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Encoding.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Encoding.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodeException: () => (/* binding */ DecodeException),\n/* harmony export */   DecodeExceptionTypeId: () => (/* binding */ DecodeExceptionTypeId),\n/* harmony export */   EncodeException: () => (/* binding */ EncodeException),\n/* harmony export */   EncodeExceptionTypeId: () => (/* binding */ EncodeExceptionTypeId),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   decodeBase64String: () => (/* binding */ decodeBase64String),\n/* harmony export */   decodeBase64Url: () => (/* binding */ decodeBase64Url),\n/* harmony export */   decodeBase64UrlString: () => (/* binding */ decodeBase64UrlString),\n/* harmony export */   decodeHex: () => (/* binding */ decodeHex),\n/* harmony export */   decodeHexString: () => (/* binding */ decodeHexString),\n/* harmony export */   decodeUriComponent: () => (/* binding */ decodeUriComponent),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   encodeBase64Url: () => (/* binding */ encodeBase64Url),\n/* harmony export */   encodeHex: () => (/* binding */ encodeHex),\n/* harmony export */   encodeUriComponent: () => (/* binding */ encodeUriComponent),\n/* harmony export */   isDecodeException: () => (/* binding */ isDecodeException),\n/* harmony export */   isEncodeException: () => (/* binding */ isEncodeException)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/encoding/base64.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js\");\n/* harmony import */ var _internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/encoding/base64Url.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64Url.js\");\n/* harmony import */ var _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/encoding/common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n/* harmony import */ var _internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/encoding/hex.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/hex.js\");\n/**\n * This module provides encoding & decoding functionality for:\n *\n * - base64 (RFC4648)\n * - base64 (URL)\n * - hex\n *\n * @since 2.0.0\n */ \n\n\n\n\n/**\n * Encodes the given value into a base64 (RFC4648) `string`.\n *\n * @category encoding\n * @since 2.0.0\n */ const encodeBase64 = (input)=>typeof input === \"string\" ? _internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__.encode(_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.encoder.encode(input)) : _internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__.encode(input);\n/**\n * Decodes a base64 (RFC4648) encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */ const decodeBase64 = (str)=>_internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__.decode(str);\n/**\n * Decodes a base64 (RFC4648) encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */ const decodeBase64String = (str)=>_Either_js__WEBPACK_IMPORTED_MODULE_2__.map(decodeBase64(str), (_)=>_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(_));\n/**\n * Encodes the given value into a base64 (URL) `string`.\n *\n * @category encoding\n * @since 2.0.0\n */ const encodeBase64Url = (input)=>typeof input === \"string\" ? _internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__.encode(_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.encoder.encode(input)) : _internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__.encode(input);\n/**\n * Decodes a base64 (URL) encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */ const decodeBase64Url = (str)=>_internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__.decode(str);\n/**\n * Decodes a base64 (URL) encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */ const decodeBase64UrlString = (str)=>_Either_js__WEBPACK_IMPORTED_MODULE_2__.map(decodeBase64Url(str), (_)=>_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(_));\n/**\n * Encodes the given value into a hex `string`.\n *\n * @category encoding\n * @since 2.0.0\n */ const encodeHex = (input)=>typeof input === \"string\" ? _internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.encode(_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.encoder.encode(input)) : _internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.encode(input);\n/**\n * Decodes a hex encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */ const decodeHex = (str)=>_internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.decode(str);\n/**\n * Decodes a hex encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */ const decodeHexString = (str)=>_Either_js__WEBPACK_IMPORTED_MODULE_2__.map(decodeHex(str), (_)=>_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(_));\n/**\n * Encodes a UTF-8 `string` into a URI component `string`.\n *\n * @category encoding\n * @since 3.12.0\n */ const encodeUriComponent = (str)=>_Either_js__WEBPACK_IMPORTED_MODULE_2__[\"try\"]({\n        try: ()=>encodeURIComponent(str),\n        catch: (e)=>EncodeException(str, e instanceof Error ? e.message : \"Invalid input\")\n    });\n/**\n * Decodes a URI component `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 3.12.0\n */ const decodeUriComponent = (str)=>_Either_js__WEBPACK_IMPORTED_MODULE_2__[\"try\"]({\n        try: ()=>decodeURIComponent(str),\n        catch: (e)=>DecodeException(str, e instanceof Error ? e.message : \"Invalid input\")\n    });\n/**\n * @since 2.0.0\n * @category symbols\n */ const DecodeExceptionTypeId = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeExceptionTypeId;\n/**\n * Creates a checked exception which occurs when decoding fails.\n *\n * @since 2.0.0\n * @category errors\n */ const DecodeException = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException;\n/**\n * Returns `true` if the specified value is an `DecodeException`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */ const isDecodeException = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.isDecodeException;\n/**\n * @since 3.12.0\n * @category symbols\n */ const EncodeExceptionTypeId = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.EncodeExceptionTypeId;\n/**\n * Creates a checked exception which occurs when encoding fails.\n *\n * @since 3.12.0\n * @category errors\n */ const EncodeException = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.EncodeException;\n/**\n * Returns `true` if the specified value is an `EncodeException`, `false` otherwise.\n *\n * @since 3.12.0\n * @category refinements\n */ const isEncodeException = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.isEncodeException; //# sourceMappingURL=Encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Equal.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Equal.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   equivalence: () => (/* binding */ equivalence),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   symbol: () => (/* binding */ symbol)\n/* harmony export */ });\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n/**\n * @since 2.0.0\n * @category symbols\n */ const symbol = /*#__PURE__*/ Symbol.for(\"effect/Equal\");\nfunction equals() {\n    if (arguments.length === 1) {\n        return (self)=>compareBoth(self, arguments[0]);\n    }\n    return compareBoth(arguments[0], arguments[1]);\n}\nfunction compareBoth(self, that) {\n    if (self === that) {\n        return true;\n    }\n    const selfType = typeof self;\n    if (selfType !== typeof that) {\n        return false;\n    }\n    if (selfType === \"object\" || selfType === \"function\") {\n        if (self !== null && that !== null) {\n            if (isEqual(self) && isEqual(that)) {\n                if (_Hash_js__WEBPACK_IMPORTED_MODULE_0__.hash(self) === _Hash_js__WEBPACK_IMPORTED_MODULE_0__.hash(that) && self[symbol](that)) {\n                    return true;\n                } else {\n                    return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled && _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n                }\n            } else if (self instanceof Date && that instanceof Date) {\n                return self.toISOString() === that.toISOString();\n            } else if (self instanceof URL && that instanceof URL) {\n                return self.href === that.href;\n            }\n        }\n        if (_Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled) {\n            if (Array.isArray(self) && Array.isArray(that)) {\n                return self.length === that.length && self.every((v, i)=>compareBoth(v, that[i]));\n            }\n            if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n                const keysSelf = Object.keys(self);\n                const keysThat = Object.keys(that);\n                if (keysSelf.length === keysThat.length) {\n                    for (const key of keysSelf){\n                        // @ts-expect-error\n                        if (!(key in that && compareBoth(self[key], that[key]))) {\n                            return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n                        }\n                    }\n                    return true;\n                }\n            }\n            return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n        }\n    }\n    return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled && _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n}\n/**\n * @since 2.0.0\n * @category guards\n */ const isEqual = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.hasProperty)(u, symbol);\n/**\n * @since 2.0.0\n * @category instances\n */ const equivalence = ()=>equals; //# sourceMappingURL=Equal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VxdWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBa0M7QUFDVztBQUNNO0FBQ25EOzs7Q0FHQyxHQUNNLE1BQU1HLFNBQVMsV0FBVyxHQUFFQyxPQUFPQyxHQUFHLENBQUMsZ0JBQWdCO0FBQ3ZELFNBQVNDO0lBQ2QsSUFBSUMsVUFBVUMsTUFBTSxLQUFLLEdBQUc7UUFDMUIsT0FBT0MsQ0FBQUEsT0FBUUMsWUFBWUQsTUFBTUYsU0FBUyxDQUFDLEVBQUU7SUFDL0M7SUFDQSxPQUFPRyxZQUFZSCxTQUFTLENBQUMsRUFBRSxFQUFFQSxTQUFTLENBQUMsRUFBRTtBQUMvQztBQUNBLFNBQVNHLFlBQVlELElBQUksRUFBRUUsSUFBSTtJQUM3QixJQUFJRixTQUFTRSxNQUFNO1FBQ2pCLE9BQU87SUFDVDtJQUNBLE1BQU1DLFdBQVcsT0FBT0g7SUFDeEIsSUFBSUcsYUFBYSxPQUFPRCxNQUFNO1FBQzVCLE9BQU87SUFDVDtJQUNBLElBQUlDLGFBQWEsWUFBWUEsYUFBYSxZQUFZO1FBQ3BELElBQUlILFNBQVMsUUFBUUUsU0FBUyxNQUFNO1lBQ2xDLElBQUlFLFFBQVFKLFNBQVNJLFFBQVFGLE9BQU87Z0JBQ2xDLElBQUlYLDBDQUFTLENBQUNTLFVBQVVULDBDQUFTLENBQUNXLFNBQVNGLElBQUksQ0FBQ04sT0FBTyxDQUFDUSxPQUFPO29CQUM3RCxPQUFPO2dCQUNULE9BQU87b0JBQ0wsT0FBT1QsNERBQXFCQSxDQUFDYSxPQUFPLElBQUliLDREQUFxQkEsQ0FBQ2MsTUFBTSxHQUFHZCw0REFBcUJBLENBQUNjLE1BQU0sQ0FBQ1AsTUFBTUUsUUFBUTtnQkFDcEg7WUFDRixPQUFPLElBQUlGLGdCQUFnQlEsUUFBUU4sZ0JBQWdCTSxNQUFNO2dCQUN2RCxPQUFPUixLQUFLUyxXQUFXLE9BQU9QLEtBQUtPLFdBQVc7WUFDaEQsT0FBTyxJQUFJVCxnQkFBZ0JVLE9BQU9SLGdCQUFnQlEsS0FBSztnQkFDckQsT0FBT1YsS0FBS1csSUFBSSxLQUFLVCxLQUFLUyxJQUFJO1lBQ2hDO1FBQ0Y7UUFDQSxJQUFJbEIsNERBQXFCQSxDQUFDYSxPQUFPLEVBQUU7WUFDakMsSUFBSU0sTUFBTUMsT0FBTyxDQUFDYixTQUFTWSxNQUFNQyxPQUFPLENBQUNYLE9BQU87Z0JBQzlDLE9BQU9GLEtBQUtELE1BQU0sS0FBS0csS0FBS0gsTUFBTSxJQUFJQyxLQUFLYyxLQUFLLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTWYsWUFBWWMsR0FBR2IsSUFBSSxDQUFDYyxFQUFFO1lBQ25GO1lBQ0EsSUFBSUMsT0FBT0MsY0FBYyxDQUFDbEIsVUFBVWlCLE9BQU9FLFNBQVMsSUFBSUYsT0FBT0MsY0FBYyxDQUFDbEIsVUFBVWlCLE9BQU9FLFNBQVMsRUFBRTtnQkFDeEcsTUFBTUMsV0FBV0gsT0FBT0ksSUFBSSxDQUFDckI7Z0JBQzdCLE1BQU1zQixXQUFXTCxPQUFPSSxJQUFJLENBQUNuQjtnQkFDN0IsSUFBSWtCLFNBQVNyQixNQUFNLEtBQUt1QixTQUFTdkIsTUFBTSxFQUFFO29CQUN2QyxLQUFLLE1BQU13QixPQUFPSCxTQUFVO3dCQUMxQixtQkFBbUI7d0JBQ25CLElBQUksQ0FBRUcsQ0FBQUEsT0FBT3JCLFFBQVFELFlBQVlELElBQUksQ0FBQ3VCLElBQUksRUFBRXJCLElBQUksQ0FBQ3FCLElBQUksSUFBSTs0QkFDdkQsT0FBTzlCLDREQUFxQkEsQ0FBQ2MsTUFBTSxHQUFHZCw0REFBcUJBLENBQUNjLE1BQU0sQ0FBQ1AsTUFBTUUsUUFBUTt3QkFDbkY7b0JBQ0Y7b0JBQ0EsT0FBTztnQkFDVDtZQUNGO1lBQ0EsT0FBT1QsNERBQXFCQSxDQUFDYyxNQUFNLEdBQUdkLDREQUFxQkEsQ0FBQ2MsTUFBTSxDQUFDUCxNQUFNRSxRQUFRO1FBQ25GO0lBQ0Y7SUFDQSxPQUFPVCw0REFBcUJBLENBQUNhLE9BQU8sSUFBSWIsNERBQXFCQSxDQUFDYyxNQUFNLEdBQUdkLDREQUFxQkEsQ0FBQ2MsTUFBTSxDQUFDUCxNQUFNRSxRQUFRO0FBQ3BIO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUUsVUFBVW9CLENBQUFBLElBQUtoQywwREFBV0EsQ0FBQ2dDLEdBQUc5QixRQUFRO0FBQ25EOzs7Q0FHQyxHQUNNLE1BQU0rQixjQUFjLElBQU01QixPQUFPLENBQ3hDLGlDQUFpQyIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VxdWFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEhhc2ggZnJvbSBcIi4vSGFzaC5qc1wiO1xuaW1wb3J0IHsgaGFzUHJvcGVydHkgfSBmcm9tIFwiLi9QcmVkaWNhdGUuanNcIjtcbmltcG9ydCB7IHN0cnVjdHVyYWxSZWdpb25TdGF0ZSB9IGZyb20gXCIuL1V0aWxzLmpzXCI7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IHN5bWJvbHNcbiAqL1xuZXhwb3J0IGNvbnN0IHN5bWJvbCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0VxdWFsXCIpO1xuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscygpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gc2VsZiA9PiBjb21wYXJlQm90aChzZWxmLCBhcmd1bWVudHNbMF0pO1xuICB9XG4gIHJldHVybiBjb21wYXJlQm90aChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSk7XG59XG5mdW5jdGlvbiBjb21wYXJlQm90aChzZWxmLCB0aGF0KSB7XG4gIGlmIChzZWxmID09PSB0aGF0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3Qgc2VsZlR5cGUgPSB0eXBlb2Ygc2VsZjtcbiAgaWYgKHNlbGZUeXBlICE9PSB0eXBlb2YgdGhhdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoc2VsZlR5cGUgPT09IFwib2JqZWN0XCIgfHwgc2VsZlR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGlmIChzZWxmICE9PSBudWxsICYmIHRoYXQgIT09IG51bGwpIHtcbiAgICAgIGlmIChpc0VxdWFsKHNlbGYpICYmIGlzRXF1YWwodGhhdCkpIHtcbiAgICAgICAgaWYgKEhhc2guaGFzaChzZWxmKSA9PT0gSGFzaC5oYXNoKHRoYXQpICYmIHNlbGZbc3ltYm9sXSh0aGF0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUuZW5hYmxlZCAmJiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyID8gc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlcihzZWxmLCB0aGF0KSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlbGYgaW5zdGFuY2VvZiBEYXRlICYmIHRoYXQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnRvSVNPU3RyaW5nKCkgPT09IHRoYXQudG9JU09TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZiBpbnN0YW5jZW9mIFVSTCAmJiB0aGF0IGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmhyZWYgPT09IHRoYXQuaHJlZjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0cnVjdHVyYWxSZWdpb25TdGF0ZS5lbmFibGVkKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxmKSAmJiBBcnJheS5pc0FycmF5KHRoYXQpKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmxlbmd0aCA9PT0gdGhhdC5sZW5ndGggJiYgc2VsZi5ldmVyeSgodiwgaSkgPT4gY29tcGFyZUJvdGgodiwgdGhhdFtpXSkpO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihzZWxmKSA9PT0gT2JqZWN0LnByb3RvdHlwZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2VsZikgPT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICAgICAgY29uc3Qga2V5c1NlbGYgPSBPYmplY3Qua2V5cyhzZWxmKTtcbiAgICAgICAgY29uc3Qga2V5c1RoYXQgPSBPYmplY3Qua2V5cyh0aGF0KTtcbiAgICAgICAgaWYgKGtleXNTZWxmLmxlbmd0aCA9PT0ga2V5c1RoYXQubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5c1NlbGYpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGlmICghKGtleSBpbiB0aGF0ICYmIGNvbXBhcmVCb3RoKHNlbGZba2V5XSwgdGhhdFtrZXldKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0cnVjdHVyYWxSZWdpb25TdGF0ZS50ZXN0ZXIgPyBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyKHNlbGYsIHRoYXQpIDogZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlciA/IHN0cnVjdHVyYWxSZWdpb25TdGF0ZS50ZXN0ZXIoc2VsZiwgdGhhdCkgOiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cnVjdHVyYWxSZWdpb25TdGF0ZS5lbmFibGVkICYmIHN0cnVjdHVyYWxSZWdpb25TdGF0ZS50ZXN0ZXIgPyBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyKHNlbGYsIHRoYXQpIDogZmFsc2U7XG59XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGd1YXJkc1xuICovXG5leHBvcnQgY29uc3QgaXNFcXVhbCA9IHUgPT4gaGFzUHJvcGVydHkodSwgc3ltYm9sKTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKi9cbmV4cG9ydCBjb25zdCBlcXVpdmFsZW5jZSA9ICgpID0+IGVxdWFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVxdWFsLmpzLm1hcCJdLCJuYW1lcyI6WyJIYXNoIiwiaGFzUHJvcGVydHkiLCJzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUiLCJzeW1ib2wiLCJTeW1ib2wiLCJmb3IiLCJlcXVhbHMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzZWxmIiwiY29tcGFyZUJvdGgiLCJ0aGF0Iiwic2VsZlR5cGUiLCJpc0VxdWFsIiwiaGFzaCIsImVuYWJsZWQiLCJ0ZXN0ZXIiLCJEYXRlIiwidG9JU09TdHJpbmciLCJVUkwiLCJocmVmIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJ2IiwiaSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwia2V5c1NlbGYiLCJrZXlzIiwia2V5c1RoYXQiLCJrZXkiLCJ1IiwiZXF1aXZhbGVuY2UiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Equal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Equivalence.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Equivalence.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Date: () => (/* binding */ Date),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   combineAll: () => (/* binding */ combineAll),\n/* harmony export */   combineMany: () => (/* binding */ combineMany),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   strict: () => (/* binding */ strict),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   symbol: () => (/* binding */ symbol),\n/* harmony export */   tuple: () => (/* binding */ tuple)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */ \n/**\n * @category constructors\n * @since 2.0.0\n */ const make = (isEquivalent)=>(self, that)=>self === that || isEquivalent(self, that);\nconst isStrictEquivalent = (x, y)=>x === y;\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */ const strict = ()=>isStrictEquivalent;\n/**\n * @category instances\n * @since 2.0.0\n */ const string = /*#__PURE__*/ strict();\n/**\n * @category instances\n * @since 2.0.0\n */ const number = /*#__PURE__*/ strict();\n/**\n * @category instances\n * @since 2.0.0\n */ const boolean = /*#__PURE__*/ strict();\n/**\n * @category instances\n * @since 2.0.0\n */ const bigint = /*#__PURE__*/ strict();\n/**\n * @category instances\n * @since 2.0.0\n */ const symbol = /*#__PURE__*/ strict();\n/**\n * @category combining\n * @since 2.0.0\n */ const combine = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>make((x, y)=>self(x, y) && that(x, y)));\n/**\n * @category combining\n * @since 2.0.0\n */ const combineMany = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection)=>make((x, y)=>{\n        if (!self(x, y)) {\n            return false;\n        }\n        for (const equivalence of collection){\n            if (!equivalence(x, y)) {\n                return false;\n            }\n        }\n        return true;\n    }));\nconst isAlwaysEquivalent = (_x, _y)=>true;\n/**\n * @category combining\n * @since 2.0.0\n */ const combineAll = (collection)=>combineMany(isAlwaysEquivalent, collection);\n/**\n * @category mapping\n * @since 2.0.0\n */ const mapInput = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>make((x, y)=>self(f(x), f(y))));\n/**\n * @category instances\n * @since 2.0.0\n */ const Date = /*#__PURE__*/ mapInput(number, (date)=>date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */ const product = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>make(([xa, xb], [ya, yb])=>self(xa, ya) && that(xb, yb)));\n/**\n * @category combining\n * @since 2.0.0\n */ const all = (collection)=>{\n    return make((x, y)=>{\n        const len = Math.min(x.length, y.length);\n        let collectionLength = 0;\n        for (const equivalence of collection){\n            if (collectionLength >= len) {\n                break;\n            }\n            if (!equivalence(x[collectionLength], y[collectionLength])) {\n                return false;\n            }\n            collectionLength++;\n        }\n        return true;\n    });\n};\n/**\n * @category combining\n * @since 2.0.0\n */ const productMany = (self, collection)=>{\n    const equivalence = all(collection);\n    return make((x, y)=>!self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)));\n};\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```ts skip-type-checking\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */ const tuple = (...elements)=>all(elements);\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */ const array = (item)=>make((self, that)=>{\n        if (self.length !== that.length) {\n            return false;\n        }\n        for(let i = 0; i < self.length; i++){\n            const isEq = item(self[i], that[i]);\n            if (!isEq) {\n                return false;\n            }\n        }\n        return true;\n    });\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */ const struct = (fields)=>{\n    const keys = Object.keys(fields);\n    return make((self, that)=>{\n        for (const key of keys){\n            if (!fields[key](self[key], that[key])) {\n                return false;\n            }\n        }\n        return true;\n    });\n}; //# sourceMappingURL=Equivalence.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Equivalence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Function.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Function.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SK: () => (/* binding */ SK),\n/* harmony export */   absurd: () => (/* binding */ absurd),\n/* harmony export */   apply: () => (/* binding */ apply),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   constFalse: () => (/* binding */ constFalse),\n/* harmony export */   constNull: () => (/* binding */ constNull),\n/* harmony export */   constTrue: () => (/* binding */ constTrue),\n/* harmony export */   constUndefined: () => (/* binding */ constUndefined),\n/* harmony export */   constVoid: () => (/* binding */ constVoid),\n/* harmony export */   constant: () => (/* binding */ constant),\n/* harmony export */   dual: () => (/* binding */ dual),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   flow: () => (/* binding */ flow),\n/* harmony export */   hole: () => (/* binding */ hole),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   satisfies: () => (/* binding */ satisfies),\n/* harmony export */   tupled: () => (/* binding */ tupled),\n/* harmony export */   unsafeCoerce: () => (/* binding */ unsafeCoerce),\n/* harmony export */   untupled: () => (/* binding */ untupled)\n/* harmony export */ });\n/**\n * Tests if a value is a `function`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isFunction = (input)=>typeof input === \"function\";\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * You can pass either the arity of the uncurried function or a predicate\n * which determines if the function is being used in a data-first or\n * data-last style.\n *\n * **Example** (Using arity to determine data-first or data-last style)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum = dual<\n *   (that: number) => (self: number) => number,\n *   (self: number, that: number) => number\n * >(2, (self, that) => self + that)\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * **Example** (Using call signatures to define the overloads)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * **Example** (Using a predicate to determine data-first or data-last style)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum = dual<\n *   (that: number) => (self: number) => number,\n *   (self: number, that: number) => number\n * >(\n *   (args) => args.length === 2,\n *   (self, that) => self + that\n * )\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * @since 2.0.0\n */ const dual = function(arity, body) {\n    if (typeof arity === \"function\") {\n        return function() {\n            if (arity(arguments)) {\n                // @ts-expect-error\n                return body.apply(this, arguments);\n            }\n            return (self)=>body(self, ...arguments);\n        };\n    }\n    switch(arity){\n        case 0:\n        case 1:\n            throw new RangeError(`Invalid arity ${arity}`);\n        case 2:\n            return function(a, b) {\n                if (arguments.length >= 2) {\n                    return body(a, b);\n                }\n                return function(self) {\n                    return body(self, a);\n                };\n            };\n        case 3:\n            return function(a, b, c) {\n                if (arguments.length >= 3) {\n                    return body(a, b, c);\n                }\n                return function(self) {\n                    return body(self, a, b);\n                };\n            };\n        case 4:\n            return function(a, b, c, d) {\n                if (arguments.length >= 4) {\n                    return body(a, b, c, d);\n                }\n                return function(self) {\n                    return body(self, a, b, c);\n                };\n            };\n        case 5:\n            return function(a, b, c, d, e) {\n                if (arguments.length >= 5) {\n                    return body(a, b, c, d, e);\n                }\n                return function(self) {\n                    return body(self, a, b, c, d);\n                };\n            };\n        default:\n            return function() {\n                if (arguments.length >= arity) {\n                    // @ts-expect-error\n                    return body.apply(this, arguments);\n                }\n                const args = arguments;\n                return function(self) {\n                    return body(self, ...args);\n                };\n            };\n    }\n};\n/**\n * Apply a function to given values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n * ```\n *\n * @since 2.0.0\n */ const apply = (...a)=>(self)=>self(...a);\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n * ```\n *\n * @since 2.0.0\n */ const identity = (a)=>a;\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n * ```\n *\n * @since 2.0.0\n */ const satisfies = ()=>(b)=>b;\n/**\n * Casts the result to the specified type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n * ```\n *\n * @since 2.0.0\n */ const unsafeCoerce = identity;\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n * ```\n *\n * @since 2.0.0\n */ const constant = (value)=>()=>value;\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n * ```\n *\n * @since 2.0.0\n */ const constTrue = /*#__PURE__*/ constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n * ```\n *\n * @since 2.0.0\n */ const constFalse = /*#__PURE__*/ constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n * ```\n *\n * @since 2.0.0\n */ const constNull = /*#__PURE__*/ constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n * ```\n *\n * @since 2.0.0\n */ const constUndefined = /*#__PURE__*/ constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n * ```\n *\n * @since 2.0.0\n */ const constVoid = constUndefined;\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n * ```\n *\n * @since 2.0.0\n */ const flip = (f)=>(...b)=>(...a)=>f(...a)(...b);\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n * ```\n *\n * @since 2.0.0\n */ const compose = /*#__PURE__*/ dual(2, (ab, bc)=>(a)=>bc(ab(a)));\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly useful when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */ const absurd = (_)=>{\n    throw new Error(\"Called `absurd` function which should be uncallable\");\n};\n/**\n * Creates a   version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n * ```\n *\n * @since 2.0.0\n */ const tupled = (f)=>(a)=>f(...a);\n/**\n * Inverse function of `tupled`\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n * ```\n *\n * @since 2.0.0\n */ const untupled = (f)=>(...a)=>f(a);\nfunction pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n    switch(arguments.length){\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        default:\n            {\n                let ret = arguments[0];\n                for(let i = 1; i < arguments.length; i++){\n                    ret = arguments[i](ret);\n                }\n                return ret;\n            }\n    }\n}\nfunction flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n    switch(arguments.length){\n        case 1:\n            return ab;\n        case 2:\n            return function() {\n                return bc(ab.apply(this, arguments));\n            };\n        case 3:\n            return function() {\n                return cd(bc(ab.apply(this, arguments)));\n            };\n        case 4:\n            return function() {\n                return de(cd(bc(ab.apply(this, arguments))));\n            };\n        case 5:\n            return function() {\n                return ef(de(cd(bc(ab.apply(this, arguments)))));\n            };\n        case 6:\n            return function() {\n                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n            };\n        case 7:\n            return function() {\n                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n            };\n        case 8:\n            return function() {\n                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n            };\n        case 9:\n            return function() {\n                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n            };\n    }\n    return;\n}\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */ const hole = /*#__PURE__*/ unsafeCoerce(absurd);\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n * ```\n *\n * @since 2.0.0\n */ const SK = (_, b)=>b; //# sourceMappingURL=Function.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/GlobalValue.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/GlobalValue.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalValue: () => (/* binding */ globalValue)\n/* harmony export */ });\n/* harmony import */ var _internal_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/version.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/version.js\");\n/**\n * The `GlobalValue` module ensures that a single instance of a value is created globally,\n * even when modules are imported multiple times (e.g., due to mixing CommonJS and ESM builds)\n * or during hot-reloading in development environments like Next.js or Remix.\n *\n * It achieves this by using a versioned global store, identified by a unique `Symbol` tied to\n * the current version of the `effect` library. The store holds values that are keyed by an identifier,\n * allowing the reuse of previously computed instances across imports or reloads.\n *\n * This pattern is particularly useful in scenarios where frequent reloading can cause services or\n * single-instance objects to be recreated unnecessarily, such as in development environments with hot-reloading.\n *\n * @since 2.0.0\n */ \nconst globalStoreId = `effect/GlobalValue/globalStoreId/${_internal_version_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentVersion()}`;\nlet globalStore;\n/**\n * Retrieves or computes a global value associated with the given `id`. If the value for this `id`\n * has already been computed, it will be returned from the global store. If it does not exist yet,\n * the provided `compute` function will be executed to compute the value, store it, and then return it.\n *\n * This ensures that even in cases where the module is imported multiple times (e.g., in mixed environments\n * like CommonJS and ESM, or during hot-reloading in development), the value is computed only once and reused\n * thereafter.\n *\n * @example\n * ```ts\n * import { globalValue } from \"effect/GlobalValue\"\n *\n * // This cache will persist as long as the module is running,\n * // even if reloaded or imported elsewhere\n * const myCache = globalValue(\n *   Symbol.for(\"myCache\"),\n *   () => new WeakMap<object, number>()\n * )\n * ```\n *\n * @since 2.0.0\n */ const globalValue = (id, compute)=>{\n    if (!globalStore) {\n        // @ts-expect-error\n        globalThis[globalStoreId] ??= new Map();\n        // @ts-expect-error\n        globalStore = globalThis[globalStoreId];\n    }\n    if (!globalStore.has(id)) {\n        globalStore.set(id, compute());\n    }\n    return globalStore.get(id);\n}; //# sourceMappingURL=GlobalValue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0dsb2JhbFZhbHVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNnRDtBQUNqRCxNQUFNQyxnQkFBZ0IsQ0FBQyxpQ0FBaUMsRUFBZUQsbUVBQXlCLElBQUk7QUFDcEcsSUFBSUc7QUFDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQyxHQUNNLE1BQU1DLGNBQWMsQ0FBQ0MsSUFBSUM7SUFDOUIsSUFBSSxDQUFDSCxhQUFhO1FBQ2hCLG1CQUFtQjtRQUNuQkksVUFBVSxDQUFDTixjQUFjLEtBQUssSUFBSU87UUFDbEMsbUJBQW1CO1FBQ25CTCxjQUFjSSxVQUFVLENBQUNOLGNBQWM7SUFDekM7SUFDQSxJQUFJLENBQUNFLFlBQVlNLEdBQUcsQ0FBQ0osS0FBSztRQUN4QkYsWUFBWU8sR0FBRyxDQUFDTCxJQUFJQztJQUN0QjtJQUNBLE9BQU9ILFlBQVlRLEdBQUcsQ0FBQ047QUFDekIsRUFBRSxDQUNGLHVDQUF1QyIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0dsb2JhbFZhbHVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGBHbG9iYWxWYWx1ZWAgbW9kdWxlIGVuc3VyZXMgdGhhdCBhIHNpbmdsZSBpbnN0YW5jZSBvZiBhIHZhbHVlIGlzIGNyZWF0ZWQgZ2xvYmFsbHksXG4gKiBldmVuIHdoZW4gbW9kdWxlcyBhcmUgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgKGUuZy4sIGR1ZSB0byBtaXhpbmcgQ29tbW9uSlMgYW5kIEVTTSBidWlsZHMpXG4gKiBvciBkdXJpbmcgaG90LXJlbG9hZGluZyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgbGlrZSBOZXh0LmpzIG9yIFJlbWl4LlxuICpcbiAqIEl0IGFjaGlldmVzIHRoaXMgYnkgdXNpbmcgYSB2ZXJzaW9uZWQgZ2xvYmFsIHN0b3JlLCBpZGVudGlmaWVkIGJ5IGEgdW5pcXVlIGBTeW1ib2xgIHRpZWQgdG9cbiAqIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIGBlZmZlY3RgIGxpYnJhcnkuIFRoZSBzdG9yZSBob2xkcyB2YWx1ZXMgdGhhdCBhcmUga2V5ZWQgYnkgYW4gaWRlbnRpZmllcixcbiAqIGFsbG93aW5nIHRoZSByZXVzZSBvZiBwcmV2aW91c2x5IGNvbXB1dGVkIGluc3RhbmNlcyBhY3Jvc3MgaW1wb3J0cyBvciByZWxvYWRzLlxuICpcbiAqIFRoaXMgcGF0dGVybiBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGluIHNjZW5hcmlvcyB3aGVyZSBmcmVxdWVudCByZWxvYWRpbmcgY2FuIGNhdXNlIHNlcnZpY2VzIG9yXG4gKiBzaW5nbGUtaW5zdGFuY2Ugb2JqZWN0cyB0byBiZSByZWNyZWF0ZWQgdW5uZWNlc3NhcmlseSwgc3VjaCBhcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgd2l0aCBob3QtcmVsb2FkaW5nLlxuICpcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5pbXBvcnQgKiBhcyB2ZXJzaW9uIGZyb20gXCIuL2ludGVybmFsL3ZlcnNpb24uanNcIjtcbmNvbnN0IGdsb2JhbFN0b3JlSWQgPSBgZWZmZWN0L0dsb2JhbFZhbHVlL2dsb2JhbFN0b3JlSWQvJHsvKiNfX1BVUkVfXyovdmVyc2lvbi5nZXRDdXJyZW50VmVyc2lvbigpfWA7XG5sZXQgZ2xvYmFsU3RvcmU7XG4vKipcbiAqIFJldHJpZXZlcyBvciBjb21wdXRlcyBhIGdsb2JhbCB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGBpZGAuIElmIHRoZSB2YWx1ZSBmb3IgdGhpcyBgaWRgXG4gKiBoYXMgYWxyZWFkeSBiZWVuIGNvbXB1dGVkLCBpdCB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhlIGdsb2JhbCBzdG9yZS4gSWYgaXQgZG9lcyBub3QgZXhpc3QgeWV0LFxuICogdGhlIHByb3ZpZGVkIGBjb21wdXRlYCBmdW5jdGlvbiB3aWxsIGJlIGV4ZWN1dGVkIHRvIGNvbXB1dGUgdGhlIHZhbHVlLCBzdG9yZSBpdCwgYW5kIHRoZW4gcmV0dXJuIGl0LlxuICpcbiAqIFRoaXMgZW5zdXJlcyB0aGF0IGV2ZW4gaW4gY2FzZXMgd2hlcmUgdGhlIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyAoZS5nLiwgaW4gbWl4ZWQgZW52aXJvbm1lbnRzXG4gKiBsaWtlIENvbW1vbkpTIGFuZCBFU00sIG9yIGR1cmluZyBob3QtcmVsb2FkaW5nIGluIGRldmVsb3BtZW50KSwgdGhlIHZhbHVlIGlzIGNvbXB1dGVkIG9ubHkgb25jZSBhbmQgcmV1c2VkXG4gKiB0aGVyZWFmdGVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZ2xvYmFsVmFsdWUgfSBmcm9tIFwiZWZmZWN0L0dsb2JhbFZhbHVlXCJcbiAqXG4gKiAvLyBUaGlzIGNhY2hlIHdpbGwgcGVyc2lzdCBhcyBsb25nIGFzIHRoZSBtb2R1bGUgaXMgcnVubmluZyxcbiAqIC8vIGV2ZW4gaWYgcmVsb2FkZWQgb3IgaW1wb3J0ZWQgZWxzZXdoZXJlXG4gKiBjb25zdCBteUNhY2hlID0gZ2xvYmFsVmFsdWUoXG4gKiAgIFN5bWJvbC5mb3IoXCJteUNhY2hlXCIpLFxuICogICAoKSA9PiBuZXcgV2Vha01hcDxvYmplY3QsIG51bWJlcj4oKVxuICogKVxuICogYGBgXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBnbG9iYWxWYWx1ZSA9IChpZCwgY29tcHV0ZSkgPT4ge1xuICBpZiAoIWdsb2JhbFN0b3JlKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGdsb2JhbFRoaXNbZ2xvYmFsU3RvcmVJZF0gPz89IG5ldyBNYXAoKTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgZ2xvYmFsU3RvcmUgPSBnbG9iYWxUaGlzW2dsb2JhbFN0b3JlSWRdO1xuICB9XG4gIGlmICghZ2xvYmFsU3RvcmUuaGFzKGlkKSkge1xuICAgIGdsb2JhbFN0b3JlLnNldChpZCwgY29tcHV0ZSgpKTtcbiAgfVxuICByZXR1cm4gZ2xvYmFsU3RvcmUuZ2V0KGlkKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbG9iYWxWYWx1ZS5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiIsImdsb2JhbFN0b3JlSWQiLCJnZXRDdXJyZW50VmVyc2lvbiIsImdsb2JhbFN0b3JlIiwiZ2xvYmFsVmFsdWUiLCJpZCIsImNvbXB1dGUiLCJnbG9iYWxUaGlzIiwiTWFwIiwiaGFzIiwic2V0IiwiZ2V0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Hash.js":
/*!**********************************************!*\
  !*** ./node_modules/effect/dist/esm/Hash.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   cached: () => (/* binding */ cached),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isHash: () => (/* binding */ isHash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   optimize: () => (/* binding */ optimize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   structure: () => (/* binding */ structure),\n/* harmony export */   structureKeys: () => (/* binding */ structureKeys),\n/* harmony export */   symbol: () => (/* binding */ symbol)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/**\n * @since 2.0.0\n */ \n\n\n\n/** @internal */ const randomHashCache = /*#__PURE__*/ (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__.globalValue)(/*#__PURE__*/ Symbol.for(\"effect/Hash/randomHashCache\"), ()=>new WeakMap());\n/**\n * @since 2.0.0\n * @category symbols\n */ const symbol = /*#__PURE__*/ Symbol.for(\"effect/Hash\");\n/**\n * @since 2.0.0\n * @category hashing\n */ const hash = (self)=>{\n    if (_Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled === true) {\n        return 0;\n    }\n    switch(typeof self){\n        case \"number\":\n            return number(self);\n        case \"bigint\":\n            return string(self.toString(10));\n        case \"boolean\":\n            return string(String(self));\n        case \"symbol\":\n            return string(String(self));\n        case \"string\":\n            return string(self);\n        case \"undefined\":\n            return string(\"undefined\");\n        case \"function\":\n        case \"object\":\n            {\n                if (self === null) {\n                    return string(\"null\");\n                } else if (self instanceof Date) {\n                    return hash(self.toISOString());\n                } else if (self instanceof URL) {\n                    return hash(self.href);\n                } else if (isHash(self)) {\n                    return self[symbol]();\n                } else {\n                    return random(self);\n                }\n            }\n        default:\n            throw new Error(`BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`);\n    }\n};\n/**\n * @since 2.0.0\n * @category hashing\n */ const random = (self)=>{\n    if (!randomHashCache.has(self)) {\n        randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)));\n    }\n    return randomHashCache.get(self);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */ const combine = (b)=>(self)=>self * 53 ^ b;\n/**\n * @since 2.0.0\n * @category hashing\n */ const optimize = (n)=>n & 0xbfffffff | n >>> 1 & 0x40000000;\n/**\n * @since 2.0.0\n * @category guards\n */ const isHash = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.hasProperty)(u, symbol);\n/**\n * @since 2.0.0\n * @category hashing\n */ const number = (n)=>{\n    if (n !== n || n === Infinity) {\n        return 0;\n    }\n    let h = n | 0;\n    if (h !== n) {\n        h ^= n * 0xffffffff;\n    }\n    while(n > 0xffffffff){\n        h ^= n /= 0xffffffff;\n    }\n    return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */ const string = (str)=>{\n    let h = 5381, i = str.length;\n    while(i){\n        h = h * 33 ^ str.charCodeAt(--i);\n    }\n    return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */ const structureKeys = (o, keys)=>{\n    let h = 12289;\n    for(let i = 0; i < keys.length; i++){\n        h ^= (0,_Function_js__WEBPACK_IMPORTED_MODULE_3__.pipe)(string(keys[i]), combine(hash(o[keys[i]])));\n    }\n    return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */ const structure = (o)=>structureKeys(o, Object.keys(o));\n/**\n * @since 2.0.0\n * @category hashing\n */ const array = (arr)=>{\n    let h = 6151;\n    for(let i = 0; i < arr.length; i++){\n        h = (0,_Function_js__WEBPACK_IMPORTED_MODULE_3__.pipe)(h, combine(hash(arr[i])));\n    }\n    return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */ const cached = function() {\n    if (arguments.length === 1) {\n        const self = arguments[0];\n        return function(hash) {\n            Object.defineProperty(self, symbol, {\n                value () {\n                    return hash;\n                },\n                enumerable: false\n            });\n            return hash;\n        };\n    }\n    const self = arguments[0];\n    const hash = arguments[1];\n    Object.defineProperty(self, symbol, {\n        value () {\n            return hash;\n        },\n        enumerable: false\n    });\n    return hash;\n}; //# sourceMappingURL=Hash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Inspectable.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Inspectable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseProto: () => (/* binding */ BaseProto),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   NodeInspectSymbol: () => (/* binding */ NodeInspectSymbol),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   isRedactable: () => (/* binding */ isRedactable),\n/* harmony export */   redact: () => (/* binding */ redact),\n/* harmony export */   stringifyCircular: () => (/* binding */ stringifyCircular),\n/* harmony export */   symbolRedactable: () => (/* binding */ symbolRedactable),\n/* harmony export */   toJSON: () => (/* binding */ toJSON),\n/* harmony export */   toStringUnknown: () => (/* binding */ toStringUnknown),\n/* harmony export */   withRedactableContext: () => (/* binding */ withRedactableContext)\n/* harmony export */ });\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n\n\n/**\n * @since 2.0.0\n * @category symbols\n */ const NodeInspectSymbol = /*#__PURE__*/ Symbol.for(\"nodejs.util.inspect.custom\");\n/**\n * @since 2.0.0\n */ const toJSON = (x)=>{\n    try {\n        if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(x, \"toJSON\") && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(x[\"toJSON\"]) && x[\"toJSON\"].length === 0) {\n            return x.toJSON();\n        } else if (Array.isArray(x)) {\n            return x.map(toJSON);\n        }\n    } catch  {\n        return {};\n    }\n    return redact(x);\n};\n/**\n * @since 2.0.0\n */ const format = (x)=>JSON.stringify(x, null, 2);\n/**\n * @since 2.0.0\n */ const BaseProto = {\n    toJSON () {\n        return toJSON(this);\n    },\n    [NodeInspectSymbol] () {\n        return this.toJSON();\n    },\n    toString () {\n        return format(this.toJSON());\n    }\n};\n/**\n * @since 2.0.0\n */ class Class {\n    /**\n   * @since 2.0.0\n   */ [NodeInspectSymbol]() {\n        return this.toJSON();\n    }\n    /**\n   * @since 2.0.0\n   */ toString() {\n        return format(this.toJSON());\n    }\n}\n/**\n * @since 2.0.0\n */ const toStringUnknown = (u, whitespace = 2)=>{\n    if (typeof u === \"string\") {\n        return u;\n    }\n    try {\n        return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u);\n    } catch  {\n        return String(u);\n    }\n};\n/**\n * @since 2.0.0\n */ const stringifyCircular = (obj, whitespace)=>{\n    let cache = [];\n    const retVal = JSON.stringify(obj, (_key, value)=>typeof value === \"object\" && value !== null ? cache.includes(value) ? undefined // circular reference\n         : cache.push(value) && (redactableState.fiberRefs !== undefined && isRedactable(value) ? value[symbolRedactable](redactableState.fiberRefs) : value) : value, whitespace);\n    cache = undefined;\n    return retVal;\n};\n/**\n * @since 3.10.0\n * @category redactable\n */ const symbolRedactable = /*#__PURE__*/ Symbol.for(\"effect/Inspectable/Redactable\");\n/**\n * @since 3.10.0\n * @category redactable\n */ const isRedactable = (u)=>typeof u === \"object\" && u !== null && symbolRedactable in u;\nconst redactableState = /*#__PURE__*/ (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_1__.globalValue)(\"effect/Inspectable/redactableState\", ()=>({\n        fiberRefs: undefined\n    }));\n/**\n * @since 3.10.0\n * @category redactable\n */ const withRedactableContext = (context, f)=>{\n    const prev = redactableState.fiberRefs;\n    redactableState.fiberRefs = context;\n    try {\n        return f();\n    } finally{\n        redactableState.fiberRefs = prev;\n    }\n};\n/**\n * @since 3.10.0\n * @category redactable\n */ const redact = (u)=>{\n    if (isRedactable(u) && redactableState.fiberRefs !== undefined) {\n        return u[symbolRedactable](redactableState.fiberRefs);\n    }\n    return u;\n}; //# sourceMappingURL=Inspectable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0luc3BlY3RhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0M7QUFDVTtBQUN6RDs7O0NBR0MsR0FDTSxNQUFNRyxvQkFBb0IsV0FBVyxHQUFFQyxPQUFPQyxHQUFHLENBQUMsOEJBQThCO0FBQ3ZGOztDQUVDLEdBQ00sTUFBTUMsU0FBU0MsQ0FBQUE7SUFDcEIsSUFBSTtRQUNGLElBQUlOLDBEQUFXQSxDQUFDTSxHQUFHLGFBQWFMLHlEQUFVQSxDQUFDSyxDQUFDLENBQUMsU0FBUyxLQUFLQSxDQUFDLENBQUMsU0FBUyxDQUFDQyxNQUFNLEtBQUssR0FBRztZQUNuRixPQUFPRCxFQUFFRCxNQUFNO1FBQ2pCLE9BQU8sSUFBSUcsTUFBTUMsT0FBTyxDQUFDSCxJQUFJO1lBQzNCLE9BQU9BLEVBQUVJLEdBQUcsQ0FBQ0w7UUFDZjtJQUNGLEVBQUUsT0FBTTtRQUNOLE9BQU8sQ0FBQztJQUNWO0lBQ0EsT0FBT00sT0FBT0w7QUFDaEIsRUFBRTtBQUNGOztDQUVDLEdBQ00sTUFBTU0sU0FBU04sQ0FBQUEsSUFBS08sS0FBS0MsU0FBUyxDQUFDUixHQUFHLE1BQU0sR0FBRztBQUN0RDs7Q0FFQyxHQUNNLE1BQU1TLFlBQVk7SUFDdkJWO1FBQ0UsT0FBT0EsT0FBTyxJQUFJO0lBQ3BCO0lBQ0EsQ0FBQ0gsa0JBQWtCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDRyxNQUFNO0lBQ3BCO0lBQ0FXO1FBQ0UsT0FBT0osT0FBTyxJQUFJLENBQUNQLE1BQU07SUFDM0I7QUFDRixFQUFFO0FBQ0Y7O0NBRUMsR0FDTSxNQUFNWTtJQUNYOztHQUVDLEdBQ0QsQ0FBQ2Ysa0JBQWtCLEdBQUc7UUFDcEIsT0FBTyxJQUFJLENBQUNHLE1BQU07SUFDcEI7SUFDQTs7R0FFQyxHQUNEVyxXQUFXO1FBQ1QsT0FBT0osT0FBTyxJQUFJLENBQUNQLE1BQU07SUFDM0I7QUFDRjtBQUNBOztDQUVDLEdBQ00sTUFBTWEsa0JBQWtCLENBQUNDLEdBQUdDLGFBQWEsQ0FBQztJQUMvQyxJQUFJLE9BQU9ELE1BQU0sVUFBVTtRQUN6QixPQUFPQTtJQUNUO0lBQ0EsSUFBSTtRQUNGLE9BQU8sT0FBT0EsTUFBTSxXQUFXRSxrQkFBa0JGLEdBQUdDLGNBQWNFLE9BQU9IO0lBQzNFLEVBQUUsT0FBTTtRQUNOLE9BQU9HLE9BQU9IO0lBQ2hCO0FBQ0YsRUFBRTtBQUNGOztDQUVDLEdBQ00sTUFBTUUsb0JBQW9CLENBQUNFLEtBQUtIO0lBQ3JDLElBQUlJLFFBQVEsRUFBRTtJQUNkLE1BQU1DLFNBQVNaLEtBQUtDLFNBQVMsQ0FBQ1MsS0FBSyxDQUFDRyxNQUFNQyxRQUFVLE9BQU9BLFVBQVUsWUFBWUEsVUFBVSxPQUFPSCxNQUFNSSxRQUFRLENBQUNELFNBQVNFLFVBQVUscUJBQXFCO1dBQ3ZKTCxNQUFNTSxJQUFJLENBQUNILFVBQVdJLENBQUFBLGdCQUFnQkMsU0FBUyxLQUFLSCxhQUFhSSxhQUFhTixTQUFTQSxLQUFLLENBQUNPLGlCQUFpQixDQUFDSCxnQkFBZ0JDLFNBQVMsSUFBSUwsS0FBSSxJQUFLQSxPQUFPUDtJQUM5SkksUUFBUUs7SUFDUixPQUFPSjtBQUNULEVBQUU7QUFDRjs7O0NBR0MsR0FDTSxNQUFNUyxtQkFBbUIsV0FBVyxHQUFFL0IsT0FBT0MsR0FBRyxDQUFDLGlDQUFpQztBQUN6Rjs7O0NBR0MsR0FDTSxNQUFNNkIsZUFBZWQsQ0FBQUEsSUFBSyxPQUFPQSxNQUFNLFlBQVlBLE1BQU0sUUFBUWUsb0JBQW9CZixFQUFFO0FBQzlGLE1BQU1ZLGtCQUFrQixXQUFXLEdBQUVoQyw0REFBV0EsQ0FBQyxzQ0FBc0MsSUFBTztRQUM1RmlDLFdBQVdIO0lBQ2I7QUFDQTs7O0NBR0MsR0FDTSxNQUFNTSx3QkFBd0IsQ0FBQ0MsU0FBU0M7SUFDN0MsTUFBTUMsT0FBT1AsZ0JBQWdCQyxTQUFTO0lBQ3RDRCxnQkFBZ0JDLFNBQVMsR0FBR0k7SUFDNUIsSUFBSTtRQUNGLE9BQU9DO0lBQ1QsU0FBVTtRQUNSTixnQkFBZ0JDLFNBQVMsR0FBR007SUFDOUI7QUFDRixFQUFFO0FBQ0Y7OztDQUdDLEdBQ00sTUFBTTNCLFNBQVNRLENBQUFBO0lBQ3BCLElBQUljLGFBQWFkLE1BQU1ZLGdCQUFnQkMsU0FBUyxLQUFLSCxXQUFXO1FBQzlELE9BQU9WLENBQUMsQ0FBQ2UsaUJBQWlCLENBQUNILGdCQUFnQkMsU0FBUztJQUN0RDtJQUNBLE9BQU9iO0FBQ1QsRUFBRSxDQUNGLHVDQUF1QyIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0luc3BlY3RhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdsb2JhbFZhbHVlIH0gZnJvbSBcIi4vR2xvYmFsVmFsdWUuanNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5LCBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vUHJlZGljYXRlLmpzXCI7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IHN5bWJvbHNcbiAqL1xuZXhwb3J0IGNvbnN0IE5vZGVJbnNwZWN0U3ltYm9sID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0b0pTT04gPSB4ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoaGFzUHJvcGVydHkoeCwgXCJ0b0pTT05cIikgJiYgaXNGdW5jdGlvbih4W1widG9KU09OXCJdKSAmJiB4W1widG9KU09OXCJdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHgudG9KU09OKCk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgICByZXR1cm4geC5tYXAodG9KU09OKTtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gcmVkYWN0KHgpO1xufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JtYXQgPSB4ID0+IEpTT04uc3RyaW5naWZ5KHgsIG51bGwsIDIpO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJhc2VQcm90byA9IHtcbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0b0pTT04odGhpcyk7XG4gIH0sXG4gIFtOb2RlSW5zcGVjdFN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XG4gIH0sXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBmb3JtYXQodGhpcy50b0pTT04oKSk7XG4gIH1cbn07XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY2xhc3MgQ2xhc3Mge1xuICAvKipcbiAgICogQHNpbmNlIDIuMC4wXG4gICAqL1xuICBbTm9kZUluc3BlY3RTeW1ib2xdKCkge1xuICAgIHJldHVybiB0aGlzLnRvSlNPTigpO1xuICB9XG4gIC8qKlxuICAgKiBAc2luY2UgMi4wLjBcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBmb3JtYXQodGhpcy50b0pTT04oKSk7XG4gIH1cbn1cbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0b1N0cmluZ1Vua25vd24gPSAodSwgd2hpdGVzcGFjZSA9IDIpID0+IHtcbiAgaWYgKHR5cGVvZiB1ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHU7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gdHlwZW9mIHUgPT09IFwib2JqZWN0XCIgPyBzdHJpbmdpZnlDaXJjdWxhcih1LCB3aGl0ZXNwYWNlKSA6IFN0cmluZyh1KTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFN0cmluZyh1KTtcbiAgfVxufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmdpZnlDaXJjdWxhciA9IChvYmosIHdoaXRlc3BhY2UpID0+IHtcbiAgbGV0IGNhY2hlID0gW107XG4gIGNvbnN0IHJldFZhbCA9IEpTT04uc3RyaW5naWZ5KG9iaiwgKF9rZXksIHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgPyBjYWNoZS5pbmNsdWRlcyh2YWx1ZSkgPyB1bmRlZmluZWQgLy8gY2lyY3VsYXIgcmVmZXJlbmNlXG4gIDogY2FjaGUucHVzaCh2YWx1ZSkgJiYgKHJlZGFjdGFibGVTdGF0ZS5maWJlclJlZnMgIT09IHVuZGVmaW5lZCAmJiBpc1JlZGFjdGFibGUodmFsdWUpID8gdmFsdWVbc3ltYm9sUmVkYWN0YWJsZV0ocmVkYWN0YWJsZVN0YXRlLmZpYmVyUmVmcykgOiB2YWx1ZSkgOiB2YWx1ZSwgd2hpdGVzcGFjZSk7XG4gIGNhY2hlID0gdW5kZWZpbmVkO1xuICByZXR1cm4gcmV0VmFsO1xufTtcbi8qKlxuICogQHNpbmNlIDMuMTAuMFxuICogQGNhdGVnb3J5IHJlZGFjdGFibGVcbiAqL1xuZXhwb3J0IGNvbnN0IHN5bWJvbFJlZGFjdGFibGUgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9JbnNwZWN0YWJsZS9SZWRhY3RhYmxlXCIpO1xuLyoqXG4gKiBAc2luY2UgMy4xMC4wXG4gKiBAY2F0ZWdvcnkgcmVkYWN0YWJsZVxuICovXG5leHBvcnQgY29uc3QgaXNSZWRhY3RhYmxlID0gdSA9PiB0eXBlb2YgdSA9PT0gXCJvYmplY3RcIiAmJiB1ICE9PSBudWxsICYmIHN5bWJvbFJlZGFjdGFibGUgaW4gdTtcbmNvbnN0IHJlZGFjdGFibGVTdGF0ZSA9IC8qI19fUFVSRV9fKi9nbG9iYWxWYWx1ZShcImVmZmVjdC9JbnNwZWN0YWJsZS9yZWRhY3RhYmxlU3RhdGVcIiwgKCkgPT4gKHtcbiAgZmliZXJSZWZzOiB1bmRlZmluZWRcbn0pKTtcbi8qKlxuICogQHNpbmNlIDMuMTAuMFxuICogQGNhdGVnb3J5IHJlZGFjdGFibGVcbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhSZWRhY3RhYmxlQ29udGV4dCA9IChjb250ZXh0LCBmKSA9PiB7XG4gIGNvbnN0IHByZXYgPSByZWRhY3RhYmxlU3RhdGUuZmliZXJSZWZzO1xuICByZWRhY3RhYmxlU3RhdGUuZmliZXJSZWZzID0gY29udGV4dDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZigpO1xuICB9IGZpbmFsbHkge1xuICAgIHJlZGFjdGFibGVTdGF0ZS5maWJlclJlZnMgPSBwcmV2O1xuICB9XG59O1xuLyoqXG4gKiBAc2luY2UgMy4xMC4wXG4gKiBAY2F0ZWdvcnkgcmVkYWN0YWJsZVxuICovXG5leHBvcnQgY29uc3QgcmVkYWN0ID0gdSA9PiB7XG4gIGlmIChpc1JlZGFjdGFibGUodSkgJiYgcmVkYWN0YWJsZVN0YXRlLmZpYmVyUmVmcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVbc3ltYm9sUmVkYWN0YWJsZV0ocmVkYWN0YWJsZVN0YXRlLmZpYmVyUmVmcyk7XG4gIH1cbiAgcmV0dXJuIHU7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5zcGVjdGFibGUuanMubWFwIl0sIm5hbWVzIjpbImdsb2JhbFZhbHVlIiwiaGFzUHJvcGVydHkiLCJpc0Z1bmN0aW9uIiwiTm9kZUluc3BlY3RTeW1ib2wiLCJTeW1ib2wiLCJmb3IiLCJ0b0pTT04iLCJ4IiwibGVuZ3RoIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwicmVkYWN0IiwiZm9ybWF0IiwiSlNPTiIsInN0cmluZ2lmeSIsIkJhc2VQcm90byIsInRvU3RyaW5nIiwiQ2xhc3MiLCJ0b1N0cmluZ1Vua25vd24iLCJ1Iiwid2hpdGVzcGFjZSIsInN0cmluZ2lmeUNpcmN1bGFyIiwiU3RyaW5nIiwib2JqIiwiY2FjaGUiLCJyZXRWYWwiLCJfa2V5IiwidmFsdWUiLCJpbmNsdWRlcyIsInVuZGVmaW5lZCIsInB1c2giLCJyZWRhY3RhYmxlU3RhdGUiLCJmaWJlclJlZnMiLCJpc1JlZGFjdGFibGUiLCJzeW1ib2xSZWRhY3RhYmxlIiwid2l0aFJlZGFjdGFibGVDb250ZXh0IiwiY29udGV4dCIsImYiLCJwcmV2Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Inspectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Iterable.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Iterable.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendAll: () => (/* binding */ appendAll),\n/* harmony export */   cartesian: () => (/* binding */ cartesian),\n/* harmony export */   cartesianWith: () => (/* binding */ cartesianWith),\n/* harmony export */   chunksOf: () => (/* binding */ chunksOf),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   containsWith: () => (/* binding */ containsWith),\n/* harmony export */   countBy: () => (/* binding */ countBy),\n/* harmony export */   dedupeAdjacent: () => (/* binding */ dedupeAdjacent),\n/* harmony export */   dedupeAdjacentWith: () => (/* binding */ dedupeAdjacentWith),\n/* harmony export */   drop: () => (/* binding */ drop),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   filterMapWhile: () => (/* binding */ filterMapWhile),\n/* harmony export */   findFirst: () => (/* binding */ findFirst),\n/* harmony export */   findLast: () => (/* binding */ findLast),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatMapNullable: () => (/* binding */ flatMapNullable),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromRecord: () => (/* binding */ fromRecord),\n/* harmony export */   getLefts: () => (/* binding */ getLefts),\n/* harmony export */   getRights: () => (/* binding */ getRights),\n/* harmony export */   getSomes: () => (/* binding */ getSomes),\n/* harmony export */   group: () => (/* binding */ group),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   groupWith: () => (/* binding */ groupWith),\n/* harmony export */   head: () => (/* binding */ head),\n/* harmony export */   intersperse: () => (/* binding */ intersperse),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   makeBy: () => (/* binding */ makeBy),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   of: () => (/* binding */ of),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependAll: () => (/* binding */ prependAll),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   replicate: () => (/* binding */ replicate),\n/* harmony export */   scan: () => (/* binding */ scan),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   take: () => (/* binding */ take),\n/* harmony export */   takeWhile: () => (/* binding */ takeWhile),\n/* harmony export */   unfold: () => (/* binding */ unfold),\n/* harmony export */   unsafeHead: () => (/* binding */ unsafeHead),\n/* harmony export */   zip: () => (/* binding */ zip),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Tuple_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tuple.js */ \"(ssr)/./node_modules/effect/dist/esm/Tuple.js\");\n/**\n * This module provides utility functions for working with Iterables in TypeScript.\n *\n * @since 2.0.0\n */ \n\n\n\n\n\n/**\n * Return a `Iterable` with element `i` initialized with `f(i)`.\n *\n * If the `length` is not specified, the `Iterable` will be infinite.\n *\n * **Note**. `length` is normalized to an integer >= 1.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { makeBy } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(makeBy(n => n * 2, { length: 5 })), [0, 2, 4, 6, 8])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const makeBy = (f, options)=>{\n    const max = options?.length !== undefined ? Math.max(1, Math.floor(options.length)) : Infinity;\n    return {\n        [Symbol.iterator] () {\n            let i = 0;\n            return {\n                next () {\n                    if (i < max) {\n                        return {\n                            value: f(i++),\n                            done: false\n                        };\n                    }\n                    return {\n                        done: true,\n                        value: undefined\n                    };\n                }\n            };\n        }\n    };\n};\n/**\n * Return a `Iterable` containing a range of integers, including both endpoints.\n *\n * If `end` is omitted, the range will not have an upper bound.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { range } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(range(1, 3)), [1, 2, 3])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const range = (start, end)=>{\n    if (end === undefined) {\n        return makeBy((i)=>start + i);\n    }\n    return makeBy((i)=>start + i, {\n        length: start <= end ? end - start + 1 : 1\n    });\n};\n/**\n * Return a `Iterable` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { replicate } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const replicate = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (a, n)=>makeBy(()=>a, {\n        length: n\n    }));\n/**\n * Takes a record and returns an Iterable of tuples containing its keys and values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromRecord } from \"effect/Iterable\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.from(fromRecord(x)), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */ const fromRecord = (self)=>({\n        *[Symbol.iterator] () {\n            for(const key in self){\n                if (Object.prototype.hasOwnProperty.call(self, key)) {\n                    yield [\n                        key,\n                        self[key]\n                    ];\n                }\n            }\n        }\n    });\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */ const prepend = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, head)=>prependAll(self, [\n        head\n    ]));\n/**\n * Prepends the specified prefix iterable to the beginning of the specified iterable.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n *   [\"a\", \"b\", 1, 2]\n * )\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */ const prependAll = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>appendAll(that, self));\n/**\n * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */ const append = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, last)=>appendAll(self, [\n        last\n    ]));\n/**\n * Concatenates two iterables, combining their elements.\n *\n * @category concatenating\n * @since 2.0.0\n */ const appendAll = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>({\n        [Symbol.iterator] () {\n            const iterA = self[Symbol.iterator]();\n            let doneA = false;\n            let iterB;\n            return {\n                next () {\n                    if (!doneA) {\n                        const r = iterA.next();\n                        if (r.done) {\n                            doneA = true;\n                            iterB = that[Symbol.iterator]();\n                            return iterB.next();\n                        }\n                        return r;\n                    }\n                    return iterB.next();\n                }\n            };\n        }\n    }));\n/**\n * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n *\n * @category folding\n * @since 2.0.0\n */ const scan = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f)=>({\n        [Symbol.iterator] () {\n            let acc = b;\n            let iterator;\n            function next() {\n                if (iterator === undefined) {\n                    iterator = self[Symbol.iterator]();\n                    return {\n                        done: false,\n                        value: acc\n                    };\n                }\n                const result = iterator.next();\n                if (result.done) {\n                    return result;\n                }\n                acc = f(acc, result.value);\n                return {\n                    done: false,\n                    value: acc\n                };\n            }\n            return {\n                next\n            };\n        }\n    }));\n/**\n * Determine if an `Iterable` is empty\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmpty } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(isEmpty([]), true);\n * assert.deepStrictEqual(isEmpty([1, 2, 3]), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isEmpty = (self)=>{\n    const iterator = self[Symbol.iterator]();\n    return iterator.next().done === true;\n};\n/**\n * Return the number of elements in a `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */ const size = (self)=>{\n    const iterator = self[Symbol.iterator]();\n    let count = 0;\n    while(!iterator.next().done){\n        count++;\n    }\n    return count;\n};\n/**\n * Get the first element of a `Iterable`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */ const head = (self)=>{\n    const iterator = self[Symbol.iterator]();\n    const result = iterator.next();\n    return result.done ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.none() : _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(result.value);\n};\n/**\n * Get the first element of a `Iterable`, or throw an error if the `Iterable` is empty.\n *\n * @category getters\n * @since 3.3.0\n */ const unsafeHead = (self)=>{\n    const iterator = self[Symbol.iterator]();\n    const result = iterator.next();\n    if (result.done) throw new Error(\"unsafeHead: empty iterable\");\n    return result.value;\n};\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */ const take = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>({\n        [Symbol.iterator] () {\n            let i = 0;\n            const iterator = self[Symbol.iterator]();\n            return {\n                next () {\n                    if (i < n) {\n                        i++;\n                        return iterator.next();\n                    }\n                    return {\n                        done: true,\n                        value: undefined\n                    };\n                }\n            };\n        }\n    }));\n/**\n * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */ const takeWhile = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let i = 0;\n            return {\n                next () {\n                    const result = iterator.next();\n                    if (result.done || !predicate(result.value, i++)) {\n                        return {\n                            done: true,\n                            value: undefined\n                        };\n                    }\n                    return result;\n                }\n            };\n        }\n    }));\n/**\n * Drop a max number of elements from the start of an `Iterable`\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */ const drop = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let i = 0;\n            return {\n                next () {\n                    while(i < n){\n                        const result = iterator.next();\n                        if (result.done) {\n                            return {\n                                done: true,\n                                value: undefined\n                            };\n                        }\n                        i++;\n                    }\n                    return iterator.next();\n                }\n            };\n        }\n    }));\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */ const findFirst = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    let i = 0;\n    for (const a of self){\n        const o = f(a, i);\n        if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(o)) {\n            if (o) {\n                return _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(a);\n            }\n        } else {\n            if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(o)) {\n                return o;\n            }\n        }\n        i++;\n    }\n    return _Option_js__WEBPACK_IMPORTED_MODULE_1__.none();\n});\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */ const findLast = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    let i = 0;\n    let last = _Option_js__WEBPACK_IMPORTED_MODULE_1__.none();\n    for (const a of self){\n        const o = f(a, i);\n        if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(o)) {\n            if (o) {\n                last = _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(a);\n            }\n        } else {\n            if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(o)) {\n                last = o;\n            }\n        }\n        i++;\n    }\n    return last;\n});\n/**\n * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n *\n * @category zipping\n * @since 2.0.0\n */ const zip = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>zipWith(self, that, _Tuple_js__WEBPACK_IMPORTED_MODULE_3__.make));\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @category zipping\n * @since 2.0.0\n */ const zipWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f)=>({\n        [Symbol.iterator] () {\n            const selfIterator = self[Symbol.iterator]();\n            const thatIterator = that[Symbol.iterator]();\n            return {\n                next () {\n                    const selfResult = selfIterator.next();\n                    const thatResult = thatIterator.next();\n                    if (selfResult.done || thatResult.done) {\n                        return {\n                            done: true,\n                            value: undefined\n                        };\n                    }\n                    return {\n                        done: false,\n                        value: f(selfResult.value, thatResult.value)\n                    };\n                }\n            };\n        }\n    }));\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @since 2.0.0\n */ const intersperse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, middle)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let next = iterator.next();\n            let emitted = false;\n            return {\n                next () {\n                    if (next.done) {\n                        return next;\n                    } else if (emitted) {\n                        emitted = false;\n                        return {\n                            done: false,\n                            value: middle\n                        };\n                    }\n                    emitted = true;\n                    const result = next;\n                    next = iterator.next();\n                    return result;\n                }\n            };\n        }\n    }));\n/**\n * Returns a function that checks if an `Iterable` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */ const containsWith = (isEquivalent)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, a)=>{\n        for (const i of self){\n            if (isEquivalent(a, i)) {\n                return true;\n            }\n        }\n        return false;\n    });\nconst _equivalence = /*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_4__.equivalence();\n/**\n * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */ const contains = /*#__PURE__*/ containsWith(_equivalence);\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`.\n *\n * @category splitting\n * @since 2.0.0\n */ const chunksOf = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>{\n    const safeN = Math.max(1, Math.floor(n));\n    return {\n        [Symbol.iterator] () {\n            let iterator = self[Symbol.iterator]();\n            return {\n                next () {\n                    if (iterator === undefined) {\n                        return {\n                            done: true,\n                            value: undefined\n                        };\n                    }\n                    const chunk = [];\n                    for(let i = 0; i < safeN; i++){\n                        const result = iterator.next();\n                        if (result.done) {\n                            iterator = undefined;\n                            return chunk.length === 0 ? {\n                                done: true,\n                                value: undefined\n                            } : {\n                                done: false,\n                                value: chunk\n                            };\n                        }\n                        chunk.push(result.value);\n                    }\n                    return {\n                        done: false,\n                        value: chunk\n                    };\n                }\n            };\n        }\n    };\n});\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @category grouping\n * @since 2.0.0\n */ const groupWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let nextResult;\n            return {\n                next () {\n                    let result;\n                    if (nextResult !== undefined) {\n                        if (nextResult.done) {\n                            return {\n                                done: true,\n                                value: undefined\n                            };\n                        }\n                        result = nextResult;\n                        nextResult = undefined;\n                    } else {\n                        result = iterator.next();\n                        if (result.done) {\n                            return {\n                                done: true,\n                                value: undefined\n                            };\n                        }\n                    }\n                    const chunk = [\n                        result.value\n                    ];\n                    while(true){\n                        const next = iterator.next();\n                        if (next.done || !isEquivalent(result.value, next.value)) {\n                            nextResult = next;\n                            return {\n                                done: false,\n                                value: chunk\n                            };\n                        }\n                        chunk.push(next.value);\n                    }\n                }\n            };\n        }\n    }));\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s.\n *\n * @category grouping\n * @since 2.0.0\n */ const group = /*#__PURE__*/ groupWith(/*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_4__.equivalence());\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @category grouping\n * @since 2.0.0\n */ const groupBy = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = {};\n    for (const a of self){\n        const k = f(a);\n        if (Object.prototype.hasOwnProperty.call(out, k)) {\n            out[k].push(a);\n        } else {\n            out[k] = [\n                a\n            ];\n        }\n    }\n    return out;\n});\nconst constEmpty = {\n    [Symbol.iterator] () {\n        return constEmptyIterator;\n    }\n};\nconst constEmptyIterator = {\n    next () {\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n};\n/**\n * @category constructors\n * @since 2.0.0\n */ const empty = ()=>constEmpty;\n/**\n * Constructs a new `Iterable<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */ const of = (a)=>[\n        a\n    ];\n/**\n * @category mapping\n * @since 2.0.0\n */ const map = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let i = 0;\n            return {\n                next () {\n                    const result = iterator.next();\n                    if (result.done) {\n                        return {\n                            done: true,\n                            value: undefined\n                        };\n                    }\n                    return {\n                        done: false,\n                        value: f(result.value, i++)\n                    };\n                }\n            };\n        }\n    }));\n/**\n * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */ const flatMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>flatten(map(self, f)));\n/**\n * Flattens an Iterable of Iterables into a single Iterable\n *\n * @category sequencing\n * @since 2.0.0\n */ const flatten = (self)=>({\n        [Symbol.iterator] () {\n            const outerIterator = self[Symbol.iterator]();\n            let innerIterator;\n            function next() {\n                if (innerIterator === undefined) {\n                    const next = outerIterator.next();\n                    if (next.done) {\n                        return next;\n                    }\n                    innerIterator = next.value[Symbol.iterator]();\n                }\n                const result = innerIterator.next();\n                if (result.done) {\n                    innerIterator = undefined;\n                    return next();\n                }\n                return result;\n            }\n            return {\n                next\n            };\n        }\n    });\n/**\n * @category filtering\n * @since 2.0.0\n */ const filterMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let i = 0;\n            return {\n                next () {\n                    let result = iterator.next();\n                    while(!result.done){\n                        const b = f(result.value, i++);\n                        if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(b)) {\n                            return {\n                                done: false,\n                                value: b.value\n                            };\n                        }\n                        result = iterator.next();\n                    }\n                    return {\n                        done: true,\n                        value: undefined\n                    };\n                }\n            };\n        }\n    }));\n/**\n * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n *\n * @category filtering\n * @since 2.0.0\n */ const filterMapWhile = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let i = 0;\n            return {\n                next () {\n                    const result = iterator.next();\n                    if (result.done) {\n                        return {\n                            done: true,\n                            value: undefined\n                        };\n                    }\n                    const b = f(result.value, i++);\n                    if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(b)) {\n                        return {\n                            done: false,\n                            value: b.value\n                        };\n                    }\n                    return {\n                        done: true,\n                        value: undefined\n                    };\n                }\n            };\n        }\n    }));\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getSomes([Option.some(1), Option.none(), Option.some(2)])),\n *   [1, 2]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getSomes = /*#__PURE__*/ filterMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [\"err\"]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getLefts = (self)=>filterMap(self, _Either_js__WEBPACK_IMPORTED_MODULE_5__.getLeft);\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [1, 2]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getRights = (self)=>filterMap(self, _Either_js__WEBPACK_IMPORTED_MODULE_5__.getRight);\n/**\n * @category filtering\n * @since 2.0.0\n */ const filter = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let i = 0;\n            return {\n                next () {\n                    let result = iterator.next();\n                    while(!result.done){\n                        if (predicate(result.value, i++)) {\n                            return {\n                                done: false,\n                                value: result.value\n                            };\n                        }\n                        result = iterator.next();\n                    }\n                    return {\n                        done: true,\n                        value: undefined\n                    };\n                }\n            };\n        }\n    }));\n/**\n * @category sequencing\n * @since 2.0.0\n */ const flatMapNullable = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>filterMap(self, (a)=>{\n        const b = f(a);\n        return b == null ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.none() : _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(b);\n    }));\n/**\n * Check if a predicate holds true for some `Iterable` element.\n *\n * @category elements\n * @since 2.0.0\n */ const some = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    let i = 0;\n    for (const a of self){\n        if (predicate(a, i++)) {\n            return true;\n        }\n    }\n    return false;\n});\n/**\n * @category constructors\n * @since 2.0.0\n */ const unfold = (b, f)=>({\n        [Symbol.iterator] () {\n            let next = b;\n            return {\n                next () {\n                    const o = f(next);\n                    if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isNone(o)) {\n                        return {\n                            done: true,\n                            value: undefined\n                        };\n                    }\n                    const [a, b] = o.value;\n                    next = b;\n                    return {\n                        done: false,\n                        value: a\n                    };\n                }\n            };\n        }\n    });\n/**\n * Iterate over the `Iterable` applying `f`.\n *\n * @since 2.0.0\n */ const forEach = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    let i = 0;\n    for (const a of self){\n        f(a, i++);\n    }\n});\n/**\n * @category folding\n * @since 2.0.0\n */ const reduce = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f)=>{\n    if (Array.isArray(self)) {\n        return self.reduce(f, b);\n    }\n    let i = 0;\n    let result = b;\n    for (const n of self){\n        result = f(result, n, i++);\n    }\n    return result;\n});\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @since 2.0.0\n */ const dedupeAdjacentWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent)=>({\n        [Symbol.iterator] () {\n            const iterator = self[Symbol.iterator]();\n            let first = true;\n            let last;\n            function next() {\n                const result = iterator.next();\n                if (result.done) {\n                    return {\n                        done: true,\n                        value: undefined\n                    };\n                }\n                if (first) {\n                    first = false;\n                    last = result.value;\n                    return result;\n                }\n                const current = result.value;\n                if (isEquivalent(last, current)) {\n                    return next();\n                }\n                last = current;\n                return result;\n            }\n            return {\n                next\n            };\n        }\n    }));\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n */ const dedupeAdjacent = /*#__PURE__*/ dedupeAdjacentWith(/*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_4__.equivalence());\n/**\n * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n *\n * @since 2.0.0\n * @category elements\n */ const cartesianWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f)=>flatMap(self, (a)=>map(that, (b)=>f(a, b))));\n/**\n * Zips this Iterable crosswise with the specified Iterable.\n *\n * @since 2.0.0\n * @category elements\n */ const cartesian = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>cartesianWith(self, that, (a, b)=>[\n            a,\n            b\n        ]));\n/**\n * Counts all the element of the given iterable that pass the given predicate\n *\n * **Example**\n *\n * ```ts\n * import { Iterable } from \"effect\"\n *\n * const result = Iterable.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // 2\n * ```\n *\n * @category folding\n * @since 3.16.0\n */ const countBy = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    let count = 0;\n    let i = 0;\n    for (const a of self){\n        if (f(a, i)) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}); //# sourceMappingURL=Iterable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Iterable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Micro.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Micro.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CurrentConcurrency: () => (/* binding */ CurrentConcurrency),\n/* harmony export */   CurrentScheduler: () => (/* binding */ CurrentScheduler),\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   Error: () => (/* binding */ Error),\n/* harmony export */   MaxOpsBeforeYield: () => (/* binding */ MaxOpsBeforeYield),\n/* harmony export */   MicroCauseTypeId: () => (/* binding */ MicroCauseTypeId),\n/* harmony export */   MicroExitTypeId: () => (/* binding */ MicroExitTypeId),\n/* harmony export */   MicroFiberTypeId: () => (/* binding */ MicroFiberTypeId),\n/* harmony export */   MicroSchedulerDefault: () => (/* binding */ MicroSchedulerDefault),\n/* harmony export */   MicroScope: () => (/* binding */ MicroScope),\n/* harmony export */   MicroScopeTypeId: () => (/* binding */ MicroScopeTypeId),\n/* harmony export */   NoSuchElementException: () => (/* binding */ NoSuchElementException),\n/* harmony export */   TaggedError: () => (/* binding */ TaggedError),\n/* harmony export */   TimeoutException: () => (/* binding */ TimeoutException),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   acquireRelease: () => (/* binding */ acquireRelease),\n/* harmony export */   acquireUseRelease: () => (/* binding */ acquireUseRelease),\n/* harmony export */   addFinalizer: () => (/* binding */ addFinalizer),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   as: () => (/* binding */ as),\n/* harmony export */   asSome: () => (/* binding */ asSome),\n/* harmony export */   asVoid: () => (/* binding */ asVoid),\n/* harmony export */   async: () => (/* binding */ async),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   catchAll: () => (/* binding */ catchAll),\n/* harmony export */   catchAllCause: () => (/* binding */ catchAllCause),\n/* harmony export */   catchAllDefect: () => (/* binding */ catchAllDefect),\n/* harmony export */   catchCauseIf: () => (/* binding */ catchCauseIf),\n/* harmony export */   catchIf: () => (/* binding */ catchIf),\n/* harmony export */   catchTag: () => (/* binding */ catchTag),\n/* harmony export */   causeDie: () => (/* binding */ causeDie),\n/* harmony export */   causeFail: () => (/* binding */ causeFail),\n/* harmony export */   causeInterrupt: () => (/* binding */ causeInterrupt),\n/* harmony export */   causeIsDie: () => (/* binding */ causeIsDie),\n/* harmony export */   causeIsFail: () => (/* binding */ causeIsFail),\n/* harmony export */   causeIsInterrupt: () => (/* binding */ causeIsInterrupt),\n/* harmony export */   causeSquash: () => (/* binding */ causeSquash),\n/* harmony export */   causeWithTrace: () => (/* binding */ causeWithTrace),\n/* harmony export */   context: () => (/* binding */ context),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   die: () => (/* binding */ die),\n/* harmony export */   either: () => (/* binding */ either),\n/* harmony export */   ensuring: () => (/* binding */ ensuring),\n/* harmony export */   exit: () => (/* binding */ exit),\n/* harmony export */   exitDie: () => (/* binding */ exitDie),\n/* harmony export */   exitFail: () => (/* binding */ exitFail),\n/* harmony export */   exitFailCause: () => (/* binding */ exitFailCause),\n/* harmony export */   exitInterrupt: () => (/* binding */ exitInterrupt),\n/* harmony export */   exitIsDie: () => (/* binding */ exitIsDie),\n/* harmony export */   exitIsFail: () => (/* binding */ exitIsFail),\n/* harmony export */   exitIsFailure: () => (/* binding */ exitIsFailure),\n/* harmony export */   exitIsInterrupt: () => (/* binding */ exitIsInterrupt),\n/* harmony export */   exitIsSuccess: () => (/* binding */ exitIsSuccess),\n/* harmony export */   exitSucceed: () => (/* binding */ exitSucceed),\n/* harmony export */   exitVoid: () => (/* binding */ exitVoid),\n/* harmony export */   exitVoidAll: () => (/* binding */ exitVoidAll),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   failCause: () => (/* binding */ failCause),\n/* harmony export */   failCauseSync: () => (/* binding */ failCauseSync),\n/* harmony export */   failSync: () => (/* binding */ failSync),\n/* harmony export */   fiberAwait: () => (/* binding */ fiberAwait),\n/* harmony export */   fiberInterrupt: () => (/* binding */ fiberInterrupt),\n/* harmony export */   fiberInterruptAll: () => (/* binding */ fiberInterruptAll),\n/* harmony export */   fiberJoin: () => (/* binding */ fiberJoin),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   filterOrFail: () => (/* binding */ filterOrFail),\n/* harmony export */   filterOrFailCause: () => (/* binding */ filterOrFailCause),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   forever: () => (/* binding */ forever),\n/* harmony export */   fork: () => (/* binding */ fork),\n/* harmony export */   forkDaemon: () => (/* binding */ forkDaemon),\n/* harmony export */   forkIn: () => (/* binding */ forkIn),\n/* harmony export */   forkScoped: () => (/* binding */ forkScoped),\n/* harmony export */   fromEither: () => (/* binding */ fromEither),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   ignore: () => (/* binding */ ignore),\n/* harmony export */   ignoreLogged: () => (/* binding */ ignoreLogged),\n/* harmony export */   interrupt: () => (/* binding */ interrupt),\n/* harmony export */   interruptible: () => (/* binding */ interruptible),\n/* harmony export */   isMicro: () => (/* binding */ isMicro),\n/* harmony export */   isMicroCause: () => (/* binding */ isMicroCause),\n/* harmony export */   isMicroExit: () => (/* binding */ isMicroExit),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapError: () => (/* binding */ mapError),\n/* harmony export */   mapErrorCause: () => (/* binding */ mapErrorCause),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   matchCause: () => (/* binding */ matchCause),\n/* harmony export */   matchCauseEffect: () => (/* binding */ matchCauseEffect),\n/* harmony export */   matchEffect: () => (/* binding */ matchEffect),\n/* harmony export */   never: () => (/* binding */ never),\n/* harmony export */   onError: () => (/* binding */ onError),\n/* harmony export */   onExit: () => (/* binding */ onExit),\n/* harmony export */   onExitIf: () => (/* binding */ onExitIf),\n/* harmony export */   onInterrupt: () => (/* binding */ onInterrupt),\n/* harmony export */   option: () => (/* binding */ option),\n/* harmony export */   orDie: () => (/* binding */ orDie),\n/* harmony export */   orElseSucceed: () => (/* binding */ orElseSucceed),\n/* harmony export */   promise: () => (/* binding */ promise),\n/* harmony export */   provideContext: () => (/* binding */ provideContext),\n/* harmony export */   provideScope: () => (/* binding */ provideScope),\n/* harmony export */   provideService: () => (/* binding */ provideService),\n/* harmony export */   provideServiceEffect: () => (/* binding */ provideServiceEffect),\n/* harmony export */   race: () => (/* binding */ race),\n/* harmony export */   raceAll: () => (/* binding */ raceAll),\n/* harmony export */   raceAllFirst: () => (/* binding */ raceAllFirst),\n/* harmony export */   raceFirst: () => (/* binding */ raceFirst),\n/* harmony export */   repeat: () => (/* binding */ repeat),\n/* harmony export */   repeatExit: () => (/* binding */ repeatExit),\n/* harmony export */   replicate: () => (/* binding */ replicate),\n/* harmony export */   replicateEffect: () => (/* binding */ replicateEffect),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   runFork: () => (/* binding */ runFork),\n/* harmony export */   runPromise: () => (/* binding */ runPromise),\n/* harmony export */   runPromiseExit: () => (/* binding */ runPromiseExit),\n/* harmony export */   runSync: () => (/* binding */ runSync),\n/* harmony export */   runSyncExit: () => (/* binding */ runSyncExit),\n/* harmony export */   sandbox: () => (/* binding */ sandbox),\n/* harmony export */   scheduleAddDelay: () => (/* binding */ scheduleAddDelay),\n/* harmony export */   scheduleExponential: () => (/* binding */ scheduleExponential),\n/* harmony export */   scheduleIntersect: () => (/* binding */ scheduleIntersect),\n/* harmony export */   scheduleRecurs: () => (/* binding */ scheduleRecurs),\n/* harmony export */   scheduleSpaced: () => (/* binding */ scheduleSpaced),\n/* harmony export */   scheduleUnion: () => (/* binding */ scheduleUnion),\n/* harmony export */   scheduleWithMaxDelay: () => (/* binding */ scheduleWithMaxDelay),\n/* harmony export */   scheduleWithMaxElapsed: () => (/* binding */ scheduleWithMaxElapsed),\n/* harmony export */   scope: () => (/* binding */ scope),\n/* harmony export */   scopeMake: () => (/* binding */ scopeMake),\n/* harmony export */   scopeUnsafeMake: () => (/* binding */ scopeUnsafeMake),\n/* harmony export */   scoped: () => (/* binding */ scoped),\n/* harmony export */   service: () => (/* binding */ service),\n/* harmony export */   serviceOption: () => (/* binding */ serviceOption),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   succeed: () => (/* binding */ succeed),\n/* harmony export */   succeedNone: () => (/* binding */ succeedNone),\n/* harmony export */   succeedSome: () => (/* binding */ succeedSome),\n/* harmony export */   suspend: () => (/* binding */ suspend),\n/* harmony export */   sync: () => (/* binding */ sync),\n/* harmony export */   tap: () => (/* binding */ tap),\n/* harmony export */   tapDefect: () => (/* binding */ tapDefect),\n/* harmony export */   tapError: () => (/* binding */ tapError),\n/* harmony export */   tapErrorCause: () => (/* binding */ tapErrorCause),\n/* harmony export */   tapErrorCauseIf: () => (/* binding */ tapErrorCauseIf),\n/* harmony export */   timeout: () => (/* binding */ timeout),\n/* harmony export */   timeoutOption: () => (/* binding */ timeoutOption),\n/* harmony export */   timeoutOrElse: () => (/* binding */ timeoutOrElse),\n/* harmony export */   \"try\": () => (/* binding */ try_),\n/* harmony export */   tryPromise: () => (/* binding */ tryPromise),\n/* harmony export */   uninterruptible: () => (/* binding */ uninterruptible),\n/* harmony export */   uninterruptibleMask: () => (/* binding */ uninterruptibleMask),\n/* harmony export */   updateContext: () => (/* binding */ updateContext),\n/* harmony export */   updateService: () => (/* binding */ updateService),\n/* harmony export */   \"void\": () => (/* binding */ void_),\n/* harmony export */   when: () => (/* binding */ when),\n/* harmony export */   whileLoop: () => (/* binding */ whileLoop),\n/* harmony export */   withConcurrency: () => (/* binding */ withConcurrency),\n/* harmony export */   withMicroFiber: () => (/* binding */ withMicroFiber),\n/* harmony export */   withTrace: () => (/* binding */ withTrace),\n/* harmony export */   yieldFlush: () => (/* binding */ yieldFlush),\n/* harmony export */   yieldNow: () => (/* binding */ yieldNow),\n/* harmony export */   yieldNowWith: () => (/* binding */ yieldNowWith),\n/* harmony export */   zip: () => (/* binding */ zip),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Array_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Array.js */ \"(ssr)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var _Context_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Context.js */ \"(ssr)/./node_modules/effect/dist/esm/Context.js\");\n/* harmony import */ var _Effectable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Effectable.js\");\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _internal_context_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/context.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/context.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_effectable_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */ const TypeId = /*#__PURE__*/ Symbol.for(\"effect/Micro\");\n/**\n * @since 3.4.0\n * @experimental\n * @category MicroExit\n */ const MicroExitTypeId = /*#__PURE__*/ Symbol.for(\"effect/Micro/MicroExit\");\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */ const isMicro = (u)=>typeof u === \"object\" && u !== null && TypeId in u;\n// ----------------------------------------------------------------------------\n// MicroCause\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const MicroCauseTypeId = /*#__PURE__*/ Symbol.for(\"effect/Micro/MicroCause\");\n/**\n * @since 3.6.6\n * @experimental\n * @category guards\n */ const isMicroCause = (self)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(self, MicroCauseTypeId);\nconst microCauseVariance = {\n    _E: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n};\nclass MicroCauseImpl extends globalThis.Error {\n    constructor(_tag, originalError, traces){\n        const causeName = `MicroCause.${_tag}`;\n        let name;\n        let message;\n        let stack;\n        if (originalError instanceof globalThis.Error) {\n            name = `(${causeName}) ${originalError.name}`;\n            message = originalError.message;\n            const messageLines = message.split(\"\\n\").length;\n            stack = originalError.stack ? `(${causeName}) ${originalError.stack.split(\"\\n\").slice(0, messageLines + 3).join(\"\\n\")}` : `${name}: ${message}`;\n        } else {\n            name = causeName;\n            message = (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.toStringUnknown)(originalError, 0);\n            stack = `${name}: ${message}`;\n        }\n        if (traces.length > 0) {\n            stack += `\\n    ${traces.join(\"\\n    \")}`;\n        }\n        super(message);\n        this._tag = _tag;\n        this.traces = traces;\n        this[MicroCauseTypeId] = microCauseVariance;\n        this.name = name;\n        this.stack = stack;\n    }\n    pipe() {\n        return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_3__.pipeArguments)(this, arguments);\n    }\n    toString() {\n        return this.stack;\n    }\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.NodeInspectSymbol]() {\n        return this.stack;\n    }\n}\nclass Fail extends MicroCauseImpl {\n    constructor(error, traces = []){\n        super(\"Fail\", error, traces);\n        this.error = error;\n    }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeFail = (error, traces = [])=>new Fail(error, traces);\nclass Die extends MicroCauseImpl {\n    constructor(defect, traces = []){\n        super(\"Die\", defect, traces);\n        this.defect = defect;\n    }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeDie = (defect, traces = [])=>new Die(defect, traces);\nclass Interrupt extends MicroCauseImpl {\n    constructor(traces = []){\n        super(\"Interrupt\", \"interrupted\", traces);\n    }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeInterrupt = (traces = [])=>new Interrupt(traces);\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeIsFail = (self)=>self._tag === \"Fail\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeIsDie = (self)=>self._tag === \"Die\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeIsInterrupt = (self)=>self._tag === \"Interrupt\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeSquash = (self)=>self._tag === \"Fail\" ? self.error : self._tag === \"Die\" ? self.defect : self;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */ const causeWithTrace = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, trace)=>{\n    const traces = [\n        ...self.traces,\n        trace\n    ];\n    switch(self._tag){\n        case \"Die\":\n            return causeDie(self.defect, traces);\n        case \"Interrupt\":\n            return causeInterrupt(traces);\n        case \"Fail\":\n            return causeFail(self.error, traces);\n    }\n});\n// ----------------------------------------------------------------------------\n// MicroFiber\n// ----------------------------------------------------------------------------\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */ const MicroFiberTypeId = /*#__PURE__*/ Symbol.for(\"effect/Micro/MicroFiber\");\nconst fiberVariance = {\n    _A: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n    _E: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n};\nclass MicroFiberImpl {\n    constructor(context, interruptible = true){\n        this._stack = [];\n        this._observers = [];\n        this.currentOpCount = 0;\n        this._interrupted = false;\n        // cancel the yielded operation, or for the yielded exit value\n        this._yielded = undefined;\n        this.context = context;\n        this.interruptible = interruptible;\n        this[MicroFiberTypeId] = fiberVariance;\n    }\n    getRef(ref) {\n        return _internal_context_js__WEBPACK_IMPORTED_MODULE_4__.unsafeGetReference(this.context, ref);\n    }\n    addObserver(cb) {\n        if (this._exit) {\n            cb(this._exit);\n            return _Function_js__WEBPACK_IMPORTED_MODULE_1__.constVoid;\n        }\n        this._observers.push(cb);\n        return ()=>{\n            const index = this._observers.indexOf(cb);\n            if (index >= 0) {\n                this._observers.splice(index, 1);\n            }\n        };\n    }\n    unsafeInterrupt() {\n        if (this._exit) {\n            return;\n        }\n        this._interrupted = true;\n        if (this.interruptible) {\n            this.evaluate(exitInterrupt);\n        }\n    }\n    unsafePoll() {\n        return this._exit;\n    }\n    evaluate(effect) {\n        if (this._exit) {\n            return;\n        } else if (this._yielded !== undefined) {\n            const yielded = this._yielded;\n            this._yielded = undefined;\n            yielded();\n        }\n        const exit = this.runLoop(effect);\n        if (exit === Yield) {\n            return;\n        }\n        // the interruptChildren middlware is added in Micro.fork, so it can be\n        // tree-shaken if not used\n        const interruptChildren = fiberMiddleware.interruptChildren && fiberMiddleware.interruptChildren(this);\n        if (interruptChildren !== undefined) {\n            return this.evaluate(flatMap(interruptChildren, ()=>exit));\n        }\n        this._exit = exit;\n        for(let i = 0; i < this._observers.length; i++){\n            this._observers[i](exit);\n        }\n        this._observers.length = 0;\n    }\n    runLoop(effect) {\n        let yielding = false;\n        let current = effect;\n        this.currentOpCount = 0;\n        try {\n            while(true){\n                this.currentOpCount++;\n                if (!yielding && this.getRef(CurrentScheduler).shouldYield(this)) {\n                    yielding = true;\n                    const prev = current;\n                    current = flatMap(yieldNow, ()=>prev);\n                }\n                current = current[evaluate](this);\n                if (current === Yield) {\n                    const yielded = this._yielded;\n                    if (MicroExitTypeId in yielded) {\n                        this._yielded = undefined;\n                        return yielded;\n                    }\n                    return Yield;\n                }\n            }\n        } catch (error) {\n            if (!(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(current, evaluate)) {\n                return exitDie(`MicroFiber.runLoop: Not a valid effect: ${String(current)}`);\n            }\n            return exitDie(error);\n        }\n    }\n    getCont(symbol) {\n        while(true){\n            const op = this._stack.pop();\n            if (!op) return undefined;\n            const cont = op[ensureCont] && op[ensureCont](this);\n            if (cont) return {\n                [symbol]: cont\n            };\n            if (op[symbol]) return op;\n        }\n    }\n    yieldWith(value) {\n        this._yielded = value;\n        return Yield;\n    }\n    children() {\n        return this._children ??= new Set();\n    }\n}\nconst fiberMiddleware = /*#__PURE__*/ (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_5__.globalValue)(\"effect/Micro/fiberMiddleware\", ()=>({\n        interruptChildren: undefined\n    }));\nconst fiberInterruptChildren = (fiber)=>{\n    if (fiber._children === undefined || fiber._children.size === 0) {\n        return undefined;\n    }\n    return fiberInterruptAll(fiber._children);\n};\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */ const fiberAwait = (self)=>async((resume)=>sync(self.addObserver((exit)=>resume(succeed(exit)))));\n/**\n * @since 3.11.2\n * @experimental\n * @category MicroFiber\n */ const fiberJoin = (self)=>flatten(fiberAwait(self));\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */ const fiberInterrupt = (self)=>suspend(()=>{\n        self.unsafeInterrupt();\n        return asVoid(fiberAwait(self));\n    });\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */ const fiberInterruptAll = (fibers)=>suspend(()=>{\n        for (const fiber of fibers)fiber.unsafeInterrupt();\n        const iter = fibers[Symbol.iterator]();\n        const wait = suspend(()=>{\n            let result = iter.next();\n            while(!result.done){\n                if (result.value.unsafePoll()) {\n                    result = iter.next();\n                    continue;\n                }\n                const fiber = result.value;\n                return async((resume)=>{\n                    fiber.addObserver((_)=>{\n                        resume(wait);\n                    });\n                });\n            }\n            return exitVoid;\n        });\n        return wait;\n    });\nconst identifier = /*#__PURE__*/ Symbol.for(\"effect/Micro/identifier\");\nconst args = /*#__PURE__*/ Symbol.for(\"effect/Micro/args\");\nconst evaluate = /*#__PURE__*/ Symbol.for(\"effect/Micro/evaluate\");\nconst successCont = /*#__PURE__*/ Symbol.for(\"effect/Micro/successCont\");\nconst failureCont = /*#__PURE__*/ Symbol.for(\"effect/Micro/failureCont\");\nconst ensureCont = /*#__PURE__*/ Symbol.for(\"effect/Micro/ensureCont\");\nconst Yield = /*#__PURE__*/ Symbol.for(\"effect/Micro/Yield\");\nconst microVariance = {\n    _A: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n    _E: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n    _R: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n};\nconst MicroProto = {\n    ..._Effectable_js__WEBPACK_IMPORTED_MODULE_6__.EffectPrototype,\n    _op: \"Micro\",\n    [TypeId]: microVariance,\n    pipe () {\n        return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_3__.pipeArguments)(this, arguments);\n    },\n    [Symbol.iterator] () {\n        return new _Utils_js__WEBPACK_IMPORTED_MODULE_7__.SingleShotGen(new _Utils_js__WEBPACK_IMPORTED_MODULE_7__.YieldWrap(this));\n    },\n    toJSON () {\n        return {\n            _id: \"Micro\",\n            op: this[identifier],\n            ...args in this ? {\n                args: this[args]\n            } : undefined\n        };\n    },\n    toString () {\n        return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.format)(this);\n    },\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.NodeInspectSymbol] () {\n        return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.format)(this);\n    }\n};\nfunction defaultEvaluate(_fiber) {\n    return exitDie(`Micro.evaluate: Not implemented`);\n}\nconst makePrimitiveProto = (options)=>({\n        ...MicroProto,\n        [identifier]: options.op,\n        [evaluate]: options.eval ?? defaultEvaluate,\n        [successCont]: options.contA,\n        [failureCont]: options.contE,\n        [ensureCont]: options.ensure\n    });\nconst makePrimitive = (options)=>{\n    const Proto = makePrimitiveProto(options);\n    return function() {\n        const self = Object.create(Proto);\n        self[args] = options.single === false ? arguments : arguments[0];\n        return self;\n    };\n};\nconst makeExit = (options)=>{\n    const Proto = {\n        ...makePrimitiveProto(options),\n        [MicroExitTypeId]: MicroExitTypeId,\n        _tag: options.op,\n        get [options.prop] () {\n            return this[args];\n        },\n        toJSON () {\n            return {\n                _id: \"MicroExit\",\n                _tag: options.op,\n                [options.prop]: this[args]\n            };\n        },\n        [_Equal_js__WEBPACK_IMPORTED_MODULE_8__.symbol] (that) {\n            return isMicroExit(that) && that._tag === options.op && _Equal_js__WEBPACK_IMPORTED_MODULE_8__.equals(this[args], that[args]);\n        },\n        [_Hash_js__WEBPACK_IMPORTED_MODULE_9__.symbol] () {\n            return _Hash_js__WEBPACK_IMPORTED_MODULE_9__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_9__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_9__.string(options.op))(_Hash_js__WEBPACK_IMPORTED_MODULE_9__.hash(this[args])));\n        }\n    };\n    return function(value) {\n        const self = Object.create(Proto);\n        self[args] = value;\n        self[successCont] = undefined;\n        self[failureCont] = undefined;\n        self[ensureCont] = undefined;\n        return self;\n    };\n};\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const succeed = /*#__PURE__*/ makeExit({\n    op: \"Success\",\n    prop: \"value\",\n    eval (fiber) {\n        const cont = fiber.getCont(successCont);\n        return cont ? cont[successCont](this[args], fiber) : fiber.yieldWith(this);\n    }\n});\n/**\n * Creates a `Micro` effect that will fail with the specified `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */ const failCause = /*#__PURE__*/ makeExit({\n    op: \"Failure\",\n    prop: \"cause\",\n    eval (fiber) {\n        let cont = fiber.getCont(failureCont);\n        while(causeIsInterrupt(this[args]) && cont && fiber.interruptible){\n            cont = fiber.getCont(failureCont);\n        }\n        return cont ? cont[failureCont](this[args], fiber) : fiber.yieldWith(this);\n    }\n});\n/**\n * Creates a `Micro` effect that fails with the given error.\n *\n * This results in a `Fail` variant of the `MicroCause` type, where the error is\n * tracked at the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const fail = (error)=>failCause(causeFail(error));\n/**\n * Creates a `Micro` effect that succeeds with a lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with a\n * `Die` variant of the `MicroCause` type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const sync = /*#__PURE__*/ makePrimitive({\n    op: \"Sync\",\n    eval (fiber) {\n        const value = this[args]();\n        const cont = fiber.getCont(successCont);\n        return cont ? cont[successCont](value, fiber) : fiber.yieldWith(exitSucceed(value));\n    }\n});\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const suspend = /*#__PURE__*/ makePrimitive({\n    op: \"Suspend\",\n    eval (_fiber) {\n        return this[args]();\n    }\n});\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * scheduler tick.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const yieldNowWith = /*#__PURE__*/ makePrimitive({\n    op: \"Yield\",\n    eval (fiber) {\n        let resumed = false;\n        fiber.getRef(CurrentScheduler).scheduleTask(()=>{\n            if (resumed) return;\n            fiber.evaluate(exitVoid);\n        }, this[args] ?? 0);\n        return fiber.yieldWith(()=>{\n            resumed = true;\n        });\n    }\n});\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * scheduler tick.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const yieldNow = /*#__PURE__*/ yieldNowWith(0);\n/**\n * Creates a `Micro` effect that will succeed with the value wrapped in `Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const succeedSome = (a)=>succeed(_Option_js__WEBPACK_IMPORTED_MODULE_10__.some(a));\n/**\n * Creates a `Micro` effect that succeeds with `None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const succeedNone = /*#__PURE__*/ succeed(/*#__PURE__*/ _Option_js__WEBPACK_IMPORTED_MODULE_10__.none());\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `MicroCause`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const failCauseSync = (evaluate)=>suspend(()=>failCause(evaluate()));\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This results in a `Die` variant of the `MicroCause` type, where the error is\n * not tracked at the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const die = (defect)=>exitDie(defect);\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This results in a `Fail` variant of the `MicroCause` type, where the error is\n * tracked at the type level.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */ const failSync = (error)=>suspend(()=>fail(error()));\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const fromOption = (option)=>option._tag === \"Some\" ? succeed(option.value) : fail(new NoSuchElementException({}));\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const fromEither = (either)=>either._tag === \"Right\" ? succeed(either.right) : fail(either.left);\nconst void_ = /*#__PURE__*/ succeed(void 0);\n\nconst try_ = (options)=>suspend(()=>{\n        try {\n            return succeed(options.try());\n        } catch (err) {\n            return fail(options.catch(err));\n        }\n    });\n\n/**\n * Wrap a `Promise` into a `Micro` effect.\n *\n * Any errors will result in a `Die` variant of the `MicroCause` type, where the\n * error is not tracked at the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const promise = (evaluate)=>asyncOptions(function(resume, signal) {\n        evaluate(signal).then((a)=>resume(succeed(a)), (e)=>resume(die(e)));\n    }, evaluate.length !== 0);\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @example\n * ```ts\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const tryPromise = (options)=>asyncOptions(function(resume, signal) {\n        try {\n            options.try(signal).then((a)=>resume(succeed(a)), (e)=>resume(fail(options.catch(e))));\n        } catch (err) {\n            resume(fail(options.catch(err)));\n        }\n    }, options.try.length !== 0);\n/**\n * Create a `Micro` effect using the current `MicroFiber`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const withMicroFiber = /*#__PURE__*/ makePrimitive({\n    op: \"WithMicroFiber\",\n    eval (fiber) {\n        return this[args](fiber);\n    }\n});\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const yieldFlush = /*#__PURE__*/ withMicroFiber((fiber)=>{\n    fiber.getRef(CurrentScheduler).flush();\n    return exitVoid;\n});\nconst asyncOptions = /*#__PURE__*/ makePrimitive({\n    op: \"Async\",\n    single: false,\n    eval (fiber) {\n        const register = this[args][0];\n        let resumed = false;\n        let yielded = false;\n        const controller = this[args][1] ? new AbortController() : undefined;\n        const onCancel = register((effect)=>{\n            if (resumed) return;\n            resumed = true;\n            if (yielded) {\n                fiber.evaluate(effect);\n            } else {\n                yielded = effect;\n            }\n        }, controller?.signal);\n        if (yielded !== false) return yielded;\n        yielded = true;\n        fiber._yielded = ()=>{\n            resumed = true;\n        };\n        if (controller === undefined && onCancel === undefined) {\n            return Yield;\n        }\n        fiber._stack.push(asyncFinalizer(()=>{\n            resumed = true;\n            controller?.abort();\n            return onCancel ?? exitVoid;\n        }));\n        return Yield;\n    }\n});\nconst asyncFinalizer = /*#__PURE__*/ makePrimitive({\n    op: \"AsyncFinalizer\",\n    ensure (fiber) {\n        if (fiber.interruptible) {\n            fiber.interruptible = false;\n            fiber._stack.push(setInterruptible(true));\n        }\n    },\n    contE (cause, _fiber) {\n        return causeIsInterrupt(cause) ? flatMap(this[args](), ()=>failCause(cause)) : failCause(cause);\n    }\n});\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const async = (register)=>asyncOptions(register, register.length >= 2);\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const never = /*#__PURE__*/ async(function() {\n    const interval = setInterval(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constVoid, 2147483646);\n    return sync(()=>clearInterval(interval));\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */ const gen = (...args)=>suspend(()=>fromIterator(args.length === 1 ? args[0]() : args[1].call(args[0])));\nconst fromIterator = /*#__PURE__*/ makePrimitive({\n    op: \"Iterator\",\n    contA (value, fiber) {\n        const state = this[args].next(value);\n        if (state.done) return succeed(state.value);\n        fiber._stack.push(this);\n        return (0,_Utils_js__WEBPACK_IMPORTED_MODULE_7__.yieldWrapGet)(state.value);\n    },\n    eval (fiber) {\n        return this[successCont](undefined, fiber);\n    }\n});\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const as = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, value)=>map(self, (_)=>value));\n/**\n * Wrap the success value of this `Micro` effect in a `Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const asSome = (self)=>map(self, _Option_js__WEBPACK_IMPORTED_MODULE_10__.some);\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const flip = (self)=>matchEffect(self, {\n        onFailure: succeed,\n        onSuccess: fail\n    });\n/**\n * A more flexible version of `flatMap` that combines `map` and `flatMap` into a\n * single API.\n *\n * It also lets you directly pass a `Micro` effect, which will be executed after\n * the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const andThen = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>flatMap(self, (a)=>{\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(a) : f;\n        return isMicro(value) ? value : succeed(value);\n    }));\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const tap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>flatMap(self, (a)=>{\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(a) : f;\n        return isMicro(value) ? as(value, a) : succeed(a);\n    }));\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const asVoid = (self)=>flatMap(self, (_)=>exitVoid);\n/**\n * Access the `MicroExit` of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category mapping & sequencing\n */ const exit = (self)=>matchCause(self, {\n        onFailure: exitFailCause,\n        onSuccess: exitSucceed\n    });\n/**\n * Replace the error type of the given `Micro` with the full `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const sandbox = (self)=>catchAllCause(self, fail);\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */ const raceAll = (all)=>withMicroFiber((parent)=>async((resume)=>{\n            const effects = _Array_js__WEBPACK_IMPORTED_MODULE_11__.fromIterable(all);\n            const len = effects.length;\n            let doneCount = 0;\n            let done = false;\n            const fibers = new Set();\n            const causes = [];\n            const onExit = (exit)=>{\n                doneCount++;\n                if (exit._tag === \"Failure\") {\n                    causes.push(exit.cause);\n                    if (doneCount >= len) {\n                        resume(failCause(causes[0]));\n                    }\n                    return;\n                }\n                done = true;\n                resume(fibers.size === 0 ? exit : flatMap(uninterruptible(fiberInterruptAll(fibers)), ()=>exit));\n            };\n            for(let i = 0; i < len; i++){\n                if (done) break;\n                const fiber = unsafeFork(parent, interruptible(effects[i]), true, true);\n                fibers.add(fiber);\n                fiber.addObserver((exit)=>{\n                    fibers.delete(fiber);\n                    onExit(exit);\n                });\n            }\n            return fiberInterruptAll(fibers);\n        }));\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */ const raceAllFirst = (all)=>withMicroFiber((parent)=>async((resume)=>{\n            let done = false;\n            const fibers = new Set();\n            const onExit = (exit)=>{\n                done = true;\n                resume(fibers.size === 0 ? exit : flatMap(fiberInterruptAll(fibers), ()=>exit));\n            };\n            for (const effect of all){\n                if (done) break;\n                const fiber = unsafeFork(parent, interruptible(effect), true, true);\n                fibers.add(fiber);\n                fiber.addObserver((exit)=>{\n                    fibers.delete(fiber);\n                    onExit(exit);\n                });\n            }\n            return fiberInterruptAll(fibers);\n        }));\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */ const race = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>raceAll([\n        self,\n        that\n    ]));\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */ const raceFirst = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>raceAllFirst([\n        self,\n        that\n    ]));\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const flatMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>{\n    const onSuccess = Object.create(OnSuccessProto);\n    onSuccess[args] = self;\n    onSuccess[successCont] = f;\n    return onSuccess;\n});\nconst OnSuccessProto = /*#__PURE__*/ makePrimitiveProto({\n    op: \"OnSuccess\",\n    eval (fiber) {\n        fiber._stack.push(this);\n        return this[args];\n    }\n});\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const flatten = (self)=>flatMap(self, _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity);\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */ const map = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>flatMap(self, (a)=>succeed(f(a))));\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const isMicroExit = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(u, MicroExitTypeId);\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitSucceed = succeed;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitFailCause = failCause;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitInterrupt = /*#__PURE__*/ exitFailCause(/*#__PURE__*/ causeInterrupt());\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitFail = (e)=>exitFailCause(causeFail(e));\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitDie = (defect)=>exitFailCause(causeDie(defect));\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitIsSuccess = (self)=>self._tag === \"Success\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitIsFailure = (self)=>self._tag === \"Failure\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitIsInterrupt = (self)=>exitIsFailure(self) && self.cause._tag === \"Interrupt\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitIsFail = (self)=>exitIsFailure(self) && self.cause._tag === \"Fail\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitIsDie = (self)=>exitIsFailure(self) && self.cause._tag === \"Die\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */ const exitVoid = /*#__PURE__*/ exitSucceed(void 0);\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroExit\n */ const exitVoidAll = (exits)=>{\n    for (const exit of exits){\n        if (exit._tag === \"Failure\") {\n            return exit;\n        }\n    }\n    return exitVoid;\n};\nconst setImmediate = \"setImmediate\" in globalThis ? globalThis.setImmediate : (f)=>setTimeout(f, 0);\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */ class MicroSchedulerDefault {\n    /**\n   * @since 3.5.9\n   */ scheduleTask(task, _priority) {\n        this.tasks.push(task);\n        if (!this.running) {\n            this.running = true;\n            setImmediate(this.afterScheduled);\n        }\n    }\n    /**\n   * @since 3.5.9\n   */ runTasks() {\n        const tasks = this.tasks;\n        this.tasks = [];\n        for(let i = 0, len = tasks.length; i < len; i++){\n            tasks[i]();\n        }\n    }\n    /**\n   * @since 3.5.9\n   */ shouldYield(fiber) {\n        return fiber.currentOpCount >= fiber.getRef(MaxOpsBeforeYield);\n    }\n    /**\n   * @since 3.5.9\n   */ flush() {\n        while(this.tasks.length > 0){\n            this.runTasks();\n        }\n    }\n    constructor(){\n        this.tasks = [];\n        this.running = false;\n        /**\n   * @since 3.5.9\n   */ this.afterScheduled = ()=>{\n            this.running = false;\n            this.runTasks();\n        };\n    }\n}\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */ const service = (tag)=>withMicroFiber((fiber)=>succeed(_Context_js__WEBPACK_IMPORTED_MODULE_12__.unsafeGet(fiber.context, tag)));\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */ const serviceOption = (tag)=>withMicroFiber((fiber)=>succeed(_Context_js__WEBPACK_IMPORTED_MODULE_12__.getOption(fiber.context, tag)));\n/**\n * Update the Context with the given mapping function.\n *\n * @since 3.11.0\n * @experimental\n * @category environment\n */ const updateContext = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>withMicroFiber((fiber)=>{\n        const prev = fiber.context;\n        fiber.context = f(prev);\n        return onExit(self, ()=>{\n            fiber.context = prev;\n            return void_;\n        });\n    }));\n/**\n * Update the service for the given `Context.Tag` in the environment.\n *\n * @since 3.11.0\n * @experimental\n * @category environment\n */ const updateService = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, tag, f)=>withMicroFiber((fiber)=>{\n        const prev = _Context_js__WEBPACK_IMPORTED_MODULE_12__.unsafeGet(fiber.context, tag);\n        fiber.context = _Context_js__WEBPACK_IMPORTED_MODULE_12__.add(fiber.context, tag, f(prev));\n        return onExit(self, ()=>{\n            fiber.context = _Context_js__WEBPACK_IMPORTED_MODULE_12__.add(fiber.context, tag, prev);\n            return void_;\n        });\n    }));\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */ const context = ()=>getContext;\nconst getContext = /*#__PURE__*/ withMicroFiber((fiber)=>succeed(fiber.context));\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */ const provideContext = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, provided)=>updateContext(self, _Context_js__WEBPACK_IMPORTED_MODULE_12__.merge(provided)));\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */ const provideService = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, tag, service)=>updateContext(self, _Context_js__WEBPACK_IMPORTED_MODULE_12__.add(tag, service)));\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.6\n * @experimental\n * @category environment\n */ const provideServiceEffect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, tag, acquire)=>flatMap(acquire, (service)=>provideService(self, tag, service)));\n// ========================================================================\n// References\n// ========================================================================\n/**\n * @since 3.11.0\n * @experimental\n * @category references\n */ class MaxOpsBeforeYield extends /*#__PURE__*/ _Context_js__WEBPACK_IMPORTED_MODULE_12__.Reference()(\"effect/Micro/currentMaxOpsBeforeYield\", {\n    defaultValue: ()=>2048\n}) {\n}\n/**\n * @since 3.11.0\n * @experimental\n * @category environment refs\n */ class CurrentConcurrency extends /*#__PURE__*/ _Context_js__WEBPACK_IMPORTED_MODULE_12__.Reference()(\"effect/Micro/currentConcurrency\", {\n    defaultValue: ()=>\"unbounded\"\n}) {\n}\n/**\n * @since 3.11.0\n * @experimental\n * @category environment refs\n */ class CurrentScheduler extends /*#__PURE__*/ _Context_js__WEBPACK_IMPORTED_MODULE_12__.Reference()(\"effect/Micro/currentScheduler\", {\n    defaultValue: ()=>new MicroSchedulerDefault()\n}) {\n}\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @example\n * ```ts\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */ const withConcurrency = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, concurrency)=>provideService(self, CurrentConcurrency, concurrency));\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */ const zip = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)((args)=>isMicro(args[1]), (self, that, options)=>zipWith(self, that, (a, a2)=>[\n            a,\n            a2\n        ], options));\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */ const zipWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)((args)=>isMicro(args[1]), (self, that, f, options)=>options?.concurrent ? map(all([\n        self,\n        that\n    ], {\n        concurrency: 2\n    }), ([a, a2])=>f(a, a2)) : flatMap(self, (a)=>map(that, (a2)=>f(a, a2))));\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `MicroCause` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */ const filterOrFailCause = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)((args)=>isMicro(args[0]), (self, refinement, orFailWith)=>flatMap(self, (a)=>refinement(a) ? succeed(a) : failCause(orFailWith(a))));\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */ const filterOrFail = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)((args)=>isMicro(args[0]), (self, refinement, orFailWith)=>flatMap(self, (a)=>refinement(a) ? succeed(a) : fail(orFailWith(a))));\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */ const when = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, condition)=>flatMap(isMicro(condition) ? condition : sync(condition), (pass)=>pass ? asSome(self) : succeedNone));\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `MicroExit` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.6\n * @experimental\n * @category repetition\n */ const repeatExit = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options)=>suspend(()=>{\n        const startedAt = options.schedule ? Date.now() : 0;\n        let attempt = 0;\n        const loop = flatMap(exit(self), (exit)=>{\n            if (options.while !== undefined && !options.while(exit)) {\n                return exit;\n            } else if (options.times !== undefined && attempt >= options.times) {\n                return exit;\n            }\n            attempt++;\n            let delayEffect = yieldNow;\n            if (options.schedule !== undefined) {\n                const elapsed = Date.now() - startedAt;\n                const duration = options.schedule(attempt, elapsed);\n                if (_Option_js__WEBPACK_IMPORTED_MODULE_10__.isNone(duration)) {\n                    return exit;\n                }\n                delayEffect = sleep(duration.value);\n            }\n            return flatMap(delayEffect, ()=>loop);\n        });\n        return loop;\n    }));\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */ const repeat = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)((args)=>isMicro(args[0]), (self, options)=>repeatExit(self, {\n        ...options,\n        while: (exit)=>exit._tag === \"Success\" && (options?.while === undefined || options.while(exit.value))\n    }));\n/**\n * Replicates the given effect `n` times.\n *\n * @since 3.11.0\n * @experimental\n * @category repetition\n */ const replicate = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, n)=>Array.from({\n        length: n\n    }, ()=>self));\n/**\n * Performs this effect the specified number of times and collects the\n * results.\n *\n * @since 3.11.0\n * @category repetition\n */ const replicateEffect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)((args)=>isMicro(args[0]), (self, n, options)=>all(replicate(self, n), options));\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */ const forever = (self)=>repeat(self);\n/**\n * Create a `MicroSchedule` that will stop repeating after the specified number\n * of attempts.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleRecurs = (n)=>(attempt)=>attempt <= n ? _Option_js__WEBPACK_IMPORTED_MODULE_10__.some(0) : _Option_js__WEBPACK_IMPORTED_MODULE_10__.none();\n/**\n * Create a `MicroSchedule` that will generate a constant delay.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleSpaced = (millis)=>()=>_Option_js__WEBPACK_IMPORTED_MODULE_10__.some(millis);\n/**\n * Create a `MicroSchedule` that will generate a delay with an exponential backoff.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleExponential = (baseMillis, factor = 2)=>(attempt)=>_Option_js__WEBPACK_IMPORTED_MODULE_10__.some(Math.pow(factor, attempt) * baseMillis);\n/**\n * Returns a new `MicroSchedule` with an added calculated delay to each delay\n * returned by this schedule.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleAddDelay = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>(attempt, elapsed)=>_Option_js__WEBPACK_IMPORTED_MODULE_10__.map(self(attempt, elapsed), (duration)=>duration + f()));\n/**\n * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n * the specified maximum.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleWithMaxDelay = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, max)=>(attempt, elapsed)=>_Option_js__WEBPACK_IMPORTED_MODULE_10__.map(self(attempt, elapsed), (duration)=>Math.min(duration, max)));\n/**\n * Transform a `MicroSchedule` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleWithMaxElapsed = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, max)=>(attempt, elapsed)=>elapsed < max ? self(attempt, elapsed) : _Option_js__WEBPACK_IMPORTED_MODULE_10__.none());\n/**\n * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n * recur, using the minimum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleUnion = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>(attempt, elapsed)=>_Option_js__WEBPACK_IMPORTED_MODULE_10__.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2)=>Math.min(d1, d2)));\n/**\n * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n * recur, using the maximum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */ const scheduleIntersect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>(attempt, elapsed)=>_Option_js__WEBPACK_IMPORTED_MODULE_10__.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2)=>Math.max(d1, d2)));\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n/**\n * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n * recover from any kind of cause.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const catchAllCause = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>{\n    const onFailure = Object.create(OnFailureProto);\n    onFailure[args] = self;\n    onFailure[failureCont] = f;\n    return onFailure;\n});\nconst OnFailureProto = /*#__PURE__*/ makePrimitiveProto({\n    op: \"OnFailure\",\n    eval (fiber) {\n        fiber._stack.push(this);\n        return this[args];\n    }\n});\n/**\n * Selectively catch a `MicroCause` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const catchCauseIf = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, predicate, f)=>catchAllCause(self, (cause)=>predicate(cause) ? f(cause) : failCause(cause)));\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected errors.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const catchAll = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>catchCauseIf(self, causeIsFail, (cause)=>f(cause.error)));\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const catchAllDefect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>catchCauseIf(self, causeIsDie, (die)=>f(die.defect)));\n/**\n * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const tapErrorCause = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>tapErrorCauseIf(self, _Function_js__WEBPACK_IMPORTED_MODULE_1__.constTrue, f));\n/**\n * Perform a side effect using if a `MicroCause` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const tapErrorCauseIf = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, refinement, f)=>catchCauseIf(self, refinement, (cause)=>andThen(f(cause), failCause(cause))));\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const tapError = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>tapErrorCauseIf(self, causeIsFail, (fail)=>f(fail.error)));\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const tapDefect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>tapErrorCauseIf(self, causeIsDie, (die)=>f(die.defect)));\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const catchIf = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, predicate, f)=>catchCauseIf(self, (f)=>causeIsFail(f) && predicate(f.error), (fail)=>f(fail.error)));\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const catchTag = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, k, f)=>catchIf(self, (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isTagged)(k), f));\n/**\n * Transform the full `MicroCause` object of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */ const mapErrorCause = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>catchAllCause(self, (cause)=>failCause(f(cause))));\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const mapError = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>catchAll(self, (error)=>fail(f(error))));\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const orDie = (self)=>catchAll(self, die);\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const orElseSucceed = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>catchAll(self, (_)=>sync(f)));\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const ignore = (self)=>matchEffect(self, {\n        onFailure: (_)=>void_,\n        onSuccess: (_)=>void_\n    });\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const ignoreLogged = (self)=>matchEffect(self, {\n        // eslint-disable-next-line no-console\n        onFailure: (error)=>sync(()=>console.error(error)),\n        onSuccess: (_)=>void_\n    });\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const option = (self)=>match(self, {\n        onFailure: _Option_js__WEBPACK_IMPORTED_MODULE_10__.none,\n        onSuccess: _Option_js__WEBPACK_IMPORTED_MODULE_10__.some\n    });\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const either = (self)=>match(self, {\n        onFailure: _Either_js__WEBPACK_IMPORTED_MODULE_13__.left,\n        onSuccess: _Either_js__WEBPACK_IMPORTED_MODULE_13__.right\n    });\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const retry = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)((args)=>isMicro(args[0]), (self, options)=>repeatExit(self, {\n        ...options,\n        while: (exit)=>exit._tag === \"Failure\" && exit.cause._tag === \"Fail\" && (options?.while === undefined || options.while(exit.cause.error))\n    }));\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */ const withTrace = function() {\n    const prevLimit = globalThis.Error.stackTraceLimit;\n    globalThis.Error.stackTraceLimit = 2;\n    const error = new globalThis.Error();\n    globalThis.Error.stackTraceLimit = prevLimit;\n    function generate(name, cause) {\n        const stack = error.stack;\n        if (!stack) {\n            return cause;\n        }\n        const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\");\n        if (!line) {\n            return cause;\n        }\n        const lineMatch = line.match(/\\((.*)\\)$/);\n        return causeWithTrace(cause, `at ${name} (${lineMatch ? lineMatch[1] : line})`);\n    }\n    const f = (name)=>(self)=>onError(self, (cause)=>failCause(generate(name, cause)));\n    if (arguments.length === 2) {\n        return f(arguments[1])(arguments[0]);\n    }\n    return f(arguments[0]);\n};\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */ const matchCauseEffect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options)=>{\n    const primitive = Object.create(OnSuccessAndFailureProto);\n    primitive[args] = self;\n    primitive[successCont] = options.onSuccess;\n    primitive[failureCont] = options.onFailure;\n    return primitive;\n});\nconst OnSuccessAndFailureProto = /*#__PURE__*/ makePrimitiveProto({\n    op: \"OnSuccessAndFailure\",\n    eval (fiber) {\n        fiber._stack.push(this);\n        return this[args];\n    }\n});\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */ const matchCause = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options)=>matchCauseEffect(self, {\n        onFailure: (cause)=>sync(()=>options.onFailure(cause)),\n        onSuccess: (value)=>sync(()=>options.onSuccess(value))\n    }));\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */ const matchEffect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options)=>matchCauseEffect(self, {\n        onFailure: (cause)=>cause._tag === \"Fail\" ? options.onFailure(cause.error) : failCause(cause),\n        onSuccess: options.onSuccess\n    }));\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */ const match = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options)=>matchEffect(self, {\n        onFailure: (error)=>sync(()=>options.onFailure(error)),\n        onSuccess: (value)=>sync(()=>options.onSuccess(value))\n    }));\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */ const sleep = (millis)=>async((resume)=>{\n        const timeout = setTimeout(()=>{\n            resume(void_);\n        }, millis);\n        return sync(()=>{\n            clearTimeout(timeout);\n        });\n    });\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */ const delay = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, millis)=>andThen(sleep(millis), self));\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */ const timeoutOrElse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options)=>raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout)));\n/**\n * Returns an effect that will timeout this effect, that will fail with a\n * `TimeoutException` if the timeout elapses before the effect has produced a\n * value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */ const timeout = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, millis)=>timeoutOrElse(self, {\n        duration: millis,\n        onTimeout: ()=>fail(new TimeoutException())\n    }));\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */ const timeoutOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, millis)=>raceFirst(asSome(self), as(interruptible(sleep(millis)), _Option_js__WEBPACK_IMPORTED_MODULE_10__.none())));\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const MicroScopeTypeId = /*#__PURE__*/ Symbol.for(\"effect/Micro/MicroScope\");\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const MicroScope = /*#__PURE__*/ _Context_js__WEBPACK_IMPORTED_MODULE_12__.GenericTag(\"effect/Micro/MicroScope\");\nclass MicroScopeImpl {\n    constructor(){\n        this.state = {\n            _tag: \"Open\",\n            finalizers: /*#__PURE__*/ new Set()\n        };\n        this[MicroScopeTypeId] = MicroScopeTypeId;\n    }\n    unsafeAddFinalizer(finalizer) {\n        if (this.state._tag === \"Open\") {\n            this.state.finalizers.add(finalizer);\n        }\n    }\n    addFinalizer(finalizer) {\n        return suspend(()=>{\n            if (this.state._tag === \"Open\") {\n                this.state.finalizers.add(finalizer);\n                return void_;\n            }\n            return finalizer(this.state.exit);\n        });\n    }\n    unsafeRemoveFinalizer(finalizer) {\n        if (this.state._tag === \"Open\") {\n            this.state.finalizers.delete(finalizer);\n        }\n    }\n    close(microExit) {\n        return suspend(()=>{\n            if (this.state._tag === \"Open\") {\n                const finalizers = Array.from(this.state.finalizers).reverse();\n                this.state = {\n                    _tag: \"Closed\",\n                    exit: microExit\n                };\n                return flatMap(forEach(finalizers, (finalizer)=>exit(finalizer(microExit))), exitVoidAll);\n            }\n            return void_;\n        });\n    }\n    get fork() {\n        return sync(()=>{\n            const newScope = new MicroScopeImpl();\n            if (this.state._tag === \"Closed\") {\n                newScope.state = this.state;\n                return newScope;\n            }\n            function fin(exit) {\n                return newScope.close(exit);\n            }\n            this.state.finalizers.add(fin);\n            newScope.unsafeAddFinalizer((_)=>sync(()=>this.unsafeRemoveFinalizer(fin)));\n            return newScope;\n        });\n    }\n}\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const scopeMake = /*#__PURE__*/ sync(()=>new MicroScopeImpl());\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const scopeUnsafeMake = ()=>new MicroScopeImpl();\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const scope = /*#__PURE__*/ service(MicroScope);\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const provideScope = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, scope)=>provideService(self, MicroScope, scope));\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const scoped = (self)=>suspend(()=>{\n        const scope = new MicroScopeImpl();\n        return onExit(provideService(self, MicroScope, scope), (exit)=>scope.close(exit));\n    });\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const acquireRelease = (acquire, release)=>uninterruptible(flatMap(scope, (scope)=>tap(acquire, (a)=>scope.addFinalizer((exit)=>release(a, exit)))));\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const addFinalizer = (finalizer)=>flatMap(scope, (scope)=>scope.addFinalizer(finalizer));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `MicroExit` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */ const onExit = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>uninterruptibleMask((restore)=>matchCauseEffect(restore(self), {\n            onFailure: (cause)=>flatMap(f(exitFailCause(cause)), ()=>failCause(cause)),\n            onSuccess: (a)=>flatMap(f(exitSucceed(a)), ()=>succeed(a))\n        })));\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const ensuring = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, finalizer)=>onExit(self, (_)=>finalizer));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */ const onExitIf = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, refinement, f)=>onExit(self, (exit)=>refinement(exit) ? f(exit) : exitVoid));\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `MicroCause` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */ const onError = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>onExitIf(self, exitIsFailure, (exit)=>f(exit.cause)));\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */ const onInterrupt = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, finalizer)=>onExitIf(self, exitIsInterrupt, (_)=>finalizer));\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */ const acquireUseRelease = (acquire, use, release)=>uninterruptibleMask((restore)=>flatMap(acquire, (a)=>flatMap(exit(restore(use(a))), (exit)=>andThen(release(a, exit), exit))));\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category interruption\n */ const interrupt = /*#__PURE__*/ failCause(/*#__PURE__*/ causeInterrupt());\n/**\n * Flag the effect as uninterruptible, which means that when the effect is\n * interrupted, it will be allowed to continue running until completion.\n *\n * @since 3.4.0\n * @experimental\n * @category flags\n */ const uninterruptible = (self)=>withMicroFiber((fiber)=>{\n        if (!fiber.interruptible) return self;\n        fiber.interruptible = false;\n        fiber._stack.push(setInterruptible(true));\n        return self;\n    });\nconst setInterruptible = /*#__PURE__*/ makePrimitive({\n    op: \"SetInterruptible\",\n    ensure (fiber) {\n        fiber.interruptible = this[args];\n        if (fiber._interrupted && fiber.interruptible) {\n            return ()=>exitInterrupt;\n        }\n    }\n});\n/**\n * Flag the effect as interruptible, which means that when the effect is\n * interrupted, it will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category flags\n */ const interruptible = (self)=>withMicroFiber((fiber)=>{\n        if (fiber.interruptible) return self;\n        fiber.interruptible = true;\n        fiber._stack.push(setInterruptible(false));\n        if (fiber._interrupted) return exitInterrupt;\n        return self;\n    });\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @example\n * ```ts\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */ const uninterruptibleMask = (f)=>withMicroFiber((fiber)=>{\n        if (!fiber.interruptible) return f(_Function_js__WEBPACK_IMPORTED_MODULE_1__.identity);\n        fiber.interruptible = false;\n        fiber._stack.push(setInterruptible(true));\n        return f(interruptible);\n    });\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */ const all = (arg, options)=>{\n    if (Array.isArray(arg) || (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isIterable)(arg)) {\n        return forEach(arg, _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity, options);\n    } else if (options?.discard) {\n        return forEach(Object.values(arg), _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity, options);\n    }\n    return suspend(()=>{\n        const out = {};\n        return as(forEach(Object.entries(arg), ([key, effect])=>map(effect, (value)=>{\n                out[key] = value;\n            }), {\n            discard: true,\n            concurrency: options?.concurrency\n        }), out);\n    });\n};\n/**\n * @since 3.11.0\n * @experimental\n * @category collecting & elements\n */ const whileLoop = /*#__PURE__*/ makePrimitive({\n    op: \"While\",\n    contA (value, fiber) {\n        this[args].step(value);\n        if (this[args].while()) {\n            fiber._stack.push(this);\n            return this[args].body();\n        }\n        return exitVoid;\n    },\n    eval (fiber) {\n        if (this[args].while()) {\n            fiber._stack.push(this);\n            return this[args].body();\n        }\n        return exitVoid;\n    }\n});\n/**\n * For each element of the provided iterable, run the effect and collect the\n * results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run\n * concurrently. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */ const forEach = (iterable, f, options)=>withMicroFiber((parent)=>{\n        const concurrencyOption = options?.concurrency === \"inherit\" ? parent.getRef(CurrentConcurrency) : options?.concurrency ?? 1;\n        const concurrency = concurrencyOption === \"unbounded\" ? Number.POSITIVE_INFINITY : Math.max(1, concurrencyOption);\n        const items = _Array_js__WEBPACK_IMPORTED_MODULE_11__.fromIterable(iterable);\n        let length = items.length;\n        if (length === 0) {\n            return options?.discard ? void_ : succeed([]);\n        }\n        const out = options?.discard ? undefined : new Array(length);\n        let index = 0;\n        if (concurrency === 1) {\n            return as(whileLoop({\n                while: ()=>index < items.length,\n                body: ()=>f(items[index], index),\n                step: out ? (b)=>out[index++] = b : (_)=>index++\n            }), out);\n        }\n        return async((resume)=>{\n            const fibers = new Set();\n            let result = undefined;\n            let inProgress = 0;\n            let doneCount = 0;\n            let pumping = false;\n            let interrupted = false;\n            function pump() {\n                pumping = true;\n                while(inProgress < concurrency && index < length){\n                    const currentIndex = index;\n                    const item = items[currentIndex];\n                    index++;\n                    inProgress++;\n                    try {\n                        const child = unsafeFork(parent, f(item, currentIndex), true, true);\n                        fibers.add(child);\n                        child.addObserver((exit)=>{\n                            fibers.delete(child);\n                            if (interrupted) {\n                                return;\n                            } else if (exit._tag === \"Failure\") {\n                                if (result === undefined) {\n                                    result = exit;\n                                    length = index;\n                                    fibers.forEach((fiber)=>fiber.unsafeInterrupt());\n                                }\n                            } else if (out !== undefined) {\n                                out[currentIndex] = exit.value;\n                            }\n                            doneCount++;\n                            inProgress--;\n                            if (doneCount === length) {\n                                resume(result ?? succeed(out));\n                            } else if (!pumping && inProgress < concurrency) {\n                                pump();\n                            }\n                        });\n                    } catch (err) {\n                        result = exitDie(err);\n                        length = index;\n                        fibers.forEach((fiber)=>fiber.unsafeInterrupt());\n                    }\n                }\n                pumping = false;\n            }\n            pump();\n            return suspend(()=>{\n                interrupted = true;\n                index = length;\n                return fiberInterruptAll(fibers);\n            });\n        });\n    });\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed\n * concurrently.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */ const filter = (iterable, f, options)=>filterMap(iterable, (a)=>map(f(a), (pass)=>{\n            pass = options?.negate ? !pass : pass;\n            return pass ? _Option_js__WEBPACK_IMPORTED_MODULE_10__.some(a) : _Option_js__WEBPACK_IMPORTED_MODULE_10__.none();\n        }), options);\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed\n * concurrently.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */ const filterMap = (iterable, f, options)=>suspend(()=>{\n        const out = [];\n        return as(forEach(iterable, (a)=>map(f(a), (o)=>{\n                if (o._tag === \"Some\") {\n                    out.push(o.value);\n                }\n            }), {\n            discard: true,\n            concurrency: options?.concurrency\n        }), out);\n    });\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */ const Do = /*#__PURE__*/ succeed({});\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */ const bindTo = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_14__.bindTo(map);\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */ const bind = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_14__.bind(map, flatMap);\nconst let_ = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_14__.let_(map);\n\n// ----------------------------------------------------------------------------\n// fibers & forking\n// ----------------------------------------------------------------------------\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */ const fork = (self)=>withMicroFiber((fiber)=>{\n        fiberMiddleware.interruptChildren ??= fiberInterruptChildren;\n        return succeed(unsafeFork(fiber, self));\n    });\nconst unsafeFork = (parent, effect, immediate = false, daemon = false)=>{\n    const child = new MicroFiberImpl(parent.context, parent.interruptible);\n    if (!daemon) {\n        parent.children().add(child);\n        child.addObserver(()=>parent.children().delete(child));\n    }\n    if (immediate) {\n        child.evaluate(effect);\n    } else {\n        parent.getRef(CurrentScheduler).scheduleTask(()=>child.evaluate(effect), 0);\n    }\n    return child;\n};\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */ const forkDaemon = (self)=>withMicroFiber((fiber)=>succeed(unsafeFork(fiber, self, false, true)));\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */ const forkIn = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, scope)=>uninterruptibleMask((restore)=>flatMap(scope.fork, (scope)=>tap(restore(forkDaemon(onExit(self, (exit)=>scope.close(exit)))), (fiber)=>scope.addFinalizer((_)=>fiberInterrupt(fiber))))));\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */ const forkScoped = (self)=>flatMap(scope, (scope)=>forkIn(self, scope));\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n/**\n * Execute the `Micro` effect and return a `MicroFiber` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @example\n * ```ts\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((exit) => {\n *   console.log(exit)\n * })\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */ const runFork = (effect, options)=>{\n    const fiber = new MicroFiberImpl(CurrentScheduler.context(options?.scheduler ?? new MicroSchedulerDefault()));\n    fiber.evaluate(effect);\n    if (options?.signal) {\n        if (options.signal.aborted) {\n            fiber.unsafeInterrupt();\n        } else {\n            const abort = ()=>fiber.unsafeInterrupt();\n            options.signal.addEventListener(\"abort\", abort, {\n                once: true\n            });\n            fiber.addObserver(()=>options.signal.removeEventListener(\"abort\", abort));\n        }\n    }\n    return fiber;\n};\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `MicroExit` of the computation.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */ const runPromiseExit = (effect, options)=>new Promise((resolve, _reject)=>{\n        const handle = runFork(effect, options);\n        handle.addObserver(resolve);\n    });\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */ const runPromise = (effect, options)=>runPromiseExit(effect, options).then((exit)=>{\n        if (exit._tag === \"Failure\") {\n            throw exit.cause;\n        }\n        return exit.value;\n    });\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `MicroExit`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * `CauseDie` containing the `MicroFiber`.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */ const runSyncExit = (effect)=>{\n    const scheduler = new MicroSchedulerDefault();\n    const fiber = runFork(effect, {\n        scheduler\n    });\n    scheduler.flush();\n    return fiber._exit ?? exitDie(fiber);\n};\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */ const runSync = (effect)=>{\n    const exit = runSyncExit(effect);\n    if (exit._tag === \"Failure\") throw exit.cause;\n    return exit.value;\n};\nconst YieldableError = /*#__PURE__*/ function() {\n    class YieldableError extends globalThis.Error {\n    }\n    // @effect-diagnostics-next-line floatingEffect:off\n    Object.assign(YieldableError.prototype, MicroProto, _internal_effectable_js__WEBPACK_IMPORTED_MODULE_15__.StructuralPrototype, {\n        [identifier]: \"Failure\",\n        [evaluate] () {\n            return fail(this);\n        },\n        toString () {\n            return this.message ? `${this.name}: ${this.message}` : this.name;\n        },\n        toJSON () {\n            return {\n                ...this\n            };\n        },\n        [_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.NodeInspectSymbol] () {\n            const stack = this.stack;\n            if (stack) {\n                return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`;\n            }\n            return this.toString();\n        }\n    });\n    return YieldableError;\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */ const Error = /*#__PURE__*/ function() {\n    return class extends YieldableError {\n        constructor(args){\n            super();\n            if (args) {\n                Object.assign(this, args);\n            }\n        }\n    };\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */ const TaggedError = (tag)=>{\n    class Base extends Error {\n        constructor(...args){\n            super(...args), this._tag = tag;\n        }\n    }\n    ;\n    Base.prototype.name = tag;\n    return Base;\n};\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */ class NoSuchElementException extends /*#__PURE__*/ TaggedError(\"NoSuchElementException\") {\n}\n/**\n * Represents a checked exception which occurs when a timeout occurs.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */ class TimeoutException extends /*#__PURE__*/ TaggedError(\"TimeoutException\") {\n} //# sourceMappingURL=Micro.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Micro.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Option.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Option.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   ap: () => (/* binding */ ap),\n/* harmony export */   as: () => (/* binding */ as),\n/* harmony export */   asVoid: () => (/* binding */ asVoid),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   composeK: () => (/* binding */ composeK),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   containsWith: () => (/* binding */ containsWith),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   firstSomeOf: () => (/* binding */ firstSomeOf),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatMapNullable: () => (/* binding */ flatMapNullable),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   fromIterable: () => (/* binding */ fromIterable),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   getOrNull: () => (/* binding */ getOrNull),\n/* harmony export */   getOrThrow: () => (/* binding */ getOrThrow),\n/* harmony export */   getOrThrowWith: () => (/* binding */ getOrThrowWith),\n/* harmony export */   getOrUndefined: () => (/* binding */ getOrUndefined),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isNone: () => (/* binding */ isNone),\n/* harmony export */   isOption: () => (/* binding */ isOption),\n/* harmony export */   isSome: () => (/* binding */ isSome),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   lift2: () => (/* binding */ lift2),\n/* harmony export */   liftNullable: () => (/* binding */ liftNullable),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   liftThrowable: () => (/* binding */ liftThrowable),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   mergeWith: () => (/* binding */ mergeWith),\n/* harmony export */   none: () => (/* binding */ none),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   orElseEither: () => (/* binding */ orElseEither),\n/* harmony export */   orElseSome: () => (/* binding */ orElseSome),\n/* harmony export */   partitionMap: () => (/* binding */ partitionMap),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   reduceCompact: () => (/* binding */ reduceCompact),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   tap: () => (/* binding */ tap),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toRefinement: () => (/* binding */ toRefinement),\n/* harmony export */   \"void\": () => (/* binding */ void_),\n/* harmony export */   zipLeft: () => (/* binding */ zipLeft),\n/* harmony export */   zipRight: () => (/* binding */ zipRight),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_either_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/either.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/either.js\");\n/* harmony import */ var _internal_option_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n/* harmony import */ var _Order_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Order.js */ \"(ssr)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n\n\n\n\n\n/**\n * @category Symbols\n * @since 2.0.0\n */ const TypeId = /*#__PURE__*/ Symbol.for(\"effect/Option\");\n/**\n * Represents the absence of a value by creating an empty `Option`.\n *\n * `Option.none` returns an `Option<never>`, which is a subtype of `Option<A>`.\n * This means you can use it in place of any `Option<A>` regardless of the type\n * `A`.\n *\n * **Example** (Creating an Option with No Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * // An Option holding no value\n * //\n * //      ┌─── Option<never>\n * //      ▼\n * const noValue = Option.none()\n *\n * console.log(noValue)\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @see {@link some} for the opposite operation.\n *\n * @category Constructors\n * @since 2.0.0\n */ const none = ()=>_internal_option_js__WEBPACK_IMPORTED_MODULE_0__.none;\n/**\n * Wraps the given value into an `Option` to represent its presence.\n *\n * **Example** (Creating an Option with a Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * // An Option holding the number 1\n * //\n * //      ┌─── Option<number>\n * //      ▼\n * const value = Option.some(1)\n *\n * console.log(value)\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @see {@link none} for the opposite operation.\n *\n * @category Constructors\n * @since 2.0.0\n */ const some = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.some;\n/**\n * Determines whether the given value is an `Option`.\n *\n * **Details**\n *\n * This function checks if a value is an instance of `Option`. It returns `true`\n * if the value is either `Option.some` or `Option.none`, and `false` otherwise.\n * This is particularly useful when working with unknown values or when you need\n * to ensure type safety in your code.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isOption(Option.some(1)))\n * // Output: true\n *\n * console.log(Option.isOption(Option.none()))\n * // Output: true\n *\n * console.log(Option.isOption({}))\n * // Output: false\n * ```\n *\n * @category Guards\n * @since 2.0.0\n */ const isOption = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isOption;\n/**\n * Checks whether an `Option` represents the absence of a value (`None`).\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isNone(Option.some(1)))\n * // Output: false\n *\n * console.log(Option.isNone(Option.none()))\n * // Output: true\n * ```\n *\n * @see {@link isSome} for the opposite check.\n *\n * @category Guards\n * @since 2.0.0\n */ const isNone = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isNone;\n/**\n * Checks whether an `Option` contains a value (`Some`).\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isSome(Option.some(1)))\n * // Output: true\n *\n * console.log(Option.isSome(Option.none()))\n * // Output: false\n * ```\n *\n * @see {@link isNone} for the opposite check.\n *\n * @category Guards\n * @since 2.0.0\n */ const isSome = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isSome;\n/**\n * Performs pattern matching on an `Option` to handle both `Some` and `None`\n * cases.\n *\n * **Details**\n *\n * This function allows you to match against an `Option` and handle both\n * scenarios: when the `Option` is `None` (i.e., contains no value), and when\n * the `Option` is `Some` (i.e., contains a value). It executes one of the\n * provided functions based on the case:\n *\n * - If the `Option` is `None`, the `onNone` function is executed and its result\n *   is returned.\n * - If the `Option` is `Some`, the `onSome` function is executed with the\n *   contained value, and its result is returned.\n *\n * This function provides a concise and functional way to handle optional values\n * without resorting to `if` or manual checks, making your code more declarative\n * and readable.\n *\n * **Example** (Pattern Matching with Option)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * const foo = Option.some(1)\n *\n * const message = Option.match(foo, {\n *   onNone: () => \"Option is empty\",\n *   onSome: (value) => `Option has a value: ${value}`\n * })\n *\n * console.log(message)\n * // Output: \"Option has a value: 1\"\n * ```\n *\n * @category Pattern matching\n * @since 2.0.0\n */ const match = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, { onNone, onSome })=>isNone(self) ? onNone() : onSome(self.value));\n/**\n * Converts an `Option`-returning function into a type guard.\n *\n * **Details**\n *\n * This function transforms a function that returns an `Option` into a type\n * guard, ensuring type safety when validating or narrowing types. The returned\n * type guard function checks whether the input satisfies the condition defined\n * in the original `Option`-returning function.\n *\n * If the original function returns `Option.some`, the type guard evaluates to\n * `true`, confirming the input is of the desired type. If the function returns\n * `Option.none`, the type guard evaluates to `false`.\n *\n * This utility is especially useful for validating types in union types,\n * filtering arrays, or ensuring safe handling of specific subtypes.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * type MyData = string | number\n *\n * const parseString = (data: MyData): Option.Option<string> =>\n *   typeof data === \"string\" ? Option.some(data) : Option.none()\n *\n * //      ┌─── (a: MyData) => a is string\n * //      ▼\n * const isString = Option.toRefinement(parseString)\n *\n * console.log(isString(\"a\"))\n * // Output: true\n *\n * console.log(isString(1))\n * // Output: false\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */ const toRefinement = (f)=>(a)=>isSome(f(a));\n/**\n * Converts an `Iterable` into an `Option`, wrapping the first element if it\n * exists.\n *\n * **Details**\n *\n * This function takes an `Iterable` (e.g., an array, a generator, or any object\n * implementing the `Iterable` interface) and returns an `Option` based on its\n * content:\n *\n * - If the `Iterable` contains at least one element, the first element is\n *   wrapped in a `Some` and returned.\n * - If the `Iterable` is empty, `None` is returned, representing the absence of\n *   a value.\n *\n * This utility is useful for safely handling collections that might be empty,\n * ensuring you explicitly handle both cases where a value exists or doesn't.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.fromIterable([1, 2, 3]))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(Option.fromIterable([]))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Constructors\n * @since 2.0.0\n */ const fromIterable = (collection)=>{\n    for (const a of collection){\n        return some(a);\n    }\n    return none();\n};\n/**\n * Converts an `Either` into an `Option` by discarding the error and extracting\n * the right value.\n *\n * **Details**\n *\n * This function takes an `Either` and returns an `Option` based on its value:\n *\n * - If the `Either` is a `Right`, its value is wrapped in a `Some` and\n *   returned.\n * - If the `Either` is a `Left`, the error is discarded, and `None` is\n *   returned.\n *\n * This is particularly useful when you only care about the success case\n * (`Right`) of an `Either` and want to handle the result using `Option`. By\n * using this function, you can convert `Either` into a simpler structure for\n * cases where error handling is not required.\n *\n * @example\n * ```ts\n * import { Either, Option } from \"effect\"\n *\n * console.log(Option.getRight(Either.right(\"ok\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'ok' }\n *\n * console.log(Option.getRight(Either.left(\"err\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @see {@link getLeft} for the opposite operation.\n *\n * @category Conversions\n * @since 2.0.0\n */ const getRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.getRight;\n/**\n * Converts an `Either` into an `Option` by discarding the right value and\n * extracting the left value.\n *\n * **Details**\n *\n * This function transforms an `Either` into an `Option` as follows:\n *\n * - If the `Either` is a `Left`, its value is wrapped in a `Some` and returned.\n * - If the `Either` is a `Right`, the value is discarded, and `None` is\n *   returned.\n *\n * This utility is useful when you only care about the error case (`Left`) of an\n * `Either` and want to handle it as an `Option`. By discarding the right value,\n * it simplifies error-focused workflows.\n *\n * @example\n * ```ts\n * import { Either, Option } from \"effect\"\n *\n * console.log(Option.getLeft(Either.right(\"ok\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.getLeft(Either.left(\"err\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'err' }\n * ```\n *\n * @see {@link getRight} for the opposite operation.\n *\n * @category Conversions\n * @since 2.0.0\n */ const getLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.getLeft;\n/**\n * Returns the value contained in the `Option` if it is `Some`, otherwise\n * evaluates and returns the result of `onNone`.\n *\n * **Details**\n *\n * This function allows you to provide a fallback value or computation for when\n * an `Option` is `None`. If the `Option` contains a value (`Some`), that value\n * is returned. If it is empty (`None`), the `onNone` function is executed, and\n * its result is returned instead.\n *\n * This utility is helpful for safely handling `Option` values by ensuring you\n * always receive a meaningful result, whether or not the `Option` contains a\n * value. It is particularly useful for providing default values or alternative\n * logic when working with optional values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.some(1).pipe(Option.getOrElse(() => 0)))\n * // Output: 1\n *\n * console.log(Option.none().pipe(Option.getOrElse(() => 0)))\n * // Output: 0\n * ```\n *\n * @see {@link getOrNull} for a version that returns `null` instead of executing a function.\n * @see {@link getOrUndefined} for a version that returns `undefined` instead of executing a function.\n *\n * @category Getters\n * @since 2.0.0\n */ const getOrElse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone)=>isNone(self) ? onNone() : self.value);\n/**\n * Returns the provided `Option` `that` if the current `Option` (`self`) is\n * `None`; otherwise, it returns `self`.\n *\n * **Details**\n *\n * This function provides a fallback mechanism for `Option` values. If the\n * current `Option` is `None` (i.e., it contains no value), the `that` function\n * is evaluated, and its resulting `Option` is returned. If the current `Option`\n * is `Some` (i.e., it contains a value), the original `Option` is returned\n * unchanged.\n *\n * This is particularly useful for chaining fallback values or computations,\n * allowing you to provide alternative `Option` values when the first one is\n * empty.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.none().pipe(Option.orElse(() => Option.none())))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.none())))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n *\n * console.log(Option.none().pipe(Option.orElse(() => Option.some(\"b\"))))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.some(\"b\"))))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */ const orElse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>isNone(self) ? that() : self);\n/**\n * Returns the provided default value wrapped in `Some` if the current `Option`\n * (`self`) is `None`; otherwise, returns `self`.\n *\n * **Details**\n *\n * This function provides a way to supply a default value for cases where an\n * `Option` is `None`. If the current `Option` is empty (`None`), the `onNone`\n * function is executed to compute the default value, which is then wrapped in a\n * `Some`. If the current `Option` contains a value (`Some`), it is returned as\n * is.\n *\n * This is particularly useful for handling optional values where a fallback\n * default needs to be provided explicitly in case of absence.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.none().pipe(Option.orElseSome(() => \"b\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElseSome(() => \"b\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */ const orElseSome = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone)=>isNone(self) ? some(onNone()) : self);\n/**\n * Similar to {@link orElse}, but returns an `Either` wrapped in an `Option` to\n * indicate the source of the value.\n *\n * **Details**\n *\n * This function allows you to provide a fallback `Option` in case the current\n * `Option` (`self`) is `None`. However, unlike `orElse`, it returns the value\n * wrapped in an `Either` object, providing additional information about where\n * the value came from:\n *\n * - If the value is from the fallback `Option` (`that`), it is wrapped in an\n *   `Either.right`.\n * - If the value is from the original `Option` (`self`), it is wrapped in an\n *   `Either.left`.\n *\n * This is especially useful when you need to differentiate between values\n * originating from the primary `Option` and those coming from the fallback,\n * while still maintaining the `Option`-style handling.\n *\n * @category Error handling\n * @since 2.0.0\n */ const orElseEither = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>isNone(self) ? map(that(), _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.right) : map(self, _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.left));\n/**\n * Returns the first `Some` value found in an `Iterable` collection of\n * `Option`s, or `None` if no `Some` is found.\n *\n * **Details**\n *\n * This function iterates over a collection of `Option` values and returns the\n * first `Some` it encounters. If the collection contains only `None` values,\n * the result will also be `None`. This utility is useful for efficiently\n * finding the first valid value in a sequence of potentially empty or invalid\n * options.\n *\n * The iteration stops as soon as a `Some` is found, making this function\n * efficient for large collections.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.firstSomeOf([\n *   Option.none(),\n *   Option.some(1),\n *   Option.some(2)\n * ]))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */ const firstSomeOf = (collection)=>{\n    let out = none();\n    for (out of collection){\n        if (isSome(out)) {\n            return out;\n        }\n    }\n    return out;\n};\n/**\n * Converts a nullable value into an `Option`. Returns `None` if the value is\n * `null` or `undefined`, otherwise wraps the value in a `Some`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.fromNullable(undefined))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.fromNullable(null))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.fromNullable(1))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */ const fromNullable = (nullableValue)=>nullableValue == null ? none() : some(nullableValue);\n/**\n * Lifts a function that returns `null` or `undefined` into the `Option`\n * context.\n *\n * **Details**\n *\n * This function takes a function `f` that might return `null` or `undefined`\n * and transforms it into a function that returns an `Option`. The resulting\n * function will return:\n * - `Some` if the original function produces a non-null, non-undefined value.\n * - `None` if the original function produces `null` or `undefined`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * console.log(parseOption(\"1\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parseOption(\"not a number\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */ const liftNullable = (f)=>(...a)=>fromNullable(f(...a));\n/**\n * Returns the value contained in the `Option` if it is `Some`; otherwise,\n * returns `null`.\n *\n * **Details**\n *\n * This function provides a way to extract the value of an `Option` while\n * falling back to `null` if the `Option` is `None`.\n *\n * It is particularly useful in scenarios where `null` is an acceptable\n * placeholder for the absence of a value, such as when interacting with APIs or\n * systems that use `null` as a default for missing values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.getOrNull(Option.some(1)))\n * // Output: 1\n *\n * console.log(Option.getOrNull(Option.none()))\n * // Output: null\n * ```\n *\n * @category Getters\n * @since 2.0.0\n */ const getOrNull = /*#__PURE__*/ getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constNull);\n/**\n * Returns the value contained in the `Option` if it is `Some`; otherwise,\n * returns `undefined`.\n *\n * **Details**\n *\n * This function provides a way to extract the value of an `Option` while\n * falling back to `undefined` if the `Option` is `None`.\n *\n * It is particularly useful in scenarios where `undefined` is an acceptable\n * placeholder for the absence of a value, such as when interacting with APIs or\n * systems that use `undefined` as a default for missing values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.getOrUndefined(Option.some(1)))\n * // Output: 1\n *\n * console.log(Option.getOrUndefined(Option.none()))\n * // Output: undefined\n * ```\n *\n * @category Getters\n * @since 2.0.0\n */ const getOrUndefined = /*#__PURE__*/ getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constUndefined);\n/**\n * Lifts a function that throws exceptions into a function that returns an\n * `Option`.\n *\n * **Details**\n *\n * This utility function takes a function `f` that might throw an exception and\n * transforms it into a safer function that returns an `Option`. If the original\n * function executes successfully, the result is wrapped in a `Some`. If an\n * exception is thrown, the result is `None`, allowing the developer to handle\n * errors in a functional, type-safe way.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * console.log(parse(\"1\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parse(\"\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */ const liftThrowable = (f)=>(...a)=>{\n        try {\n            return some(f(...a));\n        } catch  {\n            return none();\n        }\n    };\n/**\n * Extracts the value of an `Option` or throws an error if the `Option` is\n * `None`, using a custom error factory.\n *\n * **Details**\n *\n * This function allows you to extract the value of an `Option` when it is\n * `Some`. If the `Option` is `None`, it throws an error generated by the\n * provided `onNone` function. This utility is particularly useful when you need\n * a fail-fast behavior for empty `Option` values and want to provide a custom\n * error message or object.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n * ```\n *\n * @see {@link getOrThrow} for a version that throws a default error.\n *\n * @category Conversions\n * @since 2.0.0\n */ const getOrThrowWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone)=>{\n    if (isSome(self)) {\n        return self.value;\n    }\n    throw onNone();\n});\n/**\n * Extracts the value of an `Option` or throws a default error if the `Option`\n * is `None`.\n *\n * **Details**\n *\n * This function extracts the value from an `Option` if it is `Some`. If the\n * `Option` is `None`, it throws a default error. It is useful for fail-fast\n * scenarios where the absence of a value is treated as an exceptional case and\n * a default error is sufficient.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n * ```\n *\n * @see {@link getOrThrowWith} for a version that allows you to provide a custom error.\n *\n * @category Conversions\n * @since 2.0.0\n */ const getOrThrow = /*#__PURE__*/ getOrThrowWith(()=>new Error(\"getOrThrow called on a None\"));\n/**\n * Transforms the value inside a `Some` to a new value using the provided\n * function, while leaving `None` unchanged.\n *\n * **Details**\n *\n * This function applies a mapping function `f` to the value inside an `Option`\n * if it is a `Some`. If the `Option` is `None`, it remains unchanged. The\n * result is a new `Option` with the transformed value (if it was a `Some`) or\n * still `None`.\n *\n * This utility is particularly useful for chaining transformations in a\n * functional way without needing to manually handle `None` cases.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Mapping over a `Some`\n * const someValue = Option.some(2)\n *\n * console.log(Option.map(someValue, (n) => n * 2))\n * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n *\n * // Mapping over a `None`\n * const noneValue = Option.none<number>()\n *\n * console.log(Option.map(noneValue, (n) => n * 2))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Mapping\n * @since 2.0.0\n */ const map = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>isNone(self) ? none() : some(f(self.value)));\n/**\n * Replaces the value inside a `Some` with the specified constant value, leaving\n * `None` unchanged.\n *\n * **Details**\n *\n * This function transforms an `Option` by replacing the value inside a `Some`\n * with the given constant value `b`. If the `Option` is `None`, it remains\n * unchanged.\n *\n * This is useful when you want to preserve the presence of a value (`Some`) but\n * replace its content with a fixed value.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Replacing the value of a `Some`\n * const someValue = Option.some(42)\n *\n * console.log(Option.as(someValue, \"new value\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'new value' }\n *\n * // Replacing a `None` (no effect)\n * const noneValue = Option.none<number>()\n *\n * console.log(Option.as(noneValue, \"new value\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Mapping\n * @since 2.0.0\n */ const as = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, b)=>map(self, ()=>b));\n/**\n * Replaces the value inside a `Some` with the constant value `void`, leaving\n * `None` unchanged.\n *\n * **Details**\n *\n * This function transforms an `Option` by replacing the value inside a `Some`\n * with `void`. If the `Option` is `None`, it remains unchanged.\n *\n * This is particularly useful in scenarios where the presence or absence of a\n * value is significant, but the actual content of the value is irrelevant.\n *\n * @category Mapping\n * @since 2.0.0\n */ const asVoid = /*#__PURE__*/ as(undefined);\nconst void_ = /*#__PURE__*/ some(undefined);\n\n/**\n * Applies a function to the value of a `Some` and flattens the resulting\n * `Option`. If the input is `None`, it remains `None`.\n *\n * **Details**\n *\n * This function allows you to chain computations that return `Option` values.\n * If the input `Option` is `Some`, the provided function `f` is applied to the\n * contained value, and the resulting `Option` is returned. If the input is\n * `None`, the function is not applied, and the result remains `None`.\n *\n * This utility is particularly useful for sequencing operations that may fail\n * or produce optional results, enabling clean and concise workflows for\n * handling such cases.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * interface Address {\n *   readonly city: string\n *   readonly street: Option.Option<string>\n * }\n *\n * interface User {\n *   readonly id: number\n *   readonly username: string\n *   readonly email: Option.Option<string>\n *   readonly address: Option.Option<Address>\n * }\n *\n * const user: User = {\n *   id: 1,\n *   username: \"john_doe\",\n *   email: Option.some(\"john.doe@example.com\"),\n *   address: Option.some({\n *     city: \"New York\",\n *     street: Option.some(\"123 Main St\")\n *   })\n * }\n *\n * // Use flatMap to extract the street value\n * const street = user.address.pipe(\n *   Option.flatMap((address) => address.street)\n * )\n *\n * console.log(street)\n * // Output: { _id: 'Option', _tag: 'Some', value: '123 Main St' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */ const flatMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>isNone(self) ? none() : f(self.value));\n/**\n * Chains two `Option`s together. The second `Option` can either be a static\n * value or depend on the result of the first `Option`.\n *\n * **Details**\n *\n * This function enables sequencing of two `Option` computations. If the first\n * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n * either:\n *\n * - Be a static `Option` value.\n * - Be a function that produces an `Option`, optionally based on the value of\n *   the first `Option`.\n *\n * If the first `Option` is `None`, the function skips the evaluation of the\n * second `Option` and directly returns `None`.\n *\n * @category Sequencing\n * @since 2.0.0\n */ const andThen = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>flatMap(self, (a)=>{\n        const b = (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(f) ? f(a) : f;\n        return isOption(b) ? b : some(b);\n    }));\n/**\n * Combines `flatMap` and `fromNullable`, transforming the value inside a `Some`\n * using a function that may return `null` or `undefined`.\n *\n * **Details**\n *\n * This function applies a transformation function `f` to the value inside a\n * `Some`. The function `f` may return a value, `null`, or `undefined`. If `f`\n * returns a value, it is wrapped in a `Some`. If `f` returns `null` or\n * `undefined`, the result is `None`. If the input `Option` is `None`, the\n * function is not applied, and `None` is returned.\n *\n * This utility is particularly useful when working with deeply nested optional\n * values or chaining computations that may result in `null` or `undefined` at\n * some point.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: \"high street\" } } } }\n *\n * // Extracting a deeply nested property\n * console.log(\n *   Option.some(employee1)\n *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n * )\n * // Output: { _id: 'Option', _tag: 'Some', value: 'high street' }\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * // Property does not exist\n * console.log(\n *   Option.some(employee2)\n *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n * )\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */ const flatMapNullable = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>isNone(self) ? none() : fromNullable(f(self.value)));\n/**\n * Flattens an `Option` of `Option` into a single `Option`.\n *\n * **Details**\n *\n * This function takes an `Option` that wraps another `Option` and flattens it\n * into a single `Option`. If the outer `Option` is `Some`, the function\n * extracts the inner `Option`. If the outer `Option` is `None`, the result\n * remains `None`.\n *\n * This is useful for simplifying nested `Option` structures that may arise\n * during functional operations.\n *\n * @category Sequencing\n * @since 2.0.0\n */ const flatten = /*#__PURE__*/ flatMap(_Function_js__WEBPACK_IMPORTED_MODULE_1__.identity);\n/**\n * Combines two `Option`s, keeping the value from the second `Option` if both\n * are `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and returns the second one if the first is\n * `Some`. If the first `Option` is `None`, the result will also be `None`,\n * regardless of the second `Option`. It effectively \"zips\" the two `Option`s\n * while discarding the value from the first `Option`.\n *\n * This is particularly useful when sequencing computations where the result of\n * the first computation is not needed, and you only care about the result of\n * the second computation.\n *\n * @category Zipping\n * @since 2.0.0\n */ const zipRight = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>flatMap(self, ()=>that));\n/**\n * Combines two `Option`s, keeping the value from the first `Option` if both are\n * `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and returns the first one if it is `Some`.\n * If either the first `Option` or the second `Option` is `None`, the result\n * will be `None`. This operation \"zips\" the two `Option`s while discarding the\n * value from the second `Option`.\n *\n * This is useful when sequencing computations where the second `Option`\n * represents a dependency or condition that must hold, but its value is\n * irrelevant.\n *\n * @category Zipping\n * @since 2.0.0\n */ const zipLeft = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>tap(self, ()=>that));\n/**\n * Composes two functions that return `Option` values, creating a new function\n * that chains them together.\n *\n * **Details**\n *\n * This function allows you to compose two computations, each represented by a\n * function that returns an `Option`. The result of the first function is passed\n * to the second function if it is `Some`. If the first function returns `None`,\n * the composed function short-circuits and returns `None` without invoking the\n * second function.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): Option.Option<number> => isNaN(Number(s)) ? Option.none() : Option.some(Number(s))\n *\n * const double = (n: number): Option.Option<number> => n > 0 ? Option.some(n * 2) : Option.none()\n *\n * const parseAndDouble = Option.composeK(parse, double)\n *\n * console.log(parseAndDouble(\"42\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n *\n * console.log(parseAndDouble(\"not a number\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */ const composeK = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (afb, bfc)=>(a)=>flatMap(afb(a), bfc));\n/**\n * Applies the provided function `f` to the value of the `Option` if it is\n * `Some` and returns the original `Option`, unless `f` returns `None`, in which\n * case it returns `None`.\n *\n * **Details**\n *\n * This function allows you to perform additional computations on the value of\n * an `Option` without modifying its original value. If the `Option` is `Some`,\n * the provided function `f` is executed with the value, and its result\n * determines whether the original `Option` is returned (`Some`) or the result\n * is `None` if `f` returns `None`. If the input `Option` is `None`, the\n * function is not executed, and `None` is returned.\n *\n * This is particularly useful for applying side conditions or performing\n * validation checks while retaining the original `Option`'s value.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * console.log(Option.tap(Option.none(), getInteger))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.tap(Option.some(1), getInteger))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(Option.tap(Option.some(1.14), getInteger))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */ const tap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>flatMap(self, (a)=>map(f(a), ()=>a)));\n/**\n * Combines two `Option` values into a single `Option` containing a tuple of\n * their values if both are `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and combines their values into a tuple `[A,\n * B]` if both are `Some`. If either of the `Option`s is `None`, the result is\n * `None`. This is particularly useful for combining multiple `Option` values\n * into a single one, ensuring both contain valid values.\n *\n * @category Combining\n * @since 2.0.0\n */ const product = (self, that)=>isSome(self) && isSome(that) ? some([\n        self.value,\n        that.value\n    ]) : none();\n/**\n * Combines an `Option` with a collection of `Option`s into a single `Option`\n * containing a tuple of their values if all are `Some`.\n *\n * **Details**\n *\n * This function takes a primary `Option` and a collection of `Option`s and\n * combines their values into a tuple `[A, ...Array<A>]` if all are `Some`. If\n * the primary `Option` or any `Option` in the collection is `None`, the result\n * is `None`.\n *\n * @category Combining\n * @since 2.0.0\n */ const productMany = (self, collection)=>{\n    if (isNone(self)) {\n        return none();\n    }\n    const out = [\n        self.value\n    ];\n    for (const o of collection){\n        if (isNone(o)) {\n            return none();\n        }\n        out.push(o.value);\n    }\n    return some(out);\n};\n/**\n * Combines a structure of `Option`s into a single `Option` containing the\n * values with the same structure.\n *\n * **Details**\n *\n * This function takes a structure of `Option`s (a tuple, struct, or iterable)\n * and produces a single `Option` that contains the values from the input\n * structure if all `Option`s are `Some`. If any `Option` in the input is\n * `None`, the result is `None`. The structure of the input is preserved in the\n * output.\n *\n * - If the input is a tuple (e.g., an array), the result will be an `Option`\n *   containing a tuple with the same length.\n * - If the input is a struct (e.g., an object), the result will be an `Option`\n *   containing a struct with the same keys.\n * - If the input is an iterable, the result will be an `Option` containing an\n *   array.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * //      ┌─── Option<[string, number]>\n * //      ▼\n * const tuple = Option.all([maybeName, maybeAge])\n * console.log(tuple)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: [ 'John', 25 ] }\n *\n * //      ┌─── Option<{ name: string; age: number; }>\n * //      ▼\n * const struct = Option.all({ name: maybeName, age: maybeAge })\n * console.log(struct)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'John', age: 25 } }\n * ```\n *\n * @category Combining\n * @since 2.0.0\n */ // @ts-expect-error\nconst all = (input)=>{\n    if (Symbol.iterator in input) {\n        const out = [];\n        for (const o of input){\n            if (isNone(o)) {\n                return none();\n            }\n            out.push(o.value);\n        }\n        return some(out);\n    }\n    const out = {};\n    for (const key of Object.keys(input)){\n        const o = input[key];\n        if (isNone(o)) {\n            return none();\n        }\n        out[key] = o.value;\n    }\n    return some(out);\n};\n/**\n * Combines two `Option` values into a new `Option` by applying a provided\n * function to their values.\n *\n * **Details**\n *\n * This function takes two `Option` values (`self` and `that`) and a combining\n * function `f`. If both `Option` values are `Some`, the function `f` is applied\n * to their values, and the result is wrapped in a new `Some`. If either\n * `Option` is `None`, the result is `None`.\n *\n * This utility is useful for combining two optional computations into a single\n * result while maintaining type safety and avoiding explicit checks for `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * // Combine the name and age into a person object\n * const person = Option.zipWith(maybeName, maybeAge, (name, age) => ({\n *   name: name.toUpperCase(),\n *   age\n * }))\n *\n * console.log(person)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n * ```\n *\n * @category Zipping\n * @since 2.0.0\n */ const zipWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, that, f)=>map(product(self, that), ([a, b])=>f(a, b)));\n/**\n * Applies a function inside a `Some` to a value inside another `Some`,\n * combining them into a new `Option`.\n *\n * **Details**\n *\n * This function allows you to apply a function wrapped in an `Option` (`self`)\n * to a value wrapped in another `Option` (`that`). If both `Option`s are\n * `Some`, the function is applied to the value, and the result is wrapped in a\n * new `Some`. If either `Option` is `None`, the result is `None`.\n *\n * @category Combining\n * @since 2.0.0\n */ const ap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>zipWith(self, that, (f, a)=>f(a)));\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, ignoring\n * elements that are `None`.\n *\n * **Details**\n *\n * This function takes an initial value of type `B` and a reducing function `f`\n * that combines the accumulator with values of type `A`. It processes an\n * iterable of `Option<A>`, applying `f` only to the `Some` values while\n * ignoring the `None` values. The result is a single value of type `B`.\n *\n * This utility is particularly useful for aggregating values from an iterable\n * of `Option`s while skipping the absent (`None`) values.\n *\n * @example\n * ```ts\n * import { Option, pipe } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n *\n * console.log(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)))\n * // Output: 3\n * ```\n *\n * @category Reducing\n * @since 2.0.0\n */ const reduceCompact = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, b, f)=>{\n    let out = b;\n    for (const oa of self){\n        if (isSome(oa)) {\n            out = f(out, oa.value);\n        }\n    }\n    return out;\n});\n/**\n * Converts an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, its value is wrapped in a single-element array.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.toArray(Option.some(1)))\n * // Output: [1]\n *\n * console.log(Option.toArray(Option.none()))\n * // Output: []\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */ const toArray = (self)=>isNone(self) ? [] : [\n        self.value\n    ];\n/**\n * Splits an `Option` into two `Option`s based on the result of a mapping\n * function that produces an `Either`.\n *\n * **Details**\n *\n * This function takes an `Option` and a mapping function `f` that converts its\n * value into an `Either`. It returns a tuple of two `Option`s:\n *\n * - The first `Option` (`left`) contains the value from the `Left` side of the\n *   `Either` if it exists, otherwise `None`.\n * - The second `Option` (`right`) contains the value from the `Right` side of\n *   the `Either` if it exists, otherwise `None`.\n *\n * If the input `Option` is `None`, both returned `Option`s are `None`.\n *\n * This utility is useful for filtering and categorizing the contents of an\n * `Option` based on a bifurcating computation.\n *\n * @category Filtering\n * @since 2.0.0\n */ const partitionMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f)=>{\n    if (isNone(self)) {\n        return [\n            none(),\n            none()\n        ];\n    }\n    const e = f(self.value);\n    return _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.isLeft(e) ? [\n        some(e.left),\n        none()\n    ] : [\n        none(),\n        some(e.right)\n    ];\n});\n// TODO(4.0): remove?\n/**\n * Alias of {@link flatMap}.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Transform and filter numbers\n * const transformEven = (n: Option.Option<number>): Option.Option<string> =>\n *   Option.filterMap(n, (n) => (n % 2 === 0 ? Option.some(`Even: ${n}`) : Option.none()))\n *\n * console.log(transformEven(Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(transformEven(Option.some(1)))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(transformEven(Option.some(2)))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'Even: 2' }\n * ```\n *\n * @category Filtering\n * @since 2.0.0\n */ const filterMap = flatMap;\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const removeEmptyString = (input: Option.Option<string>) =>\n *   Option.filter(input, (value) => value !== \"\")\n *\n * console.log(removeEmptyString(Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(removeEmptyString(Option.some(\"\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(removeEmptyString(Option.some(\"a\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Filtering\n * @since 2.0.0\n */ const filter = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, predicate)=>filterMap(self, (b)=>predicate(b) ? _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.some(b) : _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.none));\n/**\n * Creates an `Equivalence` instance for comparing `Option` values, using a\n * provided `Equivalence` for the inner type.\n *\n * **Details**\n *\n * This function takes an `Equivalence` instance for a specific type `A` and\n * produces an `Equivalence` instance for `Option<A>`. The resulting\n * `Equivalence` determines whether two `Option` values are equivalent:\n *\n * - Two `None`s are considered equivalent.\n * - A `Some` and a `None` are not equivalent.\n * - Two `Some` values are equivalent if their inner values are equivalent\n *   according to the provided `Equivalence`.\n *\n * **Example** (Comparing Optional Numbers for Equivalence)\n *\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n *\n * console.log(isEquivalent(Option.none(), Option.none()))\n * // Output: true\n *\n * console.log(isEquivalent(Option.none(), Option.some(1)))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.none()))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.some(2)))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.some(1)))\n * // Output: true\n * ```\n *\n * @category Equivalence\n * @since 2.0.0\n */ const getEquivalence = (isEquivalent)=>_Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.make((x, y)=>isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value));\n/**\n * Creates an `Order` instance for comparing `Option` values, using a provided\n * `Order` for the inner type.\n *\n * **Details**\n *\n * This function produces an `Order` instance for `Option<A>`, allowing `Option`\n * values to be compared:\n *\n * - `None` is always considered less than any `Some` value.\n * - If both are `Some`, their inner values are compared using the provided\n *   `Order` instance.\n *\n * @example\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const order = Option.getOrder(Number.Order)\n *\n * console.log(order(Option.none(), Option.none()))\n * // Output: 0\n *\n * console.log(order(Option.none(), Option.some(1)))\n * // Output: -1\n *\n * console.log(order(Option.some(1), Option.none()))\n * // Output: 1\n *\n * console.log(order(Option.some(1), Option.some(2)))\n * // Output: -1\n *\n * console.log(order(Option.some(1), Option.some(1)))\n * // Output: 0\n * ```\n *\n * @category Sorting\n * @since 2.0.0\n */ const getOrder = (O)=>_Order_js__WEBPACK_IMPORTED_MODULE_4__.make((self, that)=>isSome(self) ? isSome(that) ? O(self.value, that.value) : 1 : -1);\n/**\n * Lifts a binary function to work with `Option` values, allowing the function\n * to operate on two `Option`s.\n *\n * **Details**\n *\n * This function takes a binary function `f` and returns a new function that\n * applies `f` to the values of two `Option`s (`self` and `that`). If both\n * `Option`s are `Some`, the binary function `f` is applied to their values, and\n * the result is wrapped in a new `Some`. If either `Option` is `None`, the\n * result is `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // A binary function to add two numbers\n * const add = (a: number, b: number): number => a + b\n *\n * // Lift the `add` function to work with `Option` values\n * const addOptions = Option.lift2(add)\n *\n * // Both `Option`s are `Some`\n * console.log(addOptions(Option.some(2), Option.some(3)))\n * // Output: { _id: 'Option', _tag: 'Some', value: 5 }\n *\n * // One `Option` is `None`\n * console.log(addOptions(Option.some(2), Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Lifting\n * @since 2.0.0\n */ const lift2 = (f)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that)=>zipWith(self, that, f));\n/**\n * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n *\n * **Details**\n *\n * This function transforms a `Predicate` (or a more specific `Refinement`) into\n * a function that produces an `Option`. If the predicate evaluates to `true`,\n * the input value is wrapped in a `Some`. If the predicate evaluates to\n * `false`, the result is `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Check if a number is positive\n * const isPositive = (n: number) => n > 0\n *\n * //      ┌─── (b: number) => Option<number>\n * //      ▼\n * const parsePositive = Option.liftPredicate(isPositive)\n *\n * console.log(parsePositive(1))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parsePositive(-1))\n * // OUtput: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Lifting\n * @since 2.0.0\n */ const liftPredicate = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (b, predicate)=>predicate(b) ? some(b) : none());\n/**\n * Returns a function that checks if an `Option` contains a specified value,\n * using a provided equivalence function.\n *\n * **Details**\n *\n * This function allows you to check whether an `Option` contains a specific\n * value. It uses an equivalence function `isEquivalent` to compare the value\n * inside the `Option` to the provided value. If the `Option` is `Some` and the\n * equivalence function returns `true`, the result is `true`. If the `Option` is\n * `None` or the values are not equivalent, the result is `false`.\n *\n * @example\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const contains = Option.containsWith(Number.Equivalence)\n *\n * console.log(Option.some(2).pipe(contains(2)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(contains(2)))\n * // Output: false\n *\n * console.log(Option.none().pipe(contains(2)))\n * // Output: false\n * ```\n *\n * @see {@link contains} for a version that uses the default `Equivalence`.\n *\n * @category Elements\n * @since 2.0.0\n */ const containsWith = (isEquivalent)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, a)=>isNone(self) ? false : isEquivalent(self.value, a));\nconst _equivalence = /*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_5__.equivalence();\n/**\n * Returns a function that checks if an `Option` contains a specified value\n * using the default `Equivalence`.\n *\n * **Details**\n *\n * This function allows you to check whether an `Option` contains a specific\n * value. It uses the default `Equivalence` for equality comparison. If the\n * `Option` is `Some` and its value is equivalent to the provided value, the\n * result is `true`. If the `Option` is `None` or the values are not equivalent,\n * the result is `false`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.some(2).pipe(Option.contains(2)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(Option.contains(2)))\n * // Output: false\n *\n * console.log(Option.none().pipe(Option.contains(2)))\n * // Output: false\n * ```\n *\n * @see {@link containsWith} for a version that allows you to specify a custom equivalence function.\n *\n * @category Elements\n * @since 2.0.0\n */ const contains = /*#__PURE__*/ containsWith(_equivalence);\n/**\n * Checks if a value in an `Option` satisfies a given predicate or refinement.\n *\n * **Details**\n *\n * This function allows you to check if a value inside a `Some` meets a\n * specified condition. If the `Option` is `None`, the result is `false`. If the\n * `Option` is `Some`, the provided predicate or refinement is applied to the\n * value:\n *\n * - If the condition is met, the result is `true`.\n * - If the condition is not met, the result is `false`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * console.log(Option.some(2).pipe(Option.exists(isEven)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(Option.exists(isEven)))\n * // Output: false\n *\n * console.log(Option.none().pipe(Option.exists(isEven)))\n * // Output: false\n * ```\n *\n * @category Elements\n * @since 2.0.0\n */ const exists = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, refinement)=>isNone(self) ? false : refinement(self.value));\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */ const bindTo = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.bindTo(map);\nconst let_ = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.let_(map);\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */ const bind = /*#__PURE__*/ _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.bind(map, flatMap);\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */ const Do = /*#__PURE__*/ some({});\nconst adapter = /*#__PURE__*/ _Utils_js__WEBPACK_IMPORTED_MODULE_7__.adapter();\n/**\n * Similar to `Effect.gen`, `Option.gen` provides a more readable,\n * generator-based syntax for working with `Option` values, making code that\n * involves `Option` easier to write and understand. This approach is similar to\n * using `async/await` but tailored for `Option`.\n *\n * **Example** (Using `Option.gen` to Create a Combined Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * const person = Option.gen(function* () {\n *   const name = (yield* maybeName).toUpperCase()\n *   const age = yield* maybeAge\n *   return { name, age }\n * })\n *\n * console.log(person)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n * ```\n *\n * @category Generators\n * @since 2.0.0\n */ const gen = (...args)=>{\n    const f = args.length === 1 ? args[0] : args[1].bind(args[0]);\n    const iterator = f(adapter);\n    let state = iterator.next();\n    while(!state.done){\n        const current = _Utils_js__WEBPACK_IMPORTED_MODULE_7__.isGenKind(state.value) ? state.value.value : _Utils_js__WEBPACK_IMPORTED_MODULE_7__.yieldWrapGet(state.value);\n        if (isNone(current)) {\n            return current;\n        }\n        state = iterator.next(current.value);\n    }\n    return some(state.value);\n};\n/**\n * Merges two optional values, applying a function if both exist.\n * Unlike {@link zipWith}, this function returns `None` only if both inputs are `None`.\n *\n * @internal\n */ const mergeWith = (f)=>(o1, o2)=>{\n        if (isNone(o1)) {\n            return o2;\n        } else if (isNone(o2)) {\n            return o1;\n        }\n        return some(f(o1.value, o2.value));\n    }; //# sourceMappingURL=Option.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Option.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Order.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Order.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Date: () => (/* binding */ Date),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   between: () => (/* binding */ between),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   combineAll: () => (/* binding */ combineAll),\n/* harmony export */   combineMany: () => (/* binding */ combineMany),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   greaterThan: () => (/* binding */ greaterThan),\n/* harmony export */   greaterThanOrEqualTo: () => (/* binding */ greaterThanOrEqualTo),\n/* harmony export */   lessThan: () => (/* binding */ lessThan),\n/* harmony export */   lessThanOrEqualTo: () => (/* binding */ lessThanOrEqualTo),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   reverse: () => (/* binding */ reverse),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   tuple: () => (/* binding */ tuple)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */ \n/**\n * @category constructors\n * @since 2.0.0\n */ const make = (compare)=>(self, that)=>self === that ? 0 : compare(self, that);\n/**\n * @category instances\n * @since 2.0.0\n */ const string = /*#__PURE__*/ make((self, that)=>self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */ const number = /*#__PURE__*/ make((self, that)=>self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */ const boolean = /*#__PURE__*/ make((self, that)=>self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */ const bigint = /*#__PURE__*/ make((self, that)=>self < that ? -1 : 1);\n/**\n * @since 2.0.0\n */ const reverse = (O)=>make((self, that)=>O(that, self));\n/**\n * @category combining\n * @since 2.0.0\n */ const combine = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>make((a1, a2)=>{\n        const out = self(a1, a2);\n        if (out !== 0) {\n            return out;\n        }\n        return that(a1, a2);\n    }));\n/**\n * @category combining\n * @since 2.0.0\n */ const combineMany = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection)=>make((a1, a2)=>{\n        let out = self(a1, a2);\n        if (out !== 0) {\n            return out;\n        }\n        for (const O of collection){\n            out = O(a1, a2);\n            if (out !== 0) {\n                return out;\n            }\n        }\n        return out;\n    }));\n/**\n * @since 2.0.0\n */ const empty = ()=>make(()=>0);\n/**\n * @category combining\n * @since 2.0.0\n */ const combineAll = (collection)=>combineMany(empty(), collection);\n/**\n * @category mapping\n * @since 2.0.0\n */ const mapInput = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>make((b1, b2)=>self(f(b1), f(b2))));\n/**\n * @category instances\n * @since 2.0.0\n */ const Date = /*#__PURE__*/ mapInput(number, (date)=>date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */ const product = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>make(([xa, xb], [ya, yb])=>{\n        const o = self(xa, ya);\n        return o !== 0 ? o : that(xb, yb);\n    }));\n/**\n * @category combining\n * @since 2.0.0\n */ const all = (collection)=>{\n    return make((x, y)=>{\n        const len = Math.min(x.length, y.length);\n        let collectionLength = 0;\n        for (const O of collection){\n            if (collectionLength >= len) {\n                break;\n            }\n            const o = O(x[collectionLength], y[collectionLength]);\n            if (o !== 0) {\n                return o;\n            }\n            collectionLength++;\n        }\n        return 0;\n    });\n};\n/**\n * @category combining\n * @since 2.0.0\n */ const productMany = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection)=>{\n    const O = all(collection);\n    return make((x, y)=>{\n        const o = self(x[0], y[0]);\n        return o !== 0 ? o : O(x.slice(1), y.slice(1));\n    });\n});\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */ const tuple = (...elements)=>all(elements);\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */ const array = (O)=>make((self, that)=>{\n        const aLen = self.length;\n        const bLen = that.length;\n        const len = Math.min(aLen, bLen);\n        for(let i = 0; i < len; i++){\n            const o = O(self[i], that[i]);\n            if (o !== 0) {\n                return o;\n            }\n        }\n        return number(aLen, bLen);\n    });\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */ const struct = (fields)=>{\n    const keys = Object.keys(fields);\n    return make((self, that)=>{\n        for (const key of keys){\n            const o = fields[key](self[key], that[key]);\n            if (o !== 0) {\n                return o;\n            }\n        }\n        return 0;\n    });\n};\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */ const lessThan = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>O(self, that) === -1);\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */ const greaterThan = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>O(self, that) === 1);\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */ const lessThanOrEqualTo = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>O(self, that) !== 1);\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */ const greaterThanOrEqualTo = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>O(self, that) !== -1);\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */ const min = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>self === that || O(self, that) < 1 ? self : that);\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */ const max = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>self === that || O(self, that) > -1 ? self : that);\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n * ```\n *\n * @since 2.0.0\n */ const clamp = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options)=>min(O)(options.maximum, max(O)(options.minimum, self)));\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */ const between = (O)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options)=>!lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum)); //# sourceMappingURL=Order.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Order.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Pipeable.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Pipeable.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   Prototype: () => (/* binding */ Prototype),\n/* harmony export */   pipeArguments: () => (/* binding */ pipeArguments)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */ /**\n * @since 2.0.0\n */ const pipeArguments = (self, args)=>{\n    switch(args.length){\n        case 0:\n            return self;\n        case 1:\n            return args[0](self);\n        case 2:\n            return args[1](args[0](self));\n        case 3:\n            return args[2](args[1](args[0](self)));\n        case 4:\n            return args[3](args[2](args[1](args[0](self))));\n        case 5:\n            return args[4](args[3](args[2](args[1](args[0](self)))));\n        case 6:\n            return args[5](args[4](args[3](args[2](args[1](args[0](self))))));\n        case 7:\n            return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))));\n        case 8:\n            return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))));\n        case 9:\n            return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))));\n        default:\n            {\n                let ret = self;\n                for(let i = 0, len = args.length; i < len; i++){\n                    ret = args[i](ret);\n                }\n                return ret;\n            }\n    }\n};\n/**\n * @since 3.15.0\n * @category Prototypes\n */ const Prototype = {\n    pipe () {\n        return pipeArguments(this, arguments);\n    }\n};\nconst Base = /*#__PURE__*/ function() {\n    function PipeableBase() {}\n    PipeableBase.prototype = Prototype;\n    return PipeableBase;\n}();\n/**\n * @since 3.15.0\n * @category Constructors\n */ const Class = (klass)=>klass ? class extends klass {\n        pipe() {\n            return pipeArguments(this, arguments);\n        }\n    } : Base; //# sourceMappingURL=Pipeable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL1BpcGVhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQ0Q7O0NBRUMsR0FDTSxNQUFNQSxnQkFBZ0IsQ0FBQ0MsTUFBTUM7SUFDbEMsT0FBUUEsS0FBS0MsTUFBTTtRQUNqQixLQUFLO1lBQ0gsT0FBT0Y7UUFDVCxLQUFLO1lBQ0gsT0FBT0MsSUFBSSxDQUFDLEVBQUUsQ0FBQ0Q7UUFDakIsS0FBSztZQUNILE9BQU9DLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNEO1FBQ3pCLEtBQUs7WUFDSCxPQUFPQyxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDRDtRQUNqQyxLQUFLO1lBQ0gsT0FBT0MsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0Q7UUFDekMsS0FBSztZQUNILE9BQU9DLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNEO1FBQ2pELEtBQUs7WUFDSCxPQUFPQyxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDRDtRQUN6RCxLQUFLO1lBQ0gsT0FBT0MsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0Q7UUFDakUsS0FBSztZQUNILE9BQU9DLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUNEO1FBQ3pFLEtBQUs7WUFDSCxPQUFPQyxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDRDtRQUNqRjtZQUNFO2dCQUNFLElBQUlHLE1BQU1IO2dCQUNWLElBQUssSUFBSUksSUFBSSxHQUFHQyxNQUFNSixLQUFLQyxNQUFNLEVBQUVFLElBQUlDLEtBQUtELElBQUs7b0JBQy9DRCxNQUFNRixJQUFJLENBQUNHLEVBQUUsQ0FBQ0Q7Z0JBQ2hCO2dCQUNBLE9BQU9BO1lBQ1Q7SUFDSjtBQUNGLEVBQUU7QUFDRjs7O0NBR0MsR0FDTSxNQUFNRyxZQUFZO0lBQ3ZCQztRQUNFLE9BQU9SLGNBQWMsSUFBSSxFQUFFUztJQUM3QjtBQUNGLEVBQUU7QUFDRixNQUFNQyxPQUFPLFdBQVcsR0FBRTtJQUN4QixTQUFTQyxnQkFBZ0I7SUFDekJBLGFBQWFDLFNBQVMsR0FBR0w7SUFDekIsT0FBT0k7QUFDVDtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1FLFFBQVFDLENBQUFBLFFBQVNBLFFBQVEsY0FBY0E7UUFDbEROLE9BQU87WUFDTCxPQUFPUixjQUFjLElBQUksRUFBRVM7UUFDN0I7SUFDRixJQUFJQyxLQUFLLENBQ1Qsb0NBQW9DIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vUGlwZWFibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHBpcGVBcmd1bWVudHMgPSAoc2VsZiwgYXJncykgPT4ge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGFyZ3NbMF0oc2VsZik7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGFyZ3NbMV0oYXJnc1swXShzZWxmKSk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSk7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIGFyZ3NbM10oYXJnc1syXShhcmdzWzFdKGFyZ3NbMF0oc2VsZikpKSk7XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGFyZ3NbNF0oYXJnc1szXShhcmdzWzJdKGFyZ3NbMV0oYXJnc1swXShzZWxmKSkpKSk7XG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuIGFyZ3NbNV0oYXJnc1s0XShhcmdzWzNdKGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSkpKSk7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIGFyZ3NbNl0oYXJnc1s1XShhcmdzWzRdKGFyZ3NbM10oYXJnc1syXShhcmdzWzFdKGFyZ3NbMF0oc2VsZikpKSkpKSk7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIGFyZ3NbN10oYXJnc1s2XShhcmdzWzVdKGFyZ3NbNF0oYXJnc1szXShhcmdzWzJdKGFyZ3NbMV0oYXJnc1swXShzZWxmKSkpKSkpKSk7XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIGFyZ3NbOF0oYXJnc1s3XShhcmdzWzZdKGFyZ3NbNV0oYXJnc1s0XShhcmdzWzNdKGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSkpKSkpKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgbGV0IHJldCA9IHNlbGY7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcmV0ID0gYXJnc1tpXShyZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gIH1cbn07XG4vKipcbiAqIEBzaW5jZSAzLjE1LjBcbiAqIEBjYXRlZ29yeSBQcm90b3R5cGVzXG4gKi9cbmV4cG9ydCBjb25zdCBQcm90b3R5cGUgPSB7XG4gIHBpcGUoKSB7XG4gICAgcmV0dXJuIHBpcGVBcmd1bWVudHModGhpcywgYXJndW1lbnRzKTtcbiAgfVxufTtcbmNvbnN0IEJhc2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQaXBlYWJsZUJhc2UoKSB7fVxuICBQaXBlYWJsZUJhc2UucHJvdG90eXBlID0gUHJvdG90eXBlO1xuICByZXR1cm4gUGlwZWFibGVCYXNlO1xufSgpO1xuLyoqXG4gKiBAc2luY2UgMy4xNS4wXG4gKiBAY2F0ZWdvcnkgQ29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjb25zdCBDbGFzcyA9IGtsYXNzID0+IGtsYXNzID8gY2xhc3MgZXh0ZW5kcyBrbGFzcyB7XG4gIHBpcGUoKSB7XG4gICAgcmV0dXJuIHBpcGVBcmd1bWVudHModGhpcywgYXJndW1lbnRzKTtcbiAgfVxufSA6IEJhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QaXBlYWJsZS5qcy5tYXAiXSwibmFtZXMiOlsicGlwZUFyZ3VtZW50cyIsInNlbGYiLCJhcmdzIiwibGVuZ3RoIiwicmV0IiwiaSIsImxlbiIsIlByb3RvdHlwZSIsInBpcGUiLCJhcmd1bWVudHMiLCJCYXNlIiwiUGlwZWFibGVCYXNlIiwicHJvdG90eXBlIiwiQ2xhc3MiLCJrbGFzcyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Pipeable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Predicate.js":
/*!***************************************************!*\
  !*** ./node_modules/effect/dist/esm/Predicate.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   and: () => (/* binding */ and),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   eqv: () => (/* binding */ eqv),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   hasProperty: () => (/* binding */ hasProperty),\n/* harmony export */   implies: () => (/* binding */ implies),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDate: () => (/* binding */ isDate),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isMap: () => (/* binding */ isMap),\n/* harmony export */   isNever: () => (/* binding */ isNever),\n/* harmony export */   isNotNull: () => (/* binding */ isNotNull),\n/* harmony export */   isNotNullable: () => (/* binding */ isNotNullable),\n/* harmony export */   isNotUndefined: () => (/* binding */ isNotUndefined),\n/* harmony export */   isNull: () => (/* binding */ isNull),\n/* harmony export */   isNullable: () => (/* binding */ isNullable),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),\n/* harmony export */   isPropertyKey: () => (/* binding */ isPropertyKey),\n/* harmony export */   isReadonlyRecord: () => (/* binding */ isReadonlyRecord),\n/* harmony export */   isRecord: () => (/* binding */ isRecord),\n/* harmony export */   isRecordOrArray: () => (/* binding */ isRecordOrArray),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSymbol: () => (/* binding */ isSymbol),\n/* harmony export */   isTagged: () => (/* binding */ isTagged),\n/* harmony export */   isTruthy: () => (/* binding */ isTruthy),\n/* harmony export */   isTupleOf: () => (/* binding */ isTupleOf),\n/* harmony export */   isTupleOfAtLeast: () => (/* binding */ isTupleOfAtLeast),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isUnknown: () => (/* binding */ isUnknown),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   nand: () => (/* binding */ nand),\n/* harmony export */   nor: () => (/* binding */ nor),\n/* harmony export */   not: () => (/* binding */ not),\n/* harmony export */   or: () => (/* binding */ or),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   tuple: () => (/* binding */ tuple),\n/* harmony export */   xor: () => (/* binding */ xor)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * @since 2.0.0\n */ \n/**\n * Given a `Predicate<A>` returns a `Predicate<B>`\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate, Number } from \"effect\"\n *\n * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n *\n * assert.deepStrictEqual(minLength3(\"a\"), false)\n * assert.deepStrictEqual(minLength3(\"aa\"), false)\n * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */ const mapInput = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>(b)=>self(f(b)));\n/**\n * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n *\n * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number]\n * }\n * ```\n *\n * @category guards\n * @since 3.3.0\n */ const isTupleOf = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>self.length === n);\n/**\n * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n *\n * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number, ...number[]]\n * }\n * ```\n *\n * @category guards\n * @since 3.3.0\n */ const isTupleOfAtLeast = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n)=>self.length >= n);\n/**\n * Tests if a value is `truthy`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTruthy(1), true)\n * assert.deepStrictEqual(isTruthy(0), false)\n * assert.deepStrictEqual(isTruthy(\"\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isTruthy = (input)=>!!input;\n/**\n * Tests if a value is a `Set`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSet(new Set([1, 2])), true)\n * assert.deepStrictEqual(isSet(new Set()), true)\n * assert.deepStrictEqual(isSet({}), false)\n * assert.deepStrictEqual(isSet(null), false)\n * assert.deepStrictEqual(isSet(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isSet = (input)=>input instanceof Set;\n/**\n * Tests if a value is a `Map`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isMap(new Map()), true)\n * assert.deepStrictEqual(isMap({}), false)\n * assert.deepStrictEqual(isMap(null), false)\n * assert.deepStrictEqual(isMap(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isMap = (input)=>input instanceof Map;\n/**\n * Tests if a value is a `string`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isString } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isString(\"a\"), true)\n *\n * assert.deepStrictEqual(isString(1), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isString = (input)=>typeof input === \"string\";\n/**\n * Tests if a value is a `number`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n *\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNumber = (input)=>typeof input === \"number\";\n/**\n * Tests if a value is a `boolean`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n *\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isBoolean = (input)=>typeof input === \"boolean\";\n/**\n * Tests if a value is a `bigint`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n *\n * assert.deepStrictEqual(isBigInt(1), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isBigInt = (input)=>typeof input === \"bigint\";\n/**\n * Tests if a value is a `symbol`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.deepStrictEqual(isSymbol(\"a\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isSymbol = (input)=>typeof input === \"symbol\";\n// TODO: make public\n/** @internal */ const isPropertyKey = (u)=>isString(u) || isNumber(u) || isSymbol(u);\n/**\n * Tests if a value is a `function`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n *\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isFunction = _Function_js__WEBPACK_IMPORTED_MODULE_0__.isFunction;\n/**\n * Tests if a value is `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUndefined(undefined), true)\n *\n * assert.deepStrictEqual(isUndefined(null), false)\n * assert.deepStrictEqual(isUndefined(\"undefined\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isUndefined = (input)=>input === undefined;\n/**\n * Tests if a value is not `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotUndefined(null), true)\n * assert.deepStrictEqual(isNotUndefined(\"undefined\"), true)\n *\n * assert.deepStrictEqual(isNotUndefined(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNotUndefined = (input)=>input !== undefined;\n/**\n * Tests if a value is `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNull(null), true)\n *\n * assert.deepStrictEqual(isNull(undefined), false)\n * assert.deepStrictEqual(isNull(\"null\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNull = (input)=>input === null;\n/**\n * Tests if a value is not `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNull(undefined), true)\n * assert.deepStrictEqual(isNotNull(\"null\"), true)\n *\n * assert.deepStrictEqual(isNotNull(null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNotNull = (input)=>input !== null;\n/**\n * A guard that always fails.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNever(null), false)\n * assert.deepStrictEqual(isNever(undefined), false)\n * assert.deepStrictEqual(isNever({}), false)\n * assert.deepStrictEqual(isNever([]), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNever = (_)=>false;\n/**\n * A guard that always succeeds.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUnknown(null), true)\n * assert.deepStrictEqual(isUnknown(undefined), true)\n *\n * assert.deepStrictEqual(isUnknown({}), true)\n * assert.deepStrictEqual(isUnknown([]), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isUnknown = (_)=>true;\n/** @internal */ const isRecordOrArray = (input)=>typeof input === \"object\" && input !== null;\n/**\n * Tests if a value is an `object`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isObject({}), true)\n * assert.deepStrictEqual(isObject([]), true)\n *\n * assert.deepStrictEqual(isObject(null), false)\n * assert.deepStrictEqual(isObject(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isObject = (input)=>isRecordOrArray(input) || isFunction(input);\n/**\n * Checks whether a value is an `object` containing a specified property key.\n *\n * @category guards\n * @since 2.0.0\n */ const hasProperty = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, property)=>isObject(self) && property in self);\n/**\n * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTagged } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isTagged = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, tag)=>hasProperty(self, \"_tag\") && self[\"_tag\"] === tag);\n/**\n * A guard that succeeds when the input is `null` or `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNullable(null), true)\n * assert.deepStrictEqual(isNullable(undefined), true)\n *\n * assert.deepStrictEqual(isNullable({}), false)\n * assert.deepStrictEqual(isNullable([]), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNullable = (input)=>input === null || input === undefined;\n/**\n * A guard that succeeds when the input is not `null` or `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNullable({}), true)\n * assert.deepStrictEqual(isNotNullable([]), true)\n *\n * assert.deepStrictEqual(isNotNullable(null), false)\n * assert.deepStrictEqual(isNotNullable(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isNotNullable = (input)=>input !== null && input !== undefined;\n/**\n * A guard that succeeds when the input is an `Error`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isError } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isError(new Error()), true)\n *\n * assert.deepStrictEqual(isError(null), false)\n * assert.deepStrictEqual(isError({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isError = (input)=>input instanceof Error;\n/**\n * A guard that succeeds when the input is a `Uint8Array`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.deepStrictEqual(isUint8Array(null), false)\n * assert.deepStrictEqual(isUint8Array({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isUint8Array = (input)=>input instanceof Uint8Array;\n/**\n * A guard that succeeds when the input is a `Date`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isDate(new Date()), true)\n *\n * assert.deepStrictEqual(isDate(null), false)\n * assert.deepStrictEqual(isDate({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isDate = (input)=>input instanceof Date;\n/**\n * A guard that succeeds when the input is an `Iterable`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isIterable([]), true)\n * assert.deepStrictEqual(isIterable(new Set()), true)\n *\n * assert.deepStrictEqual(isIterable(null), false)\n * assert.deepStrictEqual(isIterable({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isIterable = (input)=>hasProperty(input, Symbol.iterator);\n/**\n * A guard that succeeds when the input is a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isRecord({}), true)\n * assert.deepStrictEqual(isRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isRecord([]), false)\n * assert.deepStrictEqual(isRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isRecord(null), false)\n * assert.deepStrictEqual(isRecord(undefined), false)\n * assert.deepStrictEqual(isRecord(() => null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isRecord = (input)=>isRecordOrArray(input) && !Array.isArray(input);\n/**\n * A guard that succeeds when the input is a readonly record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isReadonlyRecord({}), true)\n * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isReadonlyRecord([]), false)\n * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isReadonlyRecord(null), false)\n * assert.deepStrictEqual(isReadonlyRecord(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isReadonlyRecord = isRecord;\n/**\n * A guard that succeeds when the input is a Promise.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isPromise({}), false)\n * assert.deepStrictEqual(isPromise(Promise.resolve(\"hello\")), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isPromise = (input)=>hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch);\n/**\n * @category guards\n * @since 2.0.0\n */ const isPromiseLike = (input)=>hasProperty(input, \"then\") && isFunction(input.then);\n/**\n * Tests if a value is a `RegExp`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * assert.deepStrictEqual(Predicate.isRegExp(/a/), true)\n * assert.deepStrictEqual(Predicate.isRegExp(\"a\"), false)\n * ```\n *\n * @category guards\n * @since 3.9.0\n */ const isRegExp = (input)=>input instanceof RegExp;\n/**\n * @since 2.0.0\n */ const compose = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (ab, bc)=>(a)=>ab(a) && bc(a));\n/**\n * @category combining\n * @since 2.0.0\n */ const product = (self, that)=>([a, b])=>self(a) && that(b);\n/**\n * @category combining\n * @since 2.0.0\n */ const all = (collection)=>{\n    return (as)=>{\n        let collectionIndex = 0;\n        for (const p of collection){\n            if (collectionIndex >= as.length) {\n                break;\n            }\n            if (p(as[collectionIndex]) === false) {\n                return false;\n            }\n            collectionIndex++;\n        }\n        return true;\n    };\n};\n/**\n * @category combining\n * @since 2.0.0\n */ const productMany = (self, collection)=>{\n    const rest = all(collection);\n    return ([head, ...tail])=>self(head) === false ? false : rest(tail);\n};\n/**\n * Similar to `Promise.all` but operates on `Predicate`s.\n *\n * ```ts skip-type-checking\n * [Refinement<A, B>, Refinement<C, D>, ...] -> Refinement<[A, C, ...], [B, D, ...]>\n * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n * [Refinement<A, B>, Predicate<C>, ...] -> Refinement<[A, C, ...], [B, C, ...]>\n * ```\n *\n * @since 2.0.0\n */ const tuple = (...elements)=>all(elements);\n/**\n * ```ts skip-type-checking\n * { ab: Refinement<A, B>; cd: Refinement<C, D>, ... } -> Refinement<{ ab: A; cd: C; ... }, { ab: B; cd: D; ... }>\n * { a: Predicate<A, B>; b: Predicate<B>, ... } -> Predicate<{ a: A; b: B; ... }>\n * { ab: Refinement<A, B>; c: Predicate<C>, ... } -> Refinement<{ ab: A; c: C; ... }, { ab: B; c: С; ... }>\n * ```\n *\n * @since 2.0.0\n */ const struct = (fields)=>{\n    const keys = Object.keys(fields);\n    return (a)=>{\n        for (const key of keys){\n            if (!fields[key](a[key])) {\n                return false;\n            }\n        }\n        return true;\n    };\n};\n/**\n * Negates the result of a given predicate.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate, Number } from \"effect\"\n *\n * const isPositive = Predicate.not(Number.lessThan(0))\n *\n * assert.deepStrictEqual(isPositive(-1), false)\n * assert.deepStrictEqual(isPositive(0), true)\n * assert.deepStrictEqual(isPositive(1), true)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */ const not = (self)=>(a)=>!self(a);\n/**\n * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate, Number } from \"effect\"\n *\n * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n *\n * assert.deepStrictEqual(nonZero(-1), true)\n * assert.deepStrictEqual(nonZero(0), false)\n * assert.deepStrictEqual(nonZero(1), true)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */ const or = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>(a)=>self(a) || that(a));\n/**\n * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const minLength = (n: number) => (s: string) => s.length >= n\n * const maxLength = (n: number) => (s: string) => s.length <= n\n *\n * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n *\n * assert.deepStrictEqual(length(2)(\"aa\"), true)\n * assert.deepStrictEqual(length(2)(\"a\"), false)\n * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */ const and = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>(a)=>self(a) && that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */ const xor = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>(a)=>self(a) !== that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */ const eqv = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>(a)=>self(a) === that(a));\n/**\n * Represents the logical implication combinator for predicates. In formal\n * logic, the implication operator `->` denotes that if the first proposition\n * (antecedent) is true, then the second proposition (consequent) must also be\n * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n * the first predicate holds, then the second predicate must hold\n * for the given context.\n *\n * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n *\n * Note that if the antecedent is `false`, the result is `true` by default\n * because the outcome of the consequent cannot be determined.\n *\n * This function is useful in situations where you need to enforce rules or\n * constraints that are contingent on certain conditions.\n * It proves especially helpful in defining property tests.\n *\n * The example below illustrates the transitive property of order using the\n * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n * must be true.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * type Triple = {\n *   readonly a: number\n *   readonly b: number\n *   readonly c: number\n * }\n *\n * const transitivity = Predicate.implies(\n *   // antecedent\n *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n *   // consequent\n *   (input: Triple) => input.a <= input.c\n * )\n *\n * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n * // antecedent is `false`, so the result is `true`\n * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */ const implies = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (antecedent, consequent)=>(a)=>antecedent(a) ? consequent(a) : true);\n/**\n * @category combinators\n * @since 2.0.0\n */ const nor = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>(a)=>!(self(a) || that(a)));\n/**\n * @category combinators\n * @since 2.0.0\n */ const nand = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>(a)=>!(self(a) && that(a)));\n/**\n * @category elements\n * @since 2.0.0\n */ const every = (collection)=>(a)=>{\n        for (const p of collection){\n            if (!p(a)) {\n                return false;\n            }\n        }\n        return true;\n    };\n/**\n * @category elements\n * @since 2.0.0\n */ const some = (collection)=>(a)=>{\n        for (const p of collection){\n            if (p(a)) {\n                return true;\n            }\n        }\n        return false;\n    }; //# sourceMappingURL=Predicate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Predicate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Record.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Record.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collect: () => (/* binding */ collect),\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   findFirst: () => (/* binding */ findFirst),\n/* harmony export */   fromEntries: () => (/* binding */ fromEntries),\n/* harmony export */   fromIterableBy: () => (/* binding */ fromIterableBy),\n/* harmony export */   fromIterableWith: () => (/* binding */ fromIterableWith),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLefts: () => (/* binding */ getLefts),\n/* harmony export */   getRights: () => (/* binding */ getRights),\n/* harmony export */   getSomes: () => (/* binding */ getSomes),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   isEmptyReadonlyRecord: () => (/* binding */ isEmptyReadonlyRecord),\n/* harmony export */   isEmptyRecord: () => (/* binding */ isEmptyRecord),\n/* harmony export */   isSubrecord: () => (/* binding */ isSubrecord),\n/* harmony export */   isSubrecordBy: () => (/* binding */ isSubrecordBy),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapEntries: () => (/* binding */ mapEntries),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys),\n/* harmony export */   modify: () => (/* binding */ modify),\n/* harmony export */   modifyOption: () => (/* binding */ modifyOption),\n/* harmony export */   partition: () => (/* binding */ partition),\n/* harmony export */   partitionMap: () => (/* binding */ partitionMap),\n/* harmony export */   pop: () => (/* binding */ pop),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   replace: () => (/* binding */ replace),\n/* harmony export */   replaceOption: () => (/* binding */ replaceOption),\n/* harmony export */   separate: () => (/* binding */ separate),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   singleton: () => (/* binding */ singleton),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   toEntries: () => (/* binding */ toEntries),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   values: () => (/* binding */ values)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */ \n\n\n\n/**\n * Creates a new, empty record.\n *\n * @category constructors\n * @since 2.0.0\n */ const empty = ()=>({});\n/**\n * Determine if a record is empty.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmptyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyRecord({}), true);\n * assert.deepStrictEqual(isEmptyRecord({ a: 3 }), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isEmptyRecord = (self)=>keys(self).length === 0;\n/**\n * Determine if a record is empty.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmptyReadonlyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyRecord({}), true);\n * assert.deepStrictEqual(isEmptyReadonlyRecord({ a: 3 }), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */ const isEmptyReadonlyRecord = isEmptyRecord;\n/**\n * Takes an iterable and a projection function and returns a record.\n * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromIterableWith } from \"effect/Record\"\n *\n * const input = [1, 2, 3, 4]\n *\n * assert.deepStrictEqual(\n *   fromIterableWith(input, a => [String(a), a * 2]),\n *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n * )\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const fromIterableWith = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = empty();\n    for (const a of self){\n        const [k, b] = f(a);\n        out[k] = b;\n    }\n    return out;\n});\n/**\n * Creates a new record from an iterable, utilizing the provided function to determine the key for each element.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromIterableBy } from \"effect/Record\"\n *\n * const users = [\n *   { id: \"2\", name: \"name2\" },\n *   { id: \"1\", name: \"name1\" }\n * ]\n *\n * assert.deepStrictEqual(\n *   fromIterableBy(users, user => user.id),\n *   {\n *     \"2\": { id: \"2\", name: \"name2\" },\n *     \"1\": { id: \"1\", name: \"name1\" }\n *   }\n * )\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const fromIterableBy = (items, f)=>fromIterableWith(items, (a)=>[\n            f(a),\n            a\n        ]);\n/**\n * Builds a record from an iterable of key-value pairs.\n *\n * If there are conflicting keys when using `fromEntries`, the last occurrence of the key/value pair will overwrite the\n * previous ones. So the resulting record will only have the value of the last occurrence of each key.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromEntries } from \"effect/Record\"\n *\n * const input: Array<[string, number]> = [[\"a\", 1], [\"b\", 2]]\n *\n * assert.deepStrictEqual(fromEntries(input), { a: 1, b: 2 })\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */ const fromEntries = Object.fromEntries;\n/**\n * Transforms the values of a record into an `Array` with a custom mapping function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { collect } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */ const collect = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = [];\n    for (const key of keys(self)){\n        out.push(f(key, self[key]));\n    }\n    return out;\n});\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { toEntries } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(toEntries(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */ const toEntries = /*#__PURE__*/ collect((key, value)=>[\n        key,\n        value\n    ]);\n/**\n * Returns the number of key/value pairs in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { size } from \"effect/Record\";\n *\n * assert.deepStrictEqual(size({ a: \"a\", b: 1, c: true }), 3);\n * ```\n *\n * @since 2.0.0\n */ const size = (self)=>keys(self).length;\n/**\n * Check if a given `key` exists in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { empty, has } from \"effect/Record\"\n *\n * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n * ```\n *\n * @since 2.0.0\n */ const has = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key)=>Object.prototype.hasOwnProperty.call(self, key));\n/**\n * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n *\n * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n * ```\n *\n * @since 2.0.0\n */ const get = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key)=>has(self, key) ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(self[key]) : _Option_js__WEBPACK_IMPORTED_MODULE_1__.none());\n/**\n * Apply a function to the element at the specified key, creating a new record.\n * If the key does not exist, the record is returned unchanged.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 }, 'a', f),\n *  { a: 6 }\n * )\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n *  { a: 3 }\n * )\n * ```\n *\n * @since 2.0.0\n */ const modify = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, f)=>{\n    if (!has(self, key)) {\n        return {\n            ...self\n        };\n    }\n    return {\n        ...self,\n        [key]: f(self[key])\n    };\n});\n/**\n * Apply a function to the element at the specified key, creating a new record,\n * or return `None` if the key doesn't exist.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 }, 'a', f),\n *  Option.some({ a: 6 })\n * )\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n *  Option.none()\n * )\n * ```\n *\n * @since 2.0.0\n */ const modifyOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, f)=>{\n    if (!has(self, key)) {\n        return _Option_js__WEBPACK_IMPORTED_MODULE_1__.none();\n    }\n    return _Option_js__WEBPACK_IMPORTED_MODULE_1__.some({\n        ...self,\n        [key]: f(self[key])\n    });\n});\n/**\n * Replaces a value in the record with the new value passed as parameter.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n *   Option.some({ a: 10, b: 2, c: 3 })\n * )\n * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n * ```\n *\n * @since 2.0.0\n */ const replaceOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, b)=>modifyOption(self, key, ()=>b));\n/**\n * If the given key exists in the record, returns a new record with the key removed,\n * otherwise returns a copy of the original record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { remove } from \"effect/Record\"\n *\n * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n * ```\n *\n * @since 2.0.0\n */ const remove = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key)=>{\n    if (!has(self, key)) {\n        return {\n            ...self\n        };\n    }\n    const out = {\n        ...self\n    };\n    delete out[key];\n    return out;\n});\n/**\n * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n * of a tuple with the value and the record with the removed property.\n * If the key is not present, returns `O.none`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n * ```\n *\n * @category record\n * @since 2.0.0\n */ const pop = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key)=>has(self, key) ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.some([\n        self[key],\n        remove(self, key)\n    ]) : _Option_js__WEBPACK_IMPORTED_MODULE_1__.none());\n/**\n * Maps a record into another record by applying a transformation function to each of its values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { map } from \"effect/Record\"\n *\n * const f = (n: number) => `-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n *\n * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */ const map = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = {\n        ...self\n    };\n    for (const key of keys(self)){\n        out[key] = f(self[key], key);\n    }\n    return out;\n});\n/**\n * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapKeys } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */ const mapKeys = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = {};\n    for (const key of keys(self)){\n        const a = self[key];\n        out[f(key, a)] = a;\n    }\n    return out;\n});\n/**\n * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapEntries } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */ const mapEntries = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = {};\n    for (const key of keys(self)){\n        const [k, b] = f(self[key], key);\n        out[k] = b;\n    }\n    return out;\n});\n/**\n * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n * If the function returns `Some`, the key-value pair is included in the output record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n * ```\n *\n * @since 2.0.0\n */ const filterMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const out = empty();\n    for (const key of keys(self)){\n        const o = f(self[key], key);\n        if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(o)) {\n            out[key] = o.value;\n        }\n    }\n    return out;\n});\n/**\n * Selects properties from a record whose values match the given predicate.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { filter } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3, d: 4 }\n * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const filter = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    const out = empty();\n    for (const key of keys(self)){\n        if (predicate(self[key], key)) {\n            out[key] = self[key];\n        }\n    }\n    return out;\n});\n/**\n * Given a record with `Option` values, returns a new record containing only the `Some` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getSomes({ a: Option.some(1), b: Option.none(), c: Option.some(2) }),\n *   { a: 1, c: 2 }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getSomes = /*#__PURE__*/ filterMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Given a record with `Either` values, returns a new record containing only the `Left` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getLefts({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { b: \"err\" }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getLefts = (self)=>{\n    const out = empty();\n    for (const key of keys(self)){\n        const value = self[key];\n        if (_Either_js__WEBPACK_IMPORTED_MODULE_2__.isLeft(value)) {\n            out[key] = value.left;\n        }\n    }\n    return out;\n};\n/**\n * Given a record with `Either` values, returns a new record containing only the `Right` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getRights({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { a: 1, c: 2 }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const getRights = (self)=>{\n    const out = empty();\n    for (const key of keys(self)){\n        const value = self[key];\n        if (_Either_js__WEBPACK_IMPORTED_MODULE_2__.isRight(value)) {\n            out[key] = value.right;\n        }\n    }\n    return out;\n};\n/**\n * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const partitionMap = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const left = empty();\n    const right = empty();\n    for (const key of keys(self)){\n        const e = f(self[key], key);\n        if (_Either_js__WEBPACK_IMPORTED_MODULE_2__.isLeft(e)) {\n            left[key] = e.left;\n        } else {\n            right[key] = e.right;\n        }\n    }\n    return [\n        left,\n        right\n    ];\n});\n/**\n * Partitions a record of `Either` values into two separate records,\n * one with the `Left` values and one with the `Right` values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.separate({ a: Either.left(\"e\"), b: Either.right(1) }),\n *   [{ a: \"e\" }, { b: 1 }]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const separate = /*#__PURE__*/ partitionMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Partitions a record into two separate records based on the result of a predicate function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { partition } from \"effect/Record\"\n *\n * assert.deepStrictEqual(\n *   partition({ a: 1, b: 3 }, (n) => n > 2),\n *   [{ a: 1 }, { b: 3 }]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */ const partition = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    const left = empty();\n    const right = empty();\n    for (const key of keys(self)){\n        if (predicate(self[key], key)) {\n            right[key] = self[key];\n        } else {\n            left[key] = self[key];\n        }\n    }\n    return [\n        left,\n        right\n    ];\n});\n/**\n * Retrieve the keys of a given record as an array.\n *\n * @since 2.0.0\n */ const keys = (self)=>Object.keys(self);\n/**\n * Retrieve the values of a given record as an array.\n *\n * @since 2.0.0\n */ const values = (self)=>collect(self, (_, a)=>a);\n/**\n * Add a new key-value pair or update an existing key's value in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { set } from \"effect/Record\"\n *\n * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n * ```\n *\n * @since 2.0.0\n */ const set = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, value)=>{\n    return {\n        ...self,\n        [key]: value\n    };\n});\n/**\n * Replace a key's value in a record and return the updated record.\n * If the key does not exist in the record, a copy of the original record is returned.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record } from \"effect\"\n *\n * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n * ```\n *\n * @since 2.0.0\n */ const replace = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, value)=>{\n    if (has(self, key)) {\n        return {\n            ...self,\n            [key]: value\n        };\n    }\n    return {\n        ...self\n    };\n});\n/**\n * Check if all the keys and values in one record are also found in another record.\n *\n * @since 2.0.0\n */ const isSubrecordBy = (equivalence)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>{\n        for (const key of keys(self)){\n            if (!has(that, key) || !equivalence(self[key], that[key])) {\n                return false;\n            }\n        }\n        return true;\n    });\n/**\n * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n * This comparison uses default equality checks (`Equal.equivalence()`).\n *\n * @since 2.0.0\n */ const isSubrecord = /*#__PURE__*/ isSubrecordBy(/*#__PURE__*/ _Equal_js__WEBPACK_IMPORTED_MODULE_3__.equivalence());\n/**\n * Reduce a record to a single value by combining its entries with a specified function.\n *\n * @category folding\n * @since 2.0.0\n */ const reduce = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, zero, f)=>{\n    let out = zero;\n    for (const key of keys(self)){\n        out = f(out, self[key], key);\n    }\n    return out;\n});\n/**\n * Check if all entries in a record meet a specific condition.\n *\n * @since 2.0.0\n */ const every = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, refinement)=>{\n    for (const key of keys(self)){\n        if (!refinement(self[key], key)) {\n            return false;\n        }\n    }\n    return true;\n});\n/**\n * Check if any entry in a record meets a specific condition.\n *\n * @since 2.0.0\n */ const some = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate)=>{\n    for (const key of keys(self)){\n        if (predicate(self[key], key)) {\n            return true;\n        }\n    }\n    return false;\n});\n/**\n * Merge two records, preserving entries that exist in either of the records.\n *\n * @since 2.0.0\n */ const union = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, combine)=>{\n    if (isEmptyRecord(self)) {\n        return {\n            ...that\n        };\n    }\n    if (isEmptyRecord(that)) {\n        return {\n            ...self\n        };\n    }\n    const out = empty();\n    for (const key of keys(self)){\n        if (has(that, key)) {\n            out[key] = combine(self[key], that[key]);\n        } else {\n            out[key] = self[key];\n        }\n    }\n    for (const key of keys(that)){\n        if (!has(out, key)) {\n            out[key] = that[key];\n        }\n    }\n    return out;\n});\n/**\n * Merge two records, retaining only the entries that exist in both records.\n *\n * @since 2.0.0\n */ const intersection = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, combine)=>{\n    const out = empty();\n    if (isEmptyRecord(self) || isEmptyRecord(that)) {\n        return out;\n    }\n    for (const key of keys(self)){\n        if (has(that, key)) {\n            out[key] = combine(self[key], that[key]);\n        }\n    }\n    return out;\n});\n/**\n * Merge two records, preserving only the entries that are unique to each record.\n *\n * @since 2.0.0\n */ const difference = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>{\n    if (isEmptyRecord(self)) {\n        return {\n            ...that\n        };\n    }\n    if (isEmptyRecord(that)) {\n        return {\n            ...self\n        };\n    }\n    const out = {};\n    for (const key of keys(self)){\n        if (!has(that, key)) {\n            out[key] = self[key];\n        }\n    }\n    for (const key of keys(that)){\n        if (!has(self, key)) {\n            out[key] = that[key];\n        }\n    }\n    return out;\n});\n/**\n * Create an `Equivalence` for records using the provided `Equivalence` for values.\n *\n * @category instances\n * @since 2.0.0\n */ const getEquivalence = (equivalence)=>{\n    const is = isSubrecordBy(equivalence);\n    return (self, that)=>is(self, that) && is(that, self);\n};\n/**\n * Create a non-empty record from a single element.\n *\n * @category constructors\n * @since 2.0.0\n */ const singleton = (key, value)=>({\n        [key]: value\n    });\n/**\n * Returns the first entry that satisfies the specified\n * predicate, or `None` if no such entry exists.\n *\n * @example\n * ```ts\n * import { Record, Option } from \"effect\"\n *\n * const record = { a: 1, b: 2, c: 3 }\n * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n * console.log(result) // Option.Some([\"c\", 3])\n * ```\n *\n * @category elements\n * @since 3.14.0\n */ const findFirst = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>{\n    const k = keys(self);\n    for(let i = 0; i < k.length; i++){\n        const key = k[i];\n        if (f(self[key], key)) {\n            return _Option_js__WEBPACK_IMPORTED_MODULE_1__.some([\n                key,\n                self[key]\n            ]);\n        }\n    }\n    return _Option_js__WEBPACK_IMPORTED_MODULE_1__.none();\n}); //# sourceMappingURL=Record.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Record.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Redacted.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Redacted.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedactedTypeId: () => (/* binding */ RedactedTypeId),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   isRedacted: () => (/* binding */ isRedacted),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   unsafeWipe: () => (/* binding */ unsafeWipe),\n/* harmony export */   value: () => (/* binding */ value)\n/* harmony export */ });\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _internal_redacted_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/redacted.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/redacted.js\");\n\n\n/**\n * @since 3.3.0\n * @category symbols\n */ const RedactedTypeId = _internal_redacted_js__WEBPACK_IMPORTED_MODULE_0__.RedactedTypeId;\n/**\n * @since 3.3.0\n * @category refinements\n */ const isRedacted = _internal_redacted_js__WEBPACK_IMPORTED_MODULE_0__.isRedacted;\n/**\n * This function creates a `Redacted<A>` instance from a given value `A`,\n * securely hiding its content.\n *\n * @example\n * ```ts\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n * ```\n *\n * @since 3.3.0\n * @category constructors\n */ const make = _internal_redacted_js__WEBPACK_IMPORTED_MODULE_0__.make;\n/**\n * Retrieves the original value from a `Redacted` instance. Use this function\n * with caution, as it exposes the sensitive data.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * assert.equal(Redacted.value(API_KEY), \"1234567890\")\n * ```\n *\n * @since 3.3.0\n * @category getters\n */ const value = _internal_redacted_js__WEBPACK_IMPORTED_MODULE_0__.value;\n/**\n * Erases the underlying value of a `Redacted` instance, rendering it unusable.\n * This function is intended to ensure that sensitive data does not remain in\n * memory longer than necessary.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * assert.equal(Redacted.value(API_KEY), \"1234567890\")\n *\n * Redacted.unsafeWipe(API_KEY)\n *\n * assert.throws(() => Redacted.value(API_KEY), new Error(\"Unable to get redacted value\"))\n * ```\n *\n * @since 3.3.0\n * @category unsafe\n */ const unsafeWipe = _internal_redacted_js__WEBPACK_IMPORTED_MODULE_0__.unsafeWipe;\n/**\n * Generates an equivalence relation for `Redacted<A>` values based on an\n * equivalence relation for the underlying values `A`. This function is useful\n * for comparing `Redacted` instances without exposing their contents.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Redacted, Equivalence } from \"effect\"\n *\n * const API_KEY1 = Redacted.make(\"1234567890\")\n * const API_KEY2 = Redacted.make(\"1-34567890\")\n * const API_KEY3 = Redacted.make(\"1234567890\")\n *\n * const equivalence = Redacted.getEquivalence(Equivalence.string)\n *\n * assert.equal(equivalence(API_KEY1, API_KEY2), false)\n * assert.equal(equivalence(API_KEY1, API_KEY3), true)\n * ```\n *\n * @category equivalence\n * @since 3.3.0\n */ const getEquivalence = (isEquivalent)=>_Equivalence_js__WEBPACK_IMPORTED_MODULE_1__.make((x, y)=>isEquivalent(value(x), value(y))); //# sourceMappingURL=Redacted.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL1JlZGFjdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ0k7QUFDcEQ7OztDQUdDLEdBQ00sTUFBTUUsaUJBQWlCRCxpRUFBd0IsQ0FBQztBQUN2RDs7O0NBR0MsR0FDTSxNQUFNRSxhQUFhRiw2REFBb0IsQ0FBQztBQUMvQzs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ00sTUFBTUcsT0FBT0gsdURBQWMsQ0FBQztBQUNuQzs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNNLE1BQU1JLFFBQVFKLHdEQUFlLENBQUM7QUFDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLE1BQU1LLGFBQWFMLDZEQUFvQixDQUFDO0FBQy9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBc0JDLEdBQ00sTUFBTU0saUJBQWlCQyxDQUFBQSxlQUFnQlIsaURBQWdCLENBQUMsQ0FBQ1MsR0FBR0MsSUFBTUYsYUFBYUgsTUFBTUksSUFBSUosTUFBTUssS0FBSyxDQUMzRyxvQ0FBb0MiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9SZWRhY3RlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFcXVpdmFsZW5jZSBmcm9tIFwiLi9FcXVpdmFsZW5jZS5qc1wiO1xuaW1wb3J0ICogYXMgcmVkYWN0ZWRfIGZyb20gXCIuL2ludGVybmFsL3JlZGFjdGVkLmpzXCI7XG4vKipcbiAqIEBzaW5jZSAzLjMuMFxuICogQGNhdGVnb3J5IHN5bWJvbHNcbiAqL1xuZXhwb3J0IGNvbnN0IFJlZGFjdGVkVHlwZUlkID0gcmVkYWN0ZWRfLlJlZGFjdGVkVHlwZUlkO1xuLyoqXG4gKiBAc2luY2UgMy4zLjBcbiAqIEBjYXRlZ29yeSByZWZpbmVtZW50c1xuICovXG5leHBvcnQgY29uc3QgaXNSZWRhY3RlZCA9IHJlZGFjdGVkXy5pc1JlZGFjdGVkO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBgUmVkYWN0ZWQ8QT5gIGluc3RhbmNlIGZyb20gYSBnaXZlbiB2YWx1ZSBgQWAsXG4gKiBzZWN1cmVseSBoaWRpbmcgaXRzIGNvbnRlbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBSZWRhY3RlZCB9IGZyb20gXCJlZmZlY3RcIlxuICpcbiAqIGNvbnN0IEFQSV9LRVkgPSBSZWRhY3RlZC5tYWtlKFwiMTIzNDU2Nzg5MFwiKVxuICogYGBgXG4gKlxuICogQHNpbmNlIDMuMy4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjb25zdCBtYWtlID0gcmVkYWN0ZWRfLm1ha2U7XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgb3JpZ2luYWwgdmFsdWUgZnJvbSBhIGBSZWRhY3RlZGAgaW5zdGFuY2UuIFVzZSB0aGlzIGZ1bmN0aW9uXG4gKiB3aXRoIGNhdXRpb24sIGFzIGl0IGV4cG9zZXMgdGhlIHNlbnNpdGl2ZSBkYXRhLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gXCJub2RlOmFzc2VydFwiXG4gKiBpbXBvcnQgeyBSZWRhY3RlZCB9IGZyb20gXCJlZmZlY3RcIlxuICpcbiAqIGNvbnN0IEFQSV9LRVkgPSBSZWRhY3RlZC5tYWtlKFwiMTIzNDU2Nzg5MFwiKVxuICpcbiAqIGFzc2VydC5lcXVhbChSZWRhY3RlZC52YWx1ZShBUElfS0VZKSwgXCIxMjM0NTY3ODkwXCIpXG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMy4zLjBcbiAqIEBjYXRlZ29yeSBnZXR0ZXJzXG4gKi9cbmV4cG9ydCBjb25zdCB2YWx1ZSA9IHJlZGFjdGVkXy52YWx1ZTtcbi8qKlxuICogRXJhc2VzIHRoZSB1bmRlcmx5aW5nIHZhbHVlIG9mIGEgYFJlZGFjdGVkYCBpbnN0YW5jZSwgcmVuZGVyaW5nIGl0IHVudXNhYmxlLlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBlbnN1cmUgdGhhdCBzZW5zaXRpdmUgZGF0YSBkb2VzIG5vdCByZW1haW4gaW5cbiAqIG1lbW9yeSBsb25nZXIgdGhhbiBuZWNlc3NhcnkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSBcIm5vZGU6YXNzZXJ0XCJcbiAqIGltcG9ydCB7IFJlZGFjdGVkIH0gZnJvbSBcImVmZmVjdFwiXG4gKlxuICogY29uc3QgQVBJX0tFWSA9IFJlZGFjdGVkLm1ha2UoXCIxMjM0NTY3ODkwXCIpXG4gKlxuICogYXNzZXJ0LmVxdWFsKFJlZGFjdGVkLnZhbHVlKEFQSV9LRVkpLCBcIjEyMzQ1Njc4OTBcIilcbiAqXG4gKiBSZWRhY3RlZC51bnNhZmVXaXBlKEFQSV9LRVkpXG4gKlxuICogYXNzZXJ0LnRocm93cygoKSA9PiBSZWRhY3RlZC52YWx1ZShBUElfS0VZKSwgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGdldCByZWRhY3RlZCB2YWx1ZVwiKSlcbiAqIGBgYFxuICpcbiAqIEBzaW5jZSAzLjMuMFxuICogQGNhdGVnb3J5IHVuc2FmZVxuICovXG5leHBvcnQgY29uc3QgdW5zYWZlV2lwZSA9IHJlZGFjdGVkXy51bnNhZmVXaXBlO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gZXF1aXZhbGVuY2UgcmVsYXRpb24gZm9yIGBSZWRhY3RlZDxBPmAgdmFsdWVzIGJhc2VkIG9uIGFuXG4gKiBlcXVpdmFsZW5jZSByZWxhdGlvbiBmb3IgdGhlIHVuZGVybHlpbmcgdmFsdWVzIGBBYC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWxcbiAqIGZvciBjb21wYXJpbmcgYFJlZGFjdGVkYCBpbnN0YW5jZXMgd2l0aG91dCBleHBvc2luZyB0aGVpciBjb250ZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIGFzc2VydCBmcm9tIFwibm9kZTphc3NlcnRcIlxuICogaW1wb3J0IHsgUmVkYWN0ZWQsIEVxdWl2YWxlbmNlIH0gZnJvbSBcImVmZmVjdFwiXG4gKlxuICogY29uc3QgQVBJX0tFWTEgPSBSZWRhY3RlZC5tYWtlKFwiMTIzNDU2Nzg5MFwiKVxuICogY29uc3QgQVBJX0tFWTIgPSBSZWRhY3RlZC5tYWtlKFwiMS0zNDU2Nzg5MFwiKVxuICogY29uc3QgQVBJX0tFWTMgPSBSZWRhY3RlZC5tYWtlKFwiMTIzNDU2Nzg5MFwiKVxuICpcbiAqIGNvbnN0IGVxdWl2YWxlbmNlID0gUmVkYWN0ZWQuZ2V0RXF1aXZhbGVuY2UoRXF1aXZhbGVuY2Uuc3RyaW5nKVxuICpcbiAqIGFzc2VydC5lcXVhbChlcXVpdmFsZW5jZShBUElfS0VZMSwgQVBJX0tFWTIpLCBmYWxzZSlcbiAqIGFzc2VydC5lcXVhbChlcXVpdmFsZW5jZShBUElfS0VZMSwgQVBJX0tFWTMpLCB0cnVlKVxuICogYGBgXG4gKlxuICogQGNhdGVnb3J5IGVxdWl2YWxlbmNlXG4gKiBAc2luY2UgMy4zLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEVxdWl2YWxlbmNlID0gaXNFcXVpdmFsZW50ID0+IEVxdWl2YWxlbmNlLm1ha2UoKHgsIHkpID0+IGlzRXF1aXZhbGVudCh2YWx1ZSh4KSwgdmFsdWUoeSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlZGFjdGVkLmpzLm1hcCJdLCJuYW1lcyI6WyJFcXVpdmFsZW5jZSIsInJlZGFjdGVkXyIsIlJlZGFjdGVkVHlwZUlkIiwiaXNSZWRhY3RlZCIsIm1ha2UiLCJ2YWx1ZSIsInVuc2FmZVdpcGUiLCJnZXRFcXVpdmFsZW5jZSIsImlzRXF1aXZhbGVudCIsIngiLCJ5Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Redacted.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Tuple.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Tuple.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendElement: () => (/* binding */ appendElement),\n/* harmony export */   at: () => (/* binding */ at),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getFirst: () => (/* binding */ getFirst),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getSecond: () => (/* binding */ getSecond),\n/* harmony export */   isTupleOf: () => (/* reexport safe */ _Predicate_js__WEBPACK_IMPORTED_MODULE_3__.isTupleOf),\n/* harmony export */   isTupleOfAtLeast: () => (/* reexport safe */ _Predicate_js__WEBPACK_IMPORTED_MODULE_3__.isTupleOfAtLeast),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapBoth: () => (/* binding */ mapBoth),\n/* harmony export */   mapFirst: () => (/* binding */ mapFirst),\n/* harmony export */   mapSecond: () => (/* binding */ mapSecond),\n/* harmony export */   swap: () => (/* binding */ swap)\n/* harmony export */ });\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Order_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Order.js */ \"(ssr)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */ \n\n\n/**\n * Constructs a new tuple from the provided values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { make } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(make(1, 'hello', true), [1, 'hello', true])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */ const make = (...elements)=>elements;\n/**\n * Return the first element of a tuple.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { getFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getFirst([\"hello\", 42]), \"hello\")\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getFirst = (self)=>self[0];\n/**\n * Return the second element of a tuple.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { getSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getSecond([\"hello\", 42]), 42)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */ const getSecond = (self)=>self[1];\n/**\n * Transforms each element of tuple using the given function, treating tuple homomorphically\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Tuple } from \"effect\"\n *\n * const result = pipe(\n *   [\"a\", 1, false] as const,\n *   Tuple.map((el) => el.toString().toUpperCase())\n * )\n * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n * ```\n *\n * @category mapping\n * @since 3.9.0\n */ const map = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, fn)=>self.map((element)=>fn(element)));\n/**\n * Transforms both elements of a tuple using the given functions.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapBoth } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n *   [\"HELLO\", \"42\"]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */ const mapBoth = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, { onFirst, onSecond })=>[\n        onFirst(self[0]),\n        onSecond(self[1])\n    ]);\n/**\n * Transforms the first component of a tuple using a given function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n *   [\"HELLO\", 42]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */ const mapFirst = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>[\n        f(self[0]),\n        self[1]\n    ]);\n/**\n * Transforms the second component of a tuple using a given function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapSecond([\"hello\", 42], n => n.toString()),\n *   [\"hello\", \"42\"]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */ const mapSecond = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f)=>[\n        self[0],\n        f(self[1])\n    ]);\n/**\n * Swaps the two elements of a tuple.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { swap } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(swap([\"hello\", 42]), [42, \"hello\"])\n * ```\n *\n * @since 2.0.0\n */ const swap = (self)=>[\n        self[1],\n        self[0]\n    ];\n/**\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */ const getEquivalence = _Equivalence_js__WEBPACK_IMPORTED_MODULE_1__.tuple;\n/**\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */ const getOrder = _Order_js__WEBPACK_IMPORTED_MODULE_2__.tuple;\n/**\n * Appends an element to the end of a tuple.\n *\n * @category concatenating\n * @since 2.0.0\n */ const appendElement = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that)=>[\n        ...self,\n        that\n    ]);\n/**\n * Retrieves the element at a specified index from a tuple.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Tuple } from \"effect\"\n *\n * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n * ```\n *\n * @category getters\n * @since 3.4.0\n */ const at = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, index)=>self[index]);\n //# sourceMappingURL=Tuple.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Tuple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Utils.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenKindImpl: () => (/* binding */ GenKindImpl),\n/* harmony export */   GenKindTypeId: () => (/* binding */ GenKindTypeId),\n/* harmony export */   PCGRandom: () => (/* binding */ PCGRandom),\n/* harmony export */   SingleShotGen: () => (/* binding */ SingleShotGen),\n/* harmony export */   YieldWrap: () => (/* binding */ YieldWrap),\n/* harmony export */   YieldWrapTypeId: () => (/* binding */ YieldWrapTypeId),\n/* harmony export */   adapter: () => (/* binding */ adapter),\n/* harmony export */   internalCall: () => (/* binding */ internalCall),\n/* harmony export */   isGenKind: () => (/* binding */ isGenKind),\n/* harmony export */   isGeneratorFunction: () => (/* binding */ isGeneratorFunction),\n/* harmony export */   makeGenKind: () => (/* binding */ makeGenKind),\n/* harmony export */   structuralRegion: () => (/* binding */ structuralRegion),\n/* harmony export */   structuralRegionState: () => (/* binding */ structuralRegionState),\n/* harmony export */   yieldWrapGet: () => (/* binding */ yieldWrapGet)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/errors.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/errors.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/**\n * @since 2.0.0\n */ \n\n\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */ /**\n * @category symbols\n * @since 2.0.0\n */ const GenKindTypeId = /*#__PURE__*/ Symbol.for(\"effect/Gen/GenKind\");\n/**\n * @category predicates\n * @since 3.0.6\n */ const isGenKind = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(u) && GenKindTypeId in u;\n/**\n * @category constructors\n * @since 2.0.0\n */ class GenKindImpl {\n    constructor(/**\n   * @since 2.0.0\n   */ value){\n        /**\n   * @since 2.0.0\n   */ this[GenKindTypeId] = GenKindTypeId;\n        this.value = value;\n    }\n    /**\n   * @since 2.0.0\n   */ get _F() {\n        return _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity;\n    }\n    /**\n   * @since 2.0.0\n   */ get _R() {\n        return (_)=>_;\n    }\n    /**\n   * @since 2.0.0\n   */ get _O() {\n        return (_)=>_;\n    }\n    /**\n   * @since 2.0.0\n   */ get _E() {\n        return (_)=>_;\n    }\n    /**\n   * @since 2.0.0\n   */ [Symbol.iterator]() {\n        return new SingleShotGen(this);\n    }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */ class SingleShotGen {\n    constructor(self){\n        this.called = false;\n        this.self = self;\n    }\n    /**\n   * @since 2.0.0\n   */ next(a) {\n        return this.called ? {\n            value: a,\n            done: true\n        } : (this.called = true, {\n            value: this.self,\n            done: false\n        });\n    }\n    /**\n   * @since 2.0.0\n   */ return(a) {\n        return {\n            value: a,\n            done: true\n        };\n    }\n    /**\n   * @since 2.0.0\n   */ throw(e) {\n        throw e;\n    }\n    /**\n   * @since 2.0.0\n   */ [Symbol.iterator]() {\n        return new SingleShotGen(this.self);\n    }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */ const makeGenKind = (kind)=>new GenKindImpl(kind);\n/**\n * @category adapters\n * @since 2.0.0\n */ const adapter = ()=>function() {\n        let x = arguments[0];\n        for(let i = 1; i < arguments.length; i++){\n            x = arguments[i](x);\n        }\n        return new GenKindImpl(x);\n    };\nconst defaultIncHi = 0x14057b7e;\nconst defaultIncLo = 0xf767814f;\nconst MUL_HI = 0x5851f42d >>> 0;\nconst MUL_LO = 0x4c957f2d >>> 0;\nconst BIT_53 = 9007199254740992.0;\nconst BIT_27 = 134217728.0;\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */ class PCGRandom {\n    constructor(seedHi, seedLo, incHi, incLo){\n        if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedLo) && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedHi)) {\n            seedLo = Math.random() * 0xffffffff >>> 0;\n            seedHi = 0;\n        } else if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedLo)) {\n            seedLo = seedHi;\n            seedHi = 0;\n        }\n        if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incLo) && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incHi)) {\n            incLo = this._state ? this._state[3] : defaultIncLo;\n            incHi = this._state ? this._state[2] : defaultIncHi;\n        } else if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incLo)) {\n            incLo = incHi;\n            incHi = 0;\n        }\n        this._state = new Int32Array([\n            0,\n            0,\n            incHi >>> 0,\n            ((incLo || 0) | 1) >>> 0\n        ]);\n        this._next();\n        add64(this._state, this._state[0], this._state[1], seedHi >>> 0, seedLo >>> 0);\n        this._next();\n        return this;\n    }\n    /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */ getState() {\n        return [\n            this._state[0],\n            this._state[1],\n            this._state[2],\n            this._state[3]\n        ];\n    }\n    /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */ setState(state) {\n        this._state[0] = state[0];\n        this._state[1] = state[1];\n        this._state[2] = state[2];\n        this._state[3] = state[3] | 1;\n    }\n    /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */ integer(max) {\n        return Math.round(this.number() * Number.MAX_SAFE_INTEGER) % max;\n    }\n    /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */ number() {\n        const hi = (this._next() & 0x03ffffff) * 1.0;\n        const lo = (this._next() & 0x07ffffff) * 1.0;\n        return (hi * BIT_27 + lo) / BIT_53;\n    }\n    /** @internal */ _next() {\n        // save current state (what we'll use for this number)\n        const oldHi = this._state[0] >>> 0;\n        const oldLo = this._state[1] >>> 0;\n        // churn LCG.\n        mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO);\n        add64(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);\n        // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n        let xsHi = oldHi >>> 18;\n        let xsLo = (oldLo >>> 18 | oldHi << 14) >>> 0;\n        xsHi = (xsHi ^ oldHi) >>> 0;\n        xsLo = (xsLo ^ oldLo) >>> 0;\n        const xorshifted = (xsLo >>> 27 | xsHi << 5) >>> 0;\n        // rotate xorshifted right a random amount, based on the most sig. 5 bits\n        // bits of the old state.\n        const rot = oldHi >>> 27;\n        const rot2 = (-rot >>> 0 & 31) >>> 0;\n        return (xorshifted >>> rot | xorshifted << rot2) >>> 0;\n    }\n}\nfunction mul64(out, aHi, aLo, bHi, bLo) {\n    let c1 = (aLo >>> 16) * (bLo & 0xffff) >>> 0;\n    let c0 = (aLo & 0xffff) * (bLo >>> 16) >>> 0;\n    let lo = (aLo & 0xffff) * (bLo & 0xffff) >>> 0;\n    let hi = (aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;\n    c0 = c0 << 16 >>> 0;\n    lo = lo + c0 >>> 0;\n    if (lo >>> 0 < c0 >>> 0) {\n        hi = hi + 1 >>> 0;\n    }\n    c1 = c1 << 16 >>> 0;\n    lo = lo + c1 >>> 0;\n    if (lo >>> 0 < c1 >>> 0) {\n        hi = hi + 1 >>> 0;\n    }\n    hi = hi + Math.imul(aLo, bHi) >>> 0;\n    hi = hi + Math.imul(aHi, bLo) >>> 0;\n    out[0] = hi;\n    out[1] = lo;\n}\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(out, aHi, aLo, bHi, bLo) {\n    let hi = aHi + bHi >>> 0;\n    const lo = aLo + bLo >>> 0;\n    if (lo >>> 0 < aLo >>> 0) {\n        hi = hi + 1 | 0;\n    }\n    out[0] = hi;\n    out[1] = lo;\n}\n/**\n * @since 3.0.6\n */ const YieldWrapTypeId = /*#__PURE__*/ Symbol.for(\"effect/Utils/YieldWrap\");\n/**\n * @since 3.0.6\n */ class YieldWrap {\n    /**\n   * @since 3.0.6\n   */ #value;\n    constructor(value){\n        this.#value = value;\n    }\n    /**\n   * @since 3.0.6\n   */ [YieldWrapTypeId]() {\n        return this.#value;\n    }\n}\n/**\n * @since 3.0.6\n */ function yieldWrapGet(self) {\n    if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n        return self[YieldWrapTypeId]();\n    }\n    throw new Error((0,_internal_errors_js__WEBPACK_IMPORTED_MODULE_2__.getBugErrorMessage)(\"yieldWrapGet\"));\n}\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */ const structuralRegionState = /*#__PURE__*/ (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_3__.globalValue)(\"effect/Utils/isStructuralRegion\", ()=>({\n        enabled: false,\n        tester: undefined\n    }));\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */ const structuralRegion = (body, tester)=>{\n    const current = structuralRegionState.enabled;\n    const currentTester = structuralRegionState.tester;\n    structuralRegionState.enabled = true;\n    if (tester) {\n        structuralRegionState.tester = tester;\n    }\n    try {\n        return body();\n    } finally{\n        structuralRegionState.enabled = current;\n        structuralRegionState.tester = currentTester;\n    }\n};\nconst standard = {\n    effect_internal_function: (body)=>{\n        return body();\n    }\n};\nconst forced = {\n    effect_internal_function: (body)=>{\n        try {\n            return body();\n        } finally{\n        //\n        }\n    }\n};\nconst isNotOptimizedAway = /*#__PURE__*/ standard.effect_internal_function(()=>new Error().stack)?.includes(\"effect_internal_function\") === true;\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */ const internalCall = isNotOptimizedAway ? standard.effect_internal_function : forced.effect_internal_function;\nconst genConstructor = (function*() {}).constructor;\n/**\n * @since 3.11.0\n */ const isGeneratorFunction = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(u) && u.constructor === genConstructor; //# sourceMappingURL=Utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/array.js":
/*!********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/array.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */ /** @internal */ const isNonEmptyArray = (self)=>self.length > 0; //# sourceMappingURL=array.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNELGNBQWMsR0FDUCxNQUFNQSxrQkFBa0JDLENBQUFBLE9BQVFBLEtBQUtDLE1BQU0sR0FBRyxFQUFFLENBQ3ZELGlDQUFpQyIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2FycmF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc05vbkVtcHR5QXJyYXkgPSBzZWxmID0+IHNlbGYubGVuZ3RoID4gMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5LmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbkVtcHR5QXJyYXkiLCJzZWxmIiwibGVuZ3RoIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/context.js":
/*!**********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/context.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextProto: () => (/* binding */ ContextProto),\n/* harmony export */   Reference: () => (/* binding */ Reference),\n/* harmony export */   ReferenceProto: () => (/* binding */ ReferenceProto),\n/* harmony export */   ReferenceTypeId: () => (/* binding */ ReferenceTypeId),\n/* harmony export */   STMTypeId: () => (/* binding */ STMTypeId),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   TagProto: () => (/* binding */ TagProto),\n/* harmony export */   TagTypeId: () => (/* binding */ TagTypeId),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getOption: () => (/* binding */ getOption),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   isContext: () => (/* binding */ isContext),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makeContext: () => (/* binding */ makeContext),\n/* harmony export */   makeGenericTag: () => (/* binding */ makeGenericTag),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   mergeAll: () => (/* binding */ mergeAll),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet),\n/* harmony export */   unsafeGetReference: () => (/* binding */ unsafeGetReference)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _option_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n\n\n\n\n\n\n\n\n\n/** @internal */ const TagTypeId = /*#__PURE__*/ Symbol.for(\"effect/Context/Tag\");\n/** @internal */ const ReferenceTypeId = /*#__PURE__*/ Symbol.for(\"effect/Context/Reference\");\n/** @internal */ const STMSymbolKey = \"effect/STM\";\n/** @internal */ const STMTypeId = /*#__PURE__*/ Symbol.for(STMSymbolKey);\n/** @internal */ const TagProto = {\n    ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n    _op: \"Tag\",\n    [STMTypeId]: _effectable_js__WEBPACK_IMPORTED_MODULE_0__.effectVariance,\n    [TagTypeId]: {\n        _Service: (_)=>_,\n        _Identifier: (_)=>_\n    },\n    toString () {\n        return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"Tag\",\n            key: this.key,\n            stack: this.stack\n        };\n    },\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol] () {\n        return this.toJSON();\n    },\n    of (self) {\n        return self;\n    },\n    context (self) {\n        return make(this, self);\n    }\n};\nconst ReferenceProto = {\n    ...TagProto,\n    [ReferenceTypeId]: ReferenceTypeId\n};\n/** @internal */ const makeGenericTag = (key)=>{\n    const limit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 2;\n    const creationError = new Error();\n    Error.stackTraceLimit = limit;\n    const tag = Object.create(TagProto);\n    Object.defineProperty(tag, \"stack\", {\n        get () {\n            return creationError.stack;\n        }\n    });\n    tag.key = key;\n    return tag;\n};\n/** @internal */ const Tag = (id)=>()=>{\n        const limit = Error.stackTraceLimit;\n        Error.stackTraceLimit = 2;\n        const creationError = new Error();\n        Error.stackTraceLimit = limit;\n        function TagClass() {}\n        Object.setPrototypeOf(TagClass, TagProto);\n        TagClass.key = id;\n        Object.defineProperty(TagClass, \"stack\", {\n            get () {\n                return creationError.stack;\n            }\n        });\n        return TagClass;\n    };\n/** @internal */ const Reference = ()=>(id, options)=>{\n        const limit = Error.stackTraceLimit;\n        Error.stackTraceLimit = 2;\n        const creationError = new Error();\n        Error.stackTraceLimit = limit;\n        function ReferenceClass() {}\n        Object.setPrototypeOf(ReferenceClass, ReferenceProto);\n        ReferenceClass.key = id;\n        ReferenceClass.defaultValue = options.defaultValue;\n        Object.defineProperty(ReferenceClass, \"stack\", {\n            get () {\n                return creationError.stack;\n            }\n        });\n        return ReferenceClass;\n    };\n/** @internal */ const TypeId = /*#__PURE__*/ Symbol.for(\"effect/Context\");\n/** @internal */ const ContextProto = {\n    [TypeId]: {\n        _Services: (_)=>_\n    },\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol] (that) {\n        if (isContext(that)) {\n            if (this.unsafeMap.size === that.unsafeMap.size) {\n                for (const k of this.unsafeMap.keys()){\n                    if (!that.unsafeMap.has(k) || !_Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol] () {\n        return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_3__.number(this.unsafeMap.size));\n    },\n    pipe () {\n        return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n    },\n    toString () {\n        return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"Context\",\n            services: Array.from(this.unsafeMap).map(_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)\n        };\n    },\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol] () {\n        return this.toJSON();\n    }\n};\n/** @internal */ const makeContext = (unsafeMap)=>{\n    const context = Object.create(ContextProto);\n    context.unsafeMap = unsafeMap;\n    return context;\n};\nconst serviceNotFoundError = (tag)=>{\n    const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : \"\"}`);\n    if (tag.stack) {\n        const lines = tag.stack.split(\"\\n\");\n        if (lines.length > 2) {\n            const afterAt = lines[2].match(/at (.*)/);\n            if (afterAt) {\n                error.message = error.message + ` (defined at ${afterAt[1]})`;\n            }\n        }\n    }\n    if (error.stack) {\n        const lines = error.stack.split(\"\\n\");\n        lines.splice(1, 3);\n        error.stack = lines.join(\"\\n\");\n    }\n    return error;\n};\n/** @internal */ const isContext = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.hasProperty)(u, TypeId);\n/** @internal */ const isTag = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.hasProperty)(u, TagTypeId);\n/** @internal */ const isReference = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.hasProperty)(u, ReferenceTypeId);\nconst _empty = /*#__PURE__*/ makeContext(/*#__PURE__*/ new Map());\n/** @internal */ const empty = ()=>_empty;\n/** @internal */ const make = (tag, service)=>makeContext(new Map([\n        [\n            tag.key,\n            service\n        ]\n    ]));\n/** @internal */ const add = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(3, (self, tag, service)=>{\n    const map = new Map(self.unsafeMap);\n    map.set(tag.key, service);\n    return makeContext(map);\n});\nconst defaultValueCache = /*#__PURE__*/ (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_7__.globalValue)(\"effect/Context/defaultValueCache\", ()=>new Map());\nconst getDefaultValue = (tag)=>{\n    if (defaultValueCache.has(tag.key)) {\n        return defaultValueCache.get(tag.key);\n    }\n    const value = tag.defaultValue();\n    defaultValueCache.set(tag.key, value);\n    return value;\n};\n/** @internal */ const unsafeGetReference = (self, tag)=>{\n    return self.unsafeMap.has(tag.key) ? self.unsafeMap.get(tag.key) : getDefaultValue(tag);\n};\n/** @internal */ const unsafeGet = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, tag)=>{\n    if (!self.unsafeMap.has(tag.key)) {\n        if (ReferenceTypeId in tag) return getDefaultValue(tag);\n        throw serviceNotFoundError(tag);\n    }\n    return self.unsafeMap.get(tag.key);\n});\n/** @internal */ const get = unsafeGet;\n/** @internal */ const getOrElse = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(3, (self, tag, orElse)=>{\n    if (!self.unsafeMap.has(tag.key)) {\n        return isReference(tag) ? getDefaultValue(tag) : orElse();\n    }\n    return self.unsafeMap.get(tag.key);\n});\n/** @internal */ const getOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, tag)=>{\n    if (!self.unsafeMap.has(tag.key)) {\n        return isReference(tag) ? _option_js__WEBPACK_IMPORTED_MODULE_8__.some(getDefaultValue(tag)) : _option_js__WEBPACK_IMPORTED_MODULE_8__.none;\n    }\n    return _option_js__WEBPACK_IMPORTED_MODULE_8__.some(self.unsafeMap.get(tag.key));\n});\n/** @internal */ const merge = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, that)=>{\n    const map = new Map(self.unsafeMap);\n    for (const [tag, s] of that.unsafeMap){\n        map.set(tag, s);\n    }\n    return makeContext(map);\n});\n/** @internal */ const mergeAll = (...ctxs)=>{\n    const map = new Map();\n    for (const ctx of ctxs){\n        for (const [tag, s] of ctx.unsafeMap){\n            map.set(tag, s);\n        }\n    }\n    return makeContext(map);\n};\n/** @internal */ const pick = (...tags)=>(self)=>{\n        const tagSet = new Set(tags.map((_)=>_.key));\n        const newEnv = new Map();\n        for (const [tag, s] of self.unsafeMap.entries()){\n            if (tagSet.has(tag)) {\n                newEnv.set(tag, s);\n            }\n        }\n        return makeContext(newEnv);\n    };\n/** @internal */ const omit = (...tags)=>(self)=>{\n        const newEnv = new Map(self.unsafeMap);\n        for (const tag of tags){\n            newEnv.delete(tag.key);\n        }\n        return makeContext(newEnv);\n    }; //# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js":
/*!*************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/doNotation.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   let_: () => (/* binding */ let_)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n\n/** @internal */ const let_ = (map)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, name, f)=>map(self, (a)=>({\n                ...a,\n                [name]: f(a)\n            })));\n/** @internal */ const bindTo = (map)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, name)=>map(self, (a)=>({\n                [name]: a\n            })));\n/** @internal */ const bind = (map, flatMap)=>(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, name, f)=>flatMap(self, (a)=>map(f(a), (b)=>({\n                    ...a,\n                    [name]: b\n                })))); //# sourceMappingURL=doNotation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2RvTm90YXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzQztBQUN0QyxjQUFjLEdBQ1AsTUFBTUMsT0FBT0MsQ0FBQUEsTUFBT0Ysa0RBQUlBLENBQUMsR0FBRyxDQUFDRyxNQUFNQyxNQUFNQyxJQUFNSCxJQUFJQyxNQUFNRyxDQUFBQSxJQUFNO2dCQUNwRSxHQUFHQSxDQUFDO2dCQUNKLENBQUNGLEtBQUssRUFBRUMsRUFBRUM7WUFDWixLQUFLO0FBQ0wsY0FBYyxHQUNQLE1BQU1DLFNBQVNMLENBQUFBLE1BQU9GLGtEQUFJQSxDQUFDLEdBQUcsQ0FBQ0csTUFBTUMsT0FBU0YsSUFBSUMsTUFBTUcsQ0FBQUEsSUFBTTtnQkFDbkUsQ0FBQ0YsS0FBSyxFQUFFRTtZQUNWLEtBQUs7QUFDTCxjQUFjLEdBQ1AsTUFBTUUsT0FBTyxDQUFDTixLQUFLTyxVQUFZVCxrREFBSUEsQ0FBQyxHQUFHLENBQUNHLE1BQU1DLE1BQU1DLElBQU1JLFFBQVFOLE1BQU1HLENBQUFBLElBQUtKLElBQUlHLEVBQUVDLElBQUlJLENBQUFBLElBQU07b0JBQ2xHLEdBQUdKLENBQUM7b0JBQ0osQ0FBQ0YsS0FBSyxFQUFFTTtnQkFDVixNQUFNLENBQ04sc0NBQXNDIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvZG9Ob3RhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkdWFsIH0gZnJvbSBcIi4uL0Z1bmN0aW9uLmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbGV0XyA9IG1hcCA9PiBkdWFsKDMsIChzZWxmLCBuYW1lLCBmKSA9PiBtYXAoc2VsZiwgYSA9PiAoe1xuICAuLi5hLFxuICBbbmFtZV06IGYoYSlcbn0pKSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgYmluZFRvID0gbWFwID0+IGR1YWwoMiwgKHNlbGYsIG5hbWUpID0+IG1hcChzZWxmLCBhID0+ICh7XG4gIFtuYW1lXTogYVxufSkpKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBiaW5kID0gKG1hcCwgZmxhdE1hcCkgPT4gZHVhbCgzLCAoc2VsZiwgbmFtZSwgZikgPT4gZmxhdE1hcChzZWxmLCBhID0+IG1hcChmKGEpLCBiID0+ICh7XG4gIC4uLmEsXG4gIFtuYW1lXTogYlxufSkpKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb05vdGF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJkdWFsIiwibGV0XyIsIm1hcCIsInNlbGYiLCJuYW1lIiwiZiIsImEiLCJiaW5kVG8iLCJiaW5kIiwiZmxhdE1hcCIsImIiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/effectable.js":
/*!*************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/effectable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base: () => (/* binding */ Base),\n/* harmony export */   ChannelTypeId: () => (/* binding */ ChannelTypeId),\n/* harmony export */   CommitPrototype: () => (/* binding */ CommitPrototype),\n/* harmony export */   EffectPrototype: () => (/* binding */ EffectPrototype),\n/* harmony export */   EffectTypeId: () => (/* binding */ EffectTypeId),\n/* harmony export */   SinkTypeId: () => (/* binding */ SinkTypeId),\n/* harmony export */   StreamTypeId: () => (/* binding */ StreamTypeId),\n/* harmony export */   StructuralBase: () => (/* binding */ StructuralBase),\n/* harmony export */   StructuralCommitPrototype: () => (/* binding */ StructuralCommitPrototype),\n/* harmony export */   StructuralPrototype: () => (/* binding */ StructuralPrototype),\n/* harmony export */   effectVariance: () => (/* binding */ effectVariance)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/* harmony import */ var _opCodes_effect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./opCodes/effect.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/version.js\");\n\n\n\n\n\n\n/** @internal */ const EffectTypeId = /*#__PURE__*/ Symbol.for(\"effect/Effect\");\n/** @internal */ const StreamTypeId = /*#__PURE__*/ Symbol.for(\"effect/Stream\");\n/** @internal */ const SinkTypeId = /*#__PURE__*/ Symbol.for(\"effect/Sink\");\n/** @internal */ const ChannelTypeId = /*#__PURE__*/ Symbol.for(\"effect/Channel\");\n/** @internal */ const effectVariance = {\n    /* c8 ignore next */ _R: (_)=>_,\n    /* c8 ignore next */ _E: (_)=>_,\n    /* c8 ignore next */ _A: (_)=>_,\n    _V: /*#__PURE__*/ _version_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentVersion()\n};\nconst sinkVariance = {\n    /* c8 ignore next */ _A: (_)=>_,\n    /* c8 ignore next */ _In: (_)=>_,\n    /* c8 ignore next */ _L: (_)=>_,\n    /* c8 ignore next */ _E: (_)=>_,\n    /* c8 ignore next */ _R: (_)=>_\n};\nconst channelVariance = {\n    /* c8 ignore next */ _Env: (_)=>_,\n    /* c8 ignore next */ _InErr: (_)=>_,\n    /* c8 ignore next */ _InElem: (_)=>_,\n    /* c8 ignore next */ _InDone: (_)=>_,\n    /* c8 ignore next */ _OutErr: (_)=>_,\n    /* c8 ignore next */ _OutElem: (_)=>_,\n    /* c8 ignore next */ _OutDone: (_)=>_\n};\n/** @internal */ const EffectPrototype = {\n    [EffectTypeId]: effectVariance,\n    [StreamTypeId]: effectVariance,\n    [SinkTypeId]: sinkVariance,\n    [ChannelTypeId]: channelVariance,\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_1__.symbol] (that) {\n        return this === that;\n    },\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_2__.symbol] () {\n        return _Hash_js__WEBPACK_IMPORTED_MODULE_2__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_2__.random(this));\n    },\n    [Symbol.iterator] () {\n        return new _Utils_js__WEBPACK_IMPORTED_MODULE_3__.SingleShotGen(new _Utils_js__WEBPACK_IMPORTED_MODULE_3__.YieldWrap(this));\n    },\n    pipe () {\n        return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n    }\n};\n/** @internal */ const StructuralPrototype = {\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_2__.symbol] () {\n        return _Hash_js__WEBPACK_IMPORTED_MODULE_2__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_2__.structure(this));\n    },\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_1__.symbol] (that) {\n        const selfKeys = Object.keys(this);\n        const thatKeys = Object.keys(that);\n        if (selfKeys.length !== thatKeys.length) {\n            return false;\n        }\n        for (const key of selfKeys){\n            if (!(key in that && _Equal_js__WEBPACK_IMPORTED_MODULE_1__.equals(this[key], that[key]))) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n/** @internal */ const CommitPrototype = {\n    ...EffectPrototype,\n    _op: _opCodes_effect_js__WEBPACK_IMPORTED_MODULE_5__.OP_COMMIT\n};\n/** @internal */ const StructuralCommitPrototype = {\n    ...CommitPrototype,\n    ...StructuralPrototype\n};\n/** @internal */ const Base = /*#__PURE__*/ function() {\n    function Base() {}\n    Base.prototype = CommitPrototype;\n    return Base;\n}();\n/** @internal */ const StructuralBase = /*#__PURE__*/ function() {\n    function Base() {}\n    Base.prototype = StructuralCommitPrototype;\n    return Base;\n}(); //# sourceMappingURL=effectable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VmZmVjdGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFDRjtBQUNZO0FBQ1E7QUFDUjtBQUNQO0FBQ3hDLGNBQWMsR0FDUCxNQUFNTyxlQUFlLFdBQVcsR0FBRUMsT0FBT0MsR0FBRyxDQUFDLGlCQUFpQjtBQUNyRSxjQUFjLEdBQ1AsTUFBTUMsZUFBZSxXQUFXLEdBQUVGLE9BQU9DLEdBQUcsQ0FBQyxpQkFBaUI7QUFDckUsY0FBYyxHQUNQLE1BQU1FLGFBQWEsV0FBVyxHQUFFSCxPQUFPQyxHQUFHLENBQUMsZUFBZTtBQUNqRSxjQUFjLEdBQ1AsTUFBTUcsZ0JBQWdCLFdBQVcsR0FBRUosT0FBT0MsR0FBRyxDQUFDLGtCQUFrQjtBQUN2RSxjQUFjLEdBQ1AsTUFBTUksaUJBQWlCO0lBQzVCLGtCQUFrQixHQUNsQkMsSUFBSUMsQ0FBQUEsSUFBS0E7SUFDVCxrQkFBa0IsR0FDbEJDLElBQUlELENBQUFBLElBQUtBO0lBQ1Qsa0JBQWtCLEdBQ2xCRSxJQUFJRixDQUFBQSxJQUFLQTtJQUNURyxJQUFJLFdBQVcsR0FBRVosMERBQXlCO0FBQzVDLEVBQUU7QUFDRixNQUFNYyxlQUFlO0lBQ25CLGtCQUFrQixHQUNsQkgsSUFBSUYsQ0FBQUEsSUFBS0E7SUFDVCxrQkFBa0IsR0FDbEJNLEtBQUtOLENBQUFBLElBQUtBO0lBQ1Ysa0JBQWtCLEdBQ2xCTyxJQUFJUCxDQUFBQSxJQUFLQTtJQUNULGtCQUFrQixHQUNsQkMsSUFBSUQsQ0FBQUEsSUFBS0E7SUFDVCxrQkFBa0IsR0FDbEJELElBQUlDLENBQUFBLElBQUtBO0FBQ1g7QUFDQSxNQUFNUSxrQkFBa0I7SUFDdEIsa0JBQWtCLEdBQ2xCQyxNQUFNVCxDQUFBQSxJQUFLQTtJQUNYLGtCQUFrQixHQUNsQlUsUUFBUVYsQ0FBQUEsSUFBS0E7SUFDYixrQkFBa0IsR0FDbEJXLFNBQVNYLENBQUFBLElBQUtBO0lBQ2Qsa0JBQWtCLEdBQ2xCWSxTQUFTWixDQUFBQSxJQUFLQTtJQUNkLGtCQUFrQixHQUNsQmEsU0FBU2IsQ0FBQUEsSUFBS0E7SUFDZCxrQkFBa0IsR0FDbEJjLFVBQVVkLENBQUFBLElBQUtBO0lBQ2Ysa0JBQWtCLEdBQ2xCZSxVQUFVZixDQUFBQSxJQUFLQTtBQUNqQjtBQUNBLGNBQWMsR0FDUCxNQUFNZ0Isa0JBQWtCO0lBQzdCLENBQUN4QixhQUFhLEVBQUVNO0lBQ2hCLENBQUNILGFBQWEsRUFBRUc7SUFDaEIsQ0FBQ0YsV0FBVyxFQUFFUztJQUNkLENBQUNSLGNBQWMsRUFBRVc7SUFDakIsQ0FBQ3ZCLDZDQUFZLENBQUMsRUFBQ2lDLElBQUk7UUFDakIsT0FBTyxJQUFJLEtBQUtBO0lBQ2xCO0lBQ0EsQ0FBQ2hDLDRDQUFXLENBQUM7UUFDWCxPQUFPQSw0Q0FBVyxDQUFDLElBQUksRUFBRUEsNENBQVcsQ0FBQyxJQUFJO0lBQzNDO0lBQ0EsQ0FBQ08sT0FBTzRCLFFBQVEsQ0FBQztRQUNmLE9BQU8sSUFBSWpDLG9EQUFhQSxDQUFDLElBQUlDLGdEQUFTQSxDQUFDLElBQUk7SUFDN0M7SUFDQWlDO1FBQ0UsT0FBT25DLDJEQUFhQSxDQUFDLElBQUksRUFBRW9DO0lBQzdCO0FBQ0YsRUFBRTtBQUNGLGNBQWMsR0FDUCxNQUFNQyxzQkFBc0I7SUFDakMsQ0FBQ3RDLDRDQUFXLENBQUM7UUFDWCxPQUFPQSw0Q0FBVyxDQUFDLElBQUksRUFBRUEsK0NBQWMsQ0FBQyxJQUFJO0lBQzlDO0lBQ0EsQ0FBQ0QsNkNBQVksQ0FBQyxFQUFDaUMsSUFBSTtRQUNqQixNQUFNUSxXQUFXQyxPQUFPQyxJQUFJLENBQUMsSUFBSTtRQUNqQyxNQUFNQyxXQUFXRixPQUFPQyxJQUFJLENBQUNWO1FBQzdCLElBQUlRLFNBQVNJLE1BQU0sS0FBS0QsU0FBU0MsTUFBTSxFQUFFO1lBQ3ZDLE9BQU87UUFDVDtRQUNBLEtBQUssTUFBTUMsT0FBT0wsU0FBVTtZQUMxQixJQUFJLENBQUVLLENBQUFBLE9BQU9iLFFBQVFqQyw2Q0FBWSxDQUFDLElBQUksQ0FBQzhDLElBQUksRUFBRWIsSUFBSSxDQUFDYSxJQUFJLElBQUk7Z0JBQ3hELE9BQU87WUFDVDtRQUNGO1FBQ0EsT0FBTztJQUNUO0FBQ0YsRUFBRTtBQUNGLGNBQWMsR0FDUCxNQUFNRSxrQkFBa0I7SUFDN0IsR0FBR2pCLGVBQWU7SUFDbEJrQixLQUFLNUMseURBQWlCO0FBQ3hCLEVBQUU7QUFDRixjQUFjLEdBQ1AsTUFBTThDLDRCQUE0QjtJQUN2QyxHQUFHSCxlQUFlO0lBQ2xCLEdBQUdULG1CQUFtQjtBQUN4QixFQUFFO0FBQ0YsY0FBYyxHQUNQLE1BQU1hLE9BQU8sV0FBVyxHQUFFO0lBQy9CLFNBQVNBLFFBQVE7SUFDakJBLEtBQUtDLFNBQVMsR0FBR0w7SUFDakIsT0FBT0k7QUFDVCxJQUFJO0FBQ0osY0FBYyxHQUNQLE1BQU1FLGlCQUFpQixXQUFXLEdBQUU7SUFDekMsU0FBU0YsUUFBUTtJQUNqQkEsS0FBS0MsU0FBUyxHQUFHRjtJQUNqQixPQUFPQztBQUNULElBQUksQ0FDSixzQ0FBc0MiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9lZmZlY3RhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEVxdWFsIGZyb20gXCIuLi9FcXVhbC5qc1wiO1xuaW1wb3J0ICogYXMgSGFzaCBmcm9tIFwiLi4vSGFzaC5qc1wiO1xuaW1wb3J0IHsgcGlwZUFyZ3VtZW50cyB9IGZyb20gXCIuLi9QaXBlYWJsZS5qc1wiO1xuaW1wb3J0IHsgU2luZ2xlU2hvdEdlbiwgWWllbGRXcmFwIH0gZnJvbSBcIi4uL1V0aWxzLmpzXCI7XG5pbXBvcnQgKiBhcyBPcENvZGVzIGZyb20gXCIuL29wQ29kZXMvZWZmZWN0LmpzXCI7XG5pbXBvcnQgKiBhcyB2ZXJzaW9uIGZyb20gXCIuL3ZlcnNpb24uanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBFZmZlY3RUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9FZmZlY3RcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgU3RyZWFtVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJlZmZlY3QvU3RyZWFtXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFNpbmtUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9TaW5rXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IENoYW5uZWxUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9DaGFubmVsXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGVmZmVjdFZhcmlhbmNlID0ge1xuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfUjogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfRTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfQTogXyA9PiBfLFxuICBfVjogLyojX19QVVJFX18qL3ZlcnNpb24uZ2V0Q3VycmVudFZlcnNpb24oKVxufTtcbmNvbnN0IHNpbmtWYXJpYW5jZSA9IHtcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0E6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0luOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9MOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9FOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9SOiBfID0+IF9cbn07XG5jb25zdCBjaGFubmVsVmFyaWFuY2UgPSB7XG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9FbnY6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0luRXJyOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9JbkVsZW06IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0luRG9uZTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfT3V0RXJyOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9PdXRFbGVtOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9PdXREb25lOiBfID0+IF9cbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgRWZmZWN0UHJvdG90eXBlID0ge1xuICBbRWZmZWN0VHlwZUlkXTogZWZmZWN0VmFyaWFuY2UsXG4gIFtTdHJlYW1UeXBlSWRdOiBlZmZlY3RWYXJpYW5jZSxcbiAgW1NpbmtUeXBlSWRdOiBzaW5rVmFyaWFuY2UsXG4gIFtDaGFubmVsVHlwZUlkXTogY2hhbm5lbFZhcmlhbmNlLFxuICBbRXF1YWwuc3ltYm9sXSh0aGF0KSB7XG4gICAgcmV0dXJuIHRoaXMgPT09IHRoYXQ7XG4gIH0sXG4gIFtIYXNoLnN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIEhhc2guY2FjaGVkKHRoaXMsIEhhc2gucmFuZG9tKHRoaXMpKTtcbiAgfSxcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIG5ldyBTaW5nbGVTaG90R2VuKG5ldyBZaWVsZFdyYXAodGhpcykpO1xuICB9LFxuICBwaXBlKCkge1xuICAgIHJldHVybiBwaXBlQXJndW1lbnRzKHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgU3RydWN0dXJhbFByb3RvdHlwZSA9IHtcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jYWNoZWQodGhpcywgSGFzaC5zdHJ1Y3R1cmUodGhpcykpO1xuICB9LFxuICBbRXF1YWwuc3ltYm9sXSh0aGF0KSB7XG4gICAgY29uc3Qgc2VsZktleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBjb25zdCB0aGF0S2V5cyA9IE9iamVjdC5rZXlzKHRoYXQpO1xuICAgIGlmIChzZWxmS2V5cy5sZW5ndGggIT09IHRoYXRLZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBzZWxmS2V5cykge1xuICAgICAgaWYgKCEoa2V5IGluIHRoYXQgJiYgRXF1YWwuZXF1YWxzKHRoaXNba2V5XSwgdGhhdFtrZXldKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBDb21taXRQcm90b3R5cGUgPSB7XG4gIC4uLkVmZmVjdFByb3RvdHlwZSxcbiAgX29wOiBPcENvZGVzLk9QX0NPTU1JVFxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsQ29tbWl0UHJvdG90eXBlID0ge1xuICAuLi5Db21taXRQcm90b3R5cGUsXG4gIC4uLlN0cnVjdHVyYWxQcm90b3R5cGVcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgQmFzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2UoKSB7fVxuICBCYXNlLnByb3RvdHlwZSA9IENvbW1pdFByb3RvdHlwZTtcbiAgcmV0dXJuIEJhc2U7XG59KCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgU3RydWN0dXJhbEJhc2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlKCkge31cbiAgQmFzZS5wcm90b3R5cGUgPSBTdHJ1Y3R1cmFsQ29tbWl0UHJvdG90eXBlO1xuICByZXR1cm4gQmFzZTtcbn0oKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVmZmVjdGFibGUuanMubWFwIl0sIm5hbWVzIjpbIkVxdWFsIiwiSGFzaCIsInBpcGVBcmd1bWVudHMiLCJTaW5nbGVTaG90R2VuIiwiWWllbGRXcmFwIiwiT3BDb2RlcyIsInZlcnNpb24iLCJFZmZlY3RUeXBlSWQiLCJTeW1ib2wiLCJmb3IiLCJTdHJlYW1UeXBlSWQiLCJTaW5rVHlwZUlkIiwiQ2hhbm5lbFR5cGVJZCIsImVmZmVjdFZhcmlhbmNlIiwiX1IiLCJfIiwiX0UiLCJfQSIsIl9WIiwiZ2V0Q3VycmVudFZlcnNpb24iLCJzaW5rVmFyaWFuY2UiLCJfSW4iLCJfTCIsImNoYW5uZWxWYXJpYW5jZSIsIl9FbnYiLCJfSW5FcnIiLCJfSW5FbGVtIiwiX0luRG9uZSIsIl9PdXRFcnIiLCJfT3V0RWxlbSIsIl9PdXREb25lIiwiRWZmZWN0UHJvdG90eXBlIiwic3ltYm9sIiwidGhhdCIsImNhY2hlZCIsInJhbmRvbSIsIml0ZXJhdG9yIiwicGlwZSIsImFyZ3VtZW50cyIsIlN0cnVjdHVyYWxQcm90b3R5cGUiLCJzdHJ1Y3R1cmUiLCJzZWxmS2V5cyIsIk9iamVjdCIsImtleXMiLCJ0aGF0S2V5cyIsImxlbmd0aCIsImtleSIsImVxdWFscyIsIkNvbW1pdFByb3RvdHlwZSIsIl9vcCIsIk9QX0NPTU1JVCIsIlN0cnVjdHVyYWxDb21taXRQcm90b3R5cGUiLCJCYXNlIiwicHJvdG90eXBlIiwiU3RydWN0dXJhbEJhc2UiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/either.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/either.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isEither: () => (/* binding */ isEither),\n/* harmony export */   isLeft: () => (/* binding */ isLeft),\n/* harmony export */   isRight: () => (/* binding */ isRight),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   right: () => (/* binding */ right)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _option_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n/**\n * @since 2.0.0\n */ \n\n\n\n\n\n\n/**\n * @internal\n */ const TypeId = /*#__PURE__*/ Symbol.for(\"effect/Either\");\nconst CommonProto = {\n    ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n    [TypeId]: {\n        _R: (_)=>_\n    },\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol] () {\n        return this.toJSON();\n    },\n    toString () {\n        return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n    }\n};\nconst RightProto = /*#__PURE__*/ Object.assign(/*#__PURE__*/ Object.create(CommonProto), {\n    _tag: \"Right\",\n    _op: \"Right\",\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol] (that) {\n        return isEither(that) && isRight(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.right, that.right);\n    },\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol] () {\n        return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.right));\n    },\n    toJSON () {\n        return {\n            _id: \"Either\",\n            _tag: this._tag,\n            right: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.right)\n        };\n    }\n});\nconst LeftProto = /*#__PURE__*/ Object.assign(/*#__PURE__*/ Object.create(CommonProto), {\n    _tag: \"Left\",\n    _op: \"Left\",\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol] (that) {\n        return isEither(that) && isLeft(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.left, that.left);\n    },\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol] () {\n        return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.left));\n    },\n    toJSON () {\n        return {\n            _id: \"Either\",\n            _tag: this._tag,\n            left: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.left)\n        };\n    }\n});\n/** @internal */ const isEither = (input)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_4__.hasProperty)(input, TypeId);\n/** @internal */ const isLeft = (ma)=>ma._tag === \"Left\";\n/** @internal */ const isRight = (ma)=>ma._tag === \"Right\";\n/** @internal */ const left = (left)=>{\n    const a = Object.create(LeftProto);\n    a.left = left;\n    return a;\n};\n/** @internal */ const right = (right)=>{\n    const a = Object.create(RightProto);\n    a.right = right;\n    return a;\n};\n/** @internal */ const getLeft = (self)=>isRight(self) ? _option_js__WEBPACK_IMPORTED_MODULE_5__.none : _option_js__WEBPACK_IMPORTED_MODULE_5__.some(self.left);\n/** @internal */ const getRight = (self)=>isLeft(self) ? _option_js__WEBPACK_IMPORTED_MODULE_5__.none : _option_js__WEBPACK_IMPORTED_MODULE_5__.some(self.right);\n/** @internal */ const fromOption = /*#__PURE__*/ (0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, onNone)=>_option_js__WEBPACK_IMPORTED_MODULE_5__.isNone(self) ? left(onNone()) : right(self.value)); //# sourceMappingURL=either.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VpdGhlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDb0M7QUFDQztBQUNIO0FBQ21DO0FBQ3hCO0FBQ0k7QUFDWjtBQUN0Qzs7Q0FFQyxHQUNNLE1BQU1TLFNBQVMsV0FBVyxHQUFFQyxPQUFPQyxHQUFHLENBQUMsaUJBQWlCO0FBQy9ELE1BQU1DLGNBQWM7SUFDbEIsR0FBR0wsMkRBQWU7SUFDbEIsQ0FBQ0UsT0FBTyxFQUFFO1FBQ1JJLElBQUlDLENBQUFBLElBQUtBO0lBQ1g7SUFDQSxDQUFDViw4REFBaUJBLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUNDLE1BQU07SUFDcEI7SUFDQVU7UUFDRSxPQUFPWix1REFBTUEsQ0FBQyxJQUFJLENBQUNFLE1BQU07SUFDM0I7QUFDRjtBQUNBLE1BQU1XLGFBQWEsV0FBVyxHQUFFQyxPQUFPQyxNQUFNLENBQUMsV0FBVyxHQUFFRCxPQUFPRSxNQUFNLENBQUNQLGNBQWM7SUFDckZRLE1BQU07SUFDTkMsS0FBSztJQUNMLENBQUNyQiw2Q0FBWSxDQUFDLEVBQUN1QixJQUFJO1FBQ2pCLE9BQU9DLFNBQVNELFNBQVNFLFFBQVFGLFNBQVN2Qiw2Q0FBWSxDQUFDLElBQUksQ0FBQzJCLEtBQUssRUFBRUosS0FBS0ksS0FBSztJQUMvRTtJQUNBLENBQUN6Qiw0Q0FBVyxDQUFDO1FBQ1gsT0FBT0EsNkNBQVksQ0FBQ0EsMENBQVMsQ0FBQyxJQUFJLENBQUNrQixJQUFJLEdBQUdsQiwwQ0FBUyxDQUFDLElBQUksQ0FBQ3lCLEtBQUs7SUFDaEU7SUFDQXRCO1FBQ0UsT0FBTztZQUNMeUIsS0FBSztZQUNMVixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmTyxPQUFPdEIsdURBQU1BLENBQUMsSUFBSSxDQUFDc0IsS0FBSztRQUMxQjtJQUNGO0FBQ0Y7QUFDQSxNQUFNSSxZQUFZLFdBQVcsR0FBRWQsT0FBT0MsTUFBTSxDQUFDLFdBQVcsR0FBRUQsT0FBT0UsTUFBTSxDQUFDUCxjQUFjO0lBQ3BGUSxNQUFNO0lBQ05DLEtBQUs7SUFDTCxDQUFDckIsNkNBQVksQ0FBQyxFQUFDdUIsSUFBSTtRQUNqQixPQUFPQyxTQUFTRCxTQUFTUyxPQUFPVCxTQUFTdkIsNkNBQVksQ0FBQyxJQUFJLENBQUNpQyxJQUFJLEVBQUVWLEtBQUtVLElBQUk7SUFDNUU7SUFDQSxDQUFDL0IsNENBQVcsQ0FBQztRQUNYLE9BQU9BLDZDQUFZLENBQUNBLDBDQUFTLENBQUMsSUFBSSxDQUFDa0IsSUFBSSxHQUFHbEIsMENBQVMsQ0FBQyxJQUFJLENBQUMrQixJQUFJO0lBQy9EO0lBQ0E1QjtRQUNFLE9BQU87WUFDTHlCLEtBQUs7WUFDTFYsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZmEsTUFBTTVCLHVEQUFNQSxDQUFDLElBQUksQ0FBQzRCLElBQUk7UUFDeEI7SUFDRjtBQUNGO0FBQ0EsY0FBYyxHQUNQLE1BQU1ULFdBQVdVLENBQUFBLFFBQVM1QiwwREFBV0EsQ0FBQzRCLE9BQU96QixRQUFRO0FBQzVELGNBQWMsR0FDUCxNQUFNdUIsU0FBU0csQ0FBQUEsS0FBTUEsR0FBR2YsSUFBSSxLQUFLLE9BQU87QUFDL0MsY0FBYyxHQUNQLE1BQU1LLFVBQVVVLENBQUFBLEtBQU1BLEdBQUdmLElBQUksS0FBSyxRQUFRO0FBQ2pELGNBQWMsR0FDUCxNQUFNYSxPQUFPQSxDQUFBQTtJQUNsQixNQUFNRyxJQUFJbkIsT0FBT0UsTUFBTSxDQUFDWTtJQUN4QkssRUFBRUgsSUFBSSxHQUFHQTtJQUNULE9BQU9HO0FBQ1QsRUFBRTtBQUNGLGNBQWMsR0FDUCxNQUFNVCxRQUFRQSxDQUFBQTtJQUNuQixNQUFNUyxJQUFJbkIsT0FBT0UsTUFBTSxDQUFDSDtJQUN4Qm9CLEVBQUVULEtBQUssR0FBR0E7SUFDVixPQUFPUztBQUNULEVBQUU7QUFDRixjQUFjLEdBQ1AsTUFBTUMsVUFBVUMsQ0FBQUEsT0FBUWIsUUFBUWEsUUFBUTlCLDRDQUFXLEdBQUdBLDRDQUFXLENBQUM4QixLQUFLTCxJQUFJLEVBQUU7QUFDcEYsY0FBYyxHQUNQLE1BQU1RLFdBQVdILENBQUFBLE9BQVFOLE9BQU9NLFFBQVE5Qiw0Q0FBVyxHQUFHQSw0Q0FBVyxDQUFDOEIsS0FBS1gsS0FBSyxFQUFFO0FBQ3JGLGNBQWMsR0FDUCxNQUFNZSxhQUFhLFdBQVcsR0FBRXpDLGtEQUFJQSxDQUFDLEdBQUcsQ0FBQ3FDLE1BQU1LLFNBQVduQyw4Q0FBYSxDQUFDOEIsUUFBUUwsS0FBS1UsWUFBWWhCLE1BQU1XLEtBQUtPLEtBQUssR0FBRyxDQUMzSCxrQ0FBa0MiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9laXRoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcIi4uL0VxdWFsLmpzXCI7XG5pbXBvcnQgeyBkdWFsIH0gZnJvbSBcIi4uL0Z1bmN0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuLi9IYXNoLmpzXCI7XG5pbXBvcnQgeyBmb3JtYXQsIE5vZGVJbnNwZWN0U3ltYm9sLCB0b0pTT04gfSBmcm9tIFwiLi4vSW5zcGVjdGFibGUuanNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4uL1ByZWRpY2F0ZS5qc1wiO1xuaW1wb3J0IHsgRWZmZWN0UHJvdG90eXBlIH0gZnJvbSBcIi4vZWZmZWN0YWJsZS5qc1wiO1xuaW1wb3J0ICogYXMgb3B0aW9uIGZyb20gXCIuL29wdGlvbi5qc1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0VpdGhlclwiKTtcbmNvbnN0IENvbW1vblByb3RvID0ge1xuICAuLi5FZmZlY3RQcm90b3R5cGUsXG4gIFtUeXBlSWRdOiB7XG4gICAgX1I6IF8gPT4gX1xuICB9LFxuICBbTm9kZUluc3BlY3RTeW1ib2xdKCkge1xuICAgIHJldHVybiB0aGlzLnRvSlNPTigpO1xuICB9LFxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZm9ybWF0KHRoaXMudG9KU09OKCkpO1xuICB9XG59O1xuY29uc3QgUmlnaHRQcm90byA9IC8qI19fUFVSRV9fKi9PYmplY3QuYXNzaWduKC8qI19fUFVSRV9fKi9PYmplY3QuY3JlYXRlKENvbW1vblByb3RvKSwge1xuICBfdGFnOiBcIlJpZ2h0XCIsXG4gIF9vcDogXCJSaWdodFwiLFxuICBbRXF1YWwuc3ltYm9sXSh0aGF0KSB7XG4gICAgcmV0dXJuIGlzRWl0aGVyKHRoYXQpICYmIGlzUmlnaHQodGhhdCkgJiYgRXF1YWwuZXF1YWxzKHRoaXMucmlnaHQsIHRoYXQucmlnaHQpO1xuICB9LFxuICBbSGFzaC5zeW1ib2xdKCkge1xuICAgIHJldHVybiBIYXNoLmNvbWJpbmUoSGFzaC5oYXNoKHRoaXMuX3RhZykpKEhhc2guaGFzaCh0aGlzLnJpZ2h0KSk7XG4gIH0sXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX2lkOiBcIkVpdGhlclwiLFxuICAgICAgX3RhZzogdGhpcy5fdGFnLFxuICAgICAgcmlnaHQ6IHRvSlNPTih0aGlzLnJpZ2h0KVxuICAgIH07XG4gIH1cbn0pO1xuY29uc3QgTGVmdFByb3RvID0gLyojX19QVVJFX18qL09iamVjdC5hc3NpZ24oLyojX19QVVJFX18qL09iamVjdC5jcmVhdGUoQ29tbW9uUHJvdG8pLCB7XG4gIF90YWc6IFwiTGVmdFwiLFxuICBfb3A6IFwiTGVmdFwiLFxuICBbRXF1YWwuc3ltYm9sXSh0aGF0KSB7XG4gICAgcmV0dXJuIGlzRWl0aGVyKHRoYXQpICYmIGlzTGVmdCh0aGF0KSAmJiBFcXVhbC5lcXVhbHModGhpcy5sZWZ0LCB0aGF0LmxlZnQpO1xuICB9LFxuICBbSGFzaC5zeW1ib2xdKCkge1xuICAgIHJldHVybiBIYXNoLmNvbWJpbmUoSGFzaC5oYXNoKHRoaXMuX3RhZykpKEhhc2guaGFzaCh0aGlzLmxlZnQpKTtcbiAgfSxcbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfaWQ6IFwiRWl0aGVyXCIsXG4gICAgICBfdGFnOiB0aGlzLl90YWcsXG4gICAgICBsZWZ0OiB0b0pTT04odGhpcy5sZWZ0KVxuICAgIH07XG4gIH1cbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGlzRWl0aGVyID0gaW5wdXQgPT4gaGFzUHJvcGVydHkoaW5wdXQsIFR5cGVJZCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNMZWZ0ID0gbWEgPT4gbWEuX3RhZyA9PT0gXCJMZWZ0XCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNSaWdodCA9IG1hID0+IG1hLl90YWcgPT09IFwiUmlnaHRcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBsZWZ0ID0gbGVmdCA9PiB7XG4gIGNvbnN0IGEgPSBPYmplY3QuY3JlYXRlKExlZnRQcm90byk7XG4gIGEubGVmdCA9IGxlZnQ7XG4gIHJldHVybiBhO1xufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCByaWdodCA9IHJpZ2h0ID0+IHtcbiAgY29uc3QgYSA9IE9iamVjdC5jcmVhdGUoUmlnaHRQcm90byk7XG4gIGEucmlnaHQgPSByaWdodDtcbiAgcmV0dXJuIGE7XG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGdldExlZnQgPSBzZWxmID0+IGlzUmlnaHQoc2VsZikgPyBvcHRpb24ubm9uZSA6IG9wdGlvbi5zb21lKHNlbGYubGVmdCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZ2V0UmlnaHQgPSBzZWxmID0+IGlzTGVmdChzZWxmKSA/IG9wdGlvbi5ub25lIDogb3B0aW9uLnNvbWUoc2VsZi5yaWdodCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZnJvbU9wdGlvbiA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBvbk5vbmUpID0+IG9wdGlvbi5pc05vbmUoc2VsZikgPyBsZWZ0KG9uTm9uZSgpKSA6IHJpZ2h0KHNlbGYudmFsdWUpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVpdGhlci5qcy5tYXAiXSwibmFtZXMiOlsiRXF1YWwiLCJkdWFsIiwiSGFzaCIsImZvcm1hdCIsIk5vZGVJbnNwZWN0U3ltYm9sIiwidG9KU09OIiwiaGFzUHJvcGVydHkiLCJFZmZlY3RQcm90b3R5cGUiLCJvcHRpb24iLCJUeXBlSWQiLCJTeW1ib2wiLCJmb3IiLCJDb21tb25Qcm90byIsIl9SIiwiXyIsInRvU3RyaW5nIiwiUmlnaHRQcm90byIsIk9iamVjdCIsImFzc2lnbiIsImNyZWF0ZSIsIl90YWciLCJfb3AiLCJzeW1ib2wiLCJ0aGF0IiwiaXNFaXRoZXIiLCJpc1JpZ2h0IiwiZXF1YWxzIiwicmlnaHQiLCJjb21iaW5lIiwiaGFzaCIsIl9pZCIsIkxlZnRQcm90byIsImlzTGVmdCIsImxlZnQiLCJpbnB1dCIsIm1hIiwiYSIsImdldExlZnQiLCJzZWxmIiwibm9uZSIsInNvbWUiLCJnZXRSaWdodCIsImZyb21PcHRpb24iLCJvbk5vbmUiLCJpc05vbmUiLCJ2YWx1ZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/either.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js":
/*!******************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/base64.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   stripCrlf: () => (/* binding */ stripCrlf)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n\n\n/** @internal */ const encode = (bytes)=>{\n    const length = bytes.length;\n    let result = \"\";\n    let i;\n    for(i = 2; i < length; i += 3){\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n        result += base64abc[(bytes[i - 1] & 0x0f) << 2 | bytes[i] >> 6];\n        result += base64abc[bytes[i] & 0x3f];\n    }\n    if (i === length + 1) {\n        // 1 octet yet to write\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[(bytes[i - 2] & 0x03) << 4];\n        result += \"==\";\n    }\n    if (i === length) {\n        // 2 octets yet to write\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n        result += base64abc[(bytes[i - 1] & 0x0f) << 2];\n        result += \"=\";\n    }\n    return result;\n};\n/** @internal */ const decode = (str)=>{\n    const stripped = stripCrlf(str);\n    const length = stripped.length;\n    if (length % 4 !== 0) {\n        return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(stripped, `Length must be a multiple of 4, but is ${length}`));\n    }\n    const index = stripped.indexOf(\"=\");\n    if (index !== -1 && (index < length - 2 || index === length - 2 && stripped[length - 1] !== \"=\")) {\n        return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(stripped, \"Found a '=' character, but it is not at the end\"));\n    }\n    try {\n        const missingOctets = stripped.endsWith(\"==\") ? 2 : stripped.endsWith(\"=\") ? 1 : 0;\n        const result = new Uint8Array(3 * (length / 4) - missingOctets);\n        for(let i = 0, j = 0; i < length; i += 4, j += 3){\n            const buffer = getBase64Code(stripped.charCodeAt(i)) << 18 | getBase64Code(stripped.charCodeAt(i + 1)) << 12 | getBase64Code(stripped.charCodeAt(i + 2)) << 6 | getBase64Code(stripped.charCodeAt(i + 3));\n            result[j] = buffer >> 16;\n            result[j + 1] = buffer >> 8 & 0xff;\n            result[j + 2] = buffer & 0xff;\n        }\n        return _Either_js__WEBPACK_IMPORTED_MODULE_0__.right(result);\n    } catch (e) {\n        return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(stripped, e instanceof Error ? e.message : \"Invalid input\"));\n    }\n};\n/** @internal */ const stripCrlf = (str)=>str.replace(/[\\n\\r]/g, \"\");\n/** @internal */ function getBase64Code(charCode) {\n    if (charCode >= base64codes.length) {\n        throw new TypeError(`Invalid character ${String.fromCharCode(charCode)}`);\n    }\n    const code = base64codes[charCode];\n    if (code === 255) {\n        throw new TypeError(`Invalid character ${String.fromCharCode(charCode)}`);\n    }\n    return code;\n}\n/** @internal */ const base64abc = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"+\",\n    \"/\"\n];\n/** @internal */ const base64codes = [\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    62,\n    255,\n    255,\n    255,\n    63,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    255,\n    255,\n    255,\n    0,\n    255,\n    255,\n    255,\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    255,\n    255,\n    255,\n    255,\n    255,\n    255,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    50,\n    51\n]; //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64Url.js":
/*!*********************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/base64Url.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n\n\n\n/** @internal */ const encode = (data)=>_base64_js__WEBPACK_IMPORTED_MODULE_0__.encode(data).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n/** @internal */ const decode = (str)=>{\n    const stripped = _base64_js__WEBPACK_IMPORTED_MODULE_0__.stripCrlf(str);\n    const length = stripped.length;\n    if (length % 4 === 1) {\n        return _Either_js__WEBPACK_IMPORTED_MODULE_1__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_2__.DecodeException)(stripped, `Length should be a multiple of 4, but is ${length}`));\n    }\n    if (!/^[-_A-Z0-9]*?={0,2}$/i.test(stripped)) {\n        return _Either_js__WEBPACK_IMPORTED_MODULE_1__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_2__.DecodeException)(stripped, \"Invalid input\"));\n    }\n    // Some variants allow or require omitting the padding '=' signs\n    let sanitized = length % 4 === 2 ? `${stripped}==` : length % 4 === 3 ? `${stripped}=` : stripped;\n    sanitized = sanitized.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.decode(sanitized);\n}; //# sourceMappingURL=base64Url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2Jhc2U2NFVybC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEwQztBQUNKO0FBQ1E7QUFDOUMsY0FBYyxHQUNQLE1BQU1HLFNBQVNDLENBQUFBLE9BQVFILDhDQUFhLENBQUNHLE1BQU1DLE9BQU8sQ0FBQyxNQUFNLElBQUlBLE9BQU8sQ0FBQyxPQUFPLEtBQUtBLE9BQU8sQ0FBQyxPQUFPLEtBQUs7QUFDNUcsY0FBYyxHQUNQLE1BQU1DLFNBQVNDLENBQUFBO0lBQ3BCLE1BQU1DLFdBQVdQLGlEQUFnQixDQUFDTTtJQUNsQyxNQUFNRyxTQUFTRixTQUFTRSxNQUFNO0lBQzlCLElBQUlBLFNBQVMsTUFBTSxHQUFHO1FBQ3BCLE9BQU9WLDRDQUFXLENBQUNFLDJEQUFlQSxDQUFDTSxVQUFVLENBQUMseUNBQXlDLEVBQUVFLFFBQVE7SUFDbkc7SUFDQSxJQUFJLENBQUMsd0JBQXdCRSxJQUFJLENBQUNKLFdBQVc7UUFDM0MsT0FBT1IsNENBQVcsQ0FBQ0UsMkRBQWVBLENBQUNNLFVBQVU7SUFDL0M7SUFDQSxnRUFBZ0U7SUFDaEUsSUFBSUssWUFBWUgsU0FBUyxNQUFNLElBQUksR0FBR0YsU0FBUyxFQUFFLENBQUMsR0FBR0UsU0FBUyxNQUFNLElBQUksR0FBR0YsU0FBUyxDQUFDLENBQUMsR0FBR0E7SUFDekZLLFlBQVlBLFVBQVVSLE9BQU8sQ0FBQyxNQUFNLEtBQUtBLE9BQU8sQ0FBQyxNQUFNO0lBQ3ZELE9BQU9KLDhDQUFhLENBQUNZO0FBQ3ZCLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9lbmNvZGluZy9iYXNlNjRVcmwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRWl0aGVyIGZyb20gXCIuLi8uLi9FaXRoZXIuanNcIjtcbmltcG9ydCAqIGFzIEJhc2U2NCBmcm9tIFwiLi9iYXNlNjQuanNcIjtcbmltcG9ydCB7IERlY29kZUV4Y2VwdGlvbiB9IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IGRhdGEgPT4gQmFzZTY0LmVuY29kZShkYXRhKS5yZXBsYWNlKC89L2csIFwiXCIpLnJlcGxhY2UoL1xcKy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBkZWNvZGUgPSBzdHIgPT4ge1xuICBjb25zdCBzdHJpcHBlZCA9IEJhc2U2NC5zdHJpcENybGYoc3RyKTtcbiAgY29uc3QgbGVuZ3RoID0gc3RyaXBwZWQubGVuZ3RoO1xuICBpZiAobGVuZ3RoICUgNCA9PT0gMSkge1xuICAgIHJldHVybiBFaXRoZXIubGVmdChEZWNvZGVFeGNlcHRpb24oc3RyaXBwZWQsIGBMZW5ndGggc2hvdWxkIGJlIGEgbXVsdGlwbGUgb2YgNCwgYnV0IGlzICR7bGVuZ3RofWApKTtcbiAgfVxuICBpZiAoIS9eWy1fQS1aMC05XSo/PXswLDJ9JC9pLnRlc3Qoc3RyaXBwZWQpKSB7XG4gICAgcmV0dXJuIEVpdGhlci5sZWZ0KERlY29kZUV4Y2VwdGlvbihzdHJpcHBlZCwgXCJJbnZhbGlkIGlucHV0XCIpKTtcbiAgfVxuICAvLyBTb21lIHZhcmlhbnRzIGFsbG93IG9yIHJlcXVpcmUgb21pdHRpbmcgdGhlIHBhZGRpbmcgJz0nIHNpZ25zXG4gIGxldCBzYW5pdGl6ZWQgPSBsZW5ndGggJSA0ID09PSAyID8gYCR7c3RyaXBwZWR9PT1gIDogbGVuZ3RoICUgNCA9PT0gMyA/IGAke3N0cmlwcGVkfT1gIDogc3RyaXBwZWQ7XG4gIHNhbml0aXplZCA9IHNhbml0aXplZC5yZXBsYWNlKC8tL2csIFwiK1wiKS5yZXBsYWNlKC9fL2csIFwiL1wiKTtcbiAgcmV0dXJuIEJhc2U2NC5kZWNvZGUoc2FuaXRpemVkKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjRVcmwuanMubWFwIl0sIm5hbWVzIjpbIkVpdGhlciIsIkJhc2U2NCIsIkRlY29kZUV4Y2VwdGlvbiIsImVuY29kZSIsImRhdGEiLCJyZXBsYWNlIiwiZGVjb2RlIiwic3RyIiwic3RyaXBwZWQiLCJzdHJpcENybGYiLCJsZW5ndGgiLCJsZWZ0IiwidGVzdCIsInNhbml0aXplZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64Url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js":
/*!******************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/common.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodeException: () => (/* binding */ DecodeException),\n/* harmony export */   DecodeExceptionTypeId: () => (/* binding */ DecodeExceptionTypeId),\n/* harmony export */   EncodeException: () => (/* binding */ EncodeException),\n/* harmony export */   EncodeExceptionTypeId: () => (/* binding */ EncodeExceptionTypeId),\n/* harmony export */   decoder: () => (/* binding */ decoder),\n/* harmony export */   encoder: () => (/* binding */ encoder),\n/* harmony export */   isDecodeException: () => (/* binding */ isDecodeException),\n/* harmony export */   isEncodeException: () => (/* binding */ isEncodeException)\n/* harmony export */ });\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n\n/** @internal */ const DecodeExceptionTypeId = /*#__PURE__*/ Symbol.for(\"effect/Encoding/errors/Decode\");\n/** @internal */ const DecodeException = (input, message)=>{\n    const out = {\n        _tag: \"DecodeException\",\n        [DecodeExceptionTypeId]: DecodeExceptionTypeId,\n        input\n    };\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isString)(message)) {\n        out.message = message;\n    }\n    return out;\n};\n/** @internal */ const isDecodeException = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(u, DecodeExceptionTypeId);\n/** @internal */ const EncodeExceptionTypeId = /*#__PURE__*/ Symbol.for(\"effect/Encoding/errors/Encode\");\n/** @internal */ const EncodeException = (input, message)=>{\n    const out = {\n        _tag: \"EncodeException\",\n        [EncodeExceptionTypeId]: EncodeExceptionTypeId,\n        input\n    };\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isString)(message)) {\n        out.message = message;\n    }\n    return out;\n};\n/** @internal */ const isEncodeException = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(u, EncodeExceptionTypeId);\n/** @interal */ const encoder = /*#__PURE__*/ new TextEncoder();\n/** @interal */ const decoder = /*#__PURE__*/ new TextDecoder(); //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBMkQ7QUFDM0QsY0FBYyxHQUNQLE1BQU1FLHdCQUF3QixXQUFXLEdBQUVDLE9BQU9DLEdBQUcsQ0FBQyxpQ0FBaUM7QUFDOUYsY0FBYyxHQUNQLE1BQU1DLGtCQUFrQixDQUFDQyxPQUFPQztJQUNyQyxNQUFNQyxNQUFNO1FBQ1ZDLE1BQU07UUFDTixDQUFDUCxzQkFBc0IsRUFBRUE7UUFDekJJO0lBQ0Y7SUFDQSxJQUFJTCx1REFBUUEsQ0FBQ00sVUFBVTtRQUNyQkMsSUFBSUQsT0FBTyxHQUFHQTtJQUNoQjtJQUNBLE9BQU9DO0FBQ1QsRUFBRTtBQUNGLGNBQWMsR0FDUCxNQUFNRSxvQkFBb0JDLENBQUFBLElBQUtYLDBEQUFXQSxDQUFDVyxHQUFHVCx1QkFBdUI7QUFDNUUsY0FBYyxHQUNQLE1BQU1VLHdCQUF3QixXQUFXLEdBQUVULE9BQU9DLEdBQUcsQ0FBQyxpQ0FBaUM7QUFDOUYsY0FBYyxHQUNQLE1BQU1TLGtCQUFrQixDQUFDUCxPQUFPQztJQUNyQyxNQUFNQyxNQUFNO1FBQ1ZDLE1BQU07UUFDTixDQUFDRyxzQkFBc0IsRUFBRUE7UUFDekJOO0lBQ0Y7SUFDQSxJQUFJTCx1REFBUUEsQ0FBQ00sVUFBVTtRQUNyQkMsSUFBSUQsT0FBTyxHQUFHQTtJQUNoQjtJQUNBLE9BQU9DO0FBQ1QsRUFBRTtBQUNGLGNBQWMsR0FDUCxNQUFNTSxvQkFBb0JILENBQUFBLElBQUtYLDBEQUFXQSxDQUFDVyxHQUFHQyx1QkFBdUI7QUFDNUUsYUFBYSxHQUNOLE1BQU1HLFVBQVUsV0FBVyxHQUFFLElBQUlDLGNBQWM7QUFDdEQsYUFBYSxHQUNOLE1BQU1DLFVBQVUsV0FBVyxHQUFFLElBQUlDLGNBQWMsQ0FDdEQsa0NBQWtDIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvZW5jb2RpbmcvY29tbW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhc1Byb3BlcnR5LCBpc1N0cmluZyB9IGZyb20gXCIuLi8uLi9QcmVkaWNhdGUuanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBEZWNvZGVFeGNlcHRpb25UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9FbmNvZGluZy9lcnJvcnMvRGVjb2RlXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IERlY29kZUV4Y2VwdGlvbiA9IChpbnB1dCwgbWVzc2FnZSkgPT4ge1xuICBjb25zdCBvdXQgPSB7XG4gICAgX3RhZzogXCJEZWNvZGVFeGNlcHRpb25cIixcbiAgICBbRGVjb2RlRXhjZXB0aW9uVHlwZUlkXTogRGVjb2RlRXhjZXB0aW9uVHlwZUlkLFxuICAgIGlucHV0XG4gIH07XG4gIGlmIChpc1N0cmluZyhtZXNzYWdlKSkge1xuICAgIG91dC5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc0RlY29kZUV4Y2VwdGlvbiA9IHUgPT4gaGFzUHJvcGVydHkodSwgRGVjb2RlRXhjZXB0aW9uVHlwZUlkKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBFbmNvZGVFeGNlcHRpb25UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9FbmNvZGluZy9lcnJvcnMvRW5jb2RlXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEVuY29kZUV4Y2VwdGlvbiA9IChpbnB1dCwgbWVzc2FnZSkgPT4ge1xuICBjb25zdCBvdXQgPSB7XG4gICAgX3RhZzogXCJFbmNvZGVFeGNlcHRpb25cIixcbiAgICBbRW5jb2RlRXhjZXB0aW9uVHlwZUlkXTogRW5jb2RlRXhjZXB0aW9uVHlwZUlkLFxuICAgIGlucHV0XG4gIH07XG4gIGlmIChpc1N0cmluZyhtZXNzYWdlKSkge1xuICAgIG91dC5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc0VuY29kZUV4Y2VwdGlvbiA9IHUgPT4gaGFzUHJvcGVydHkodSwgRW5jb2RlRXhjZXB0aW9uVHlwZUlkKTtcbi8qKiBAaW50ZXJhbCAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZXIgPSAvKiNfX1BVUkVfXyovbmV3IFRleHRFbmNvZGVyKCk7XG4vKiogQGludGVyYWwgKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVyID0gLyojX19QVVJFX18qL25ldyBUZXh0RGVjb2RlcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJoYXNQcm9wZXJ0eSIsImlzU3RyaW5nIiwiRGVjb2RlRXhjZXB0aW9uVHlwZUlkIiwiU3ltYm9sIiwiZm9yIiwiRGVjb2RlRXhjZXB0aW9uIiwiaW5wdXQiLCJtZXNzYWdlIiwib3V0IiwiX3RhZyIsImlzRGVjb2RlRXhjZXB0aW9uIiwidSIsIkVuY29kZUV4Y2VwdGlvblR5cGVJZCIsIkVuY29kZUV4Y2VwdGlvbiIsImlzRW5jb2RlRXhjZXB0aW9uIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/hex.js":
/*!***************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/hex.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n\n\n/** @internal */ const encode = (bytes)=>{\n    let result = \"\";\n    for(let i = 0; i < bytes.length; ++i){\n        result += bytesToHex[bytes[i]];\n    }\n    return result;\n};\n/** @internal */ const decode = (str)=>{\n    const bytes = new TextEncoder().encode(str);\n    if (bytes.length % 2 !== 0) {\n        return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(str, `Length must be a multiple of 2, but is ${bytes.length}`));\n    }\n    try {\n        const length = bytes.length / 2;\n        const result = new Uint8Array(length);\n        for(let i = 0; i < length; i++){\n            const a = fromHexChar(bytes[i * 2]);\n            const b = fromHexChar(bytes[i * 2 + 1]);\n            result[i] = a << 4 | b;\n        }\n        return _Either_js__WEBPACK_IMPORTED_MODULE_0__.right(result);\n    } catch (e) {\n        return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(str, e instanceof Error ? e.message : \"Invalid input\"));\n    }\n};\n/** @internal */ const bytesToHex = [\n    \"00\",\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"0a\",\n    \"0b\",\n    \"0c\",\n    \"0d\",\n    \"0e\",\n    \"0f\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\",\n    \"1a\",\n    \"1b\",\n    \"1c\",\n    \"1d\",\n    \"1e\",\n    \"1f\",\n    \"20\",\n    \"21\",\n    \"22\",\n    \"23\",\n    \"24\",\n    \"25\",\n    \"26\",\n    \"27\",\n    \"28\",\n    \"29\",\n    \"2a\",\n    \"2b\",\n    \"2c\",\n    \"2d\",\n    \"2e\",\n    \"2f\",\n    \"30\",\n    \"31\",\n    \"32\",\n    \"33\",\n    \"34\",\n    \"35\",\n    \"36\",\n    \"37\",\n    \"38\",\n    \"39\",\n    \"3a\",\n    \"3b\",\n    \"3c\",\n    \"3d\",\n    \"3e\",\n    \"3f\",\n    \"40\",\n    \"41\",\n    \"42\",\n    \"43\",\n    \"44\",\n    \"45\",\n    \"46\",\n    \"47\",\n    \"48\",\n    \"49\",\n    \"4a\",\n    \"4b\",\n    \"4c\",\n    \"4d\",\n    \"4e\",\n    \"4f\",\n    \"50\",\n    \"51\",\n    \"52\",\n    \"53\",\n    \"54\",\n    \"55\",\n    \"56\",\n    \"57\",\n    \"58\",\n    \"59\",\n    \"5a\",\n    \"5b\",\n    \"5c\",\n    \"5d\",\n    \"5e\",\n    \"5f\",\n    \"60\",\n    \"61\",\n    \"62\",\n    \"63\",\n    \"64\",\n    \"65\",\n    \"66\",\n    \"67\",\n    \"68\",\n    \"69\",\n    \"6a\",\n    \"6b\",\n    \"6c\",\n    \"6d\",\n    \"6e\",\n    \"6f\",\n    \"70\",\n    \"71\",\n    \"72\",\n    \"73\",\n    \"74\",\n    \"75\",\n    \"76\",\n    \"77\",\n    \"78\",\n    \"79\",\n    \"7a\",\n    \"7b\",\n    \"7c\",\n    \"7d\",\n    \"7e\",\n    \"7f\",\n    \"80\",\n    \"81\",\n    \"82\",\n    \"83\",\n    \"84\",\n    \"85\",\n    \"86\",\n    \"87\",\n    \"88\",\n    \"89\",\n    \"8a\",\n    \"8b\",\n    \"8c\",\n    \"8d\",\n    \"8e\",\n    \"8f\",\n    \"90\",\n    \"91\",\n    \"92\",\n    \"93\",\n    \"94\",\n    \"95\",\n    \"96\",\n    \"97\",\n    \"98\",\n    \"99\",\n    \"9a\",\n    \"9b\",\n    \"9c\",\n    \"9d\",\n    \"9e\",\n    \"9f\",\n    \"a0\",\n    \"a1\",\n    \"a2\",\n    \"a3\",\n    \"a4\",\n    \"a5\",\n    \"a6\",\n    \"a7\",\n    \"a8\",\n    \"a9\",\n    \"aa\",\n    \"ab\",\n    \"ac\",\n    \"ad\",\n    \"ae\",\n    \"af\",\n    \"b0\",\n    \"b1\",\n    \"b2\",\n    \"b3\",\n    \"b4\",\n    \"b5\",\n    \"b6\",\n    \"b7\",\n    \"b8\",\n    \"b9\",\n    \"ba\",\n    \"bb\",\n    \"bc\",\n    \"bd\",\n    \"be\",\n    \"bf\",\n    \"c0\",\n    \"c1\",\n    \"c2\",\n    \"c3\",\n    \"c4\",\n    \"c5\",\n    \"c6\",\n    \"c7\",\n    \"c8\",\n    \"c9\",\n    \"ca\",\n    \"cb\",\n    \"cc\",\n    \"cd\",\n    \"ce\",\n    \"cf\",\n    \"d0\",\n    \"d1\",\n    \"d2\",\n    \"d3\",\n    \"d4\",\n    \"d5\",\n    \"d6\",\n    \"d7\",\n    \"d8\",\n    \"d9\",\n    \"da\",\n    \"db\",\n    \"dc\",\n    \"dd\",\n    \"de\",\n    \"df\",\n    \"e0\",\n    \"e1\",\n    \"e2\",\n    \"e3\",\n    \"e4\",\n    \"e5\",\n    \"e6\",\n    \"e7\",\n    \"e8\",\n    \"e9\",\n    \"ea\",\n    \"eb\",\n    \"ec\",\n    \"ed\",\n    \"ee\",\n    \"ef\",\n    \"f0\",\n    \"f1\",\n    \"f2\",\n    \"f3\",\n    \"f4\",\n    \"f5\",\n    \"f6\",\n    \"f7\",\n    \"f8\",\n    \"f9\",\n    \"fa\",\n    \"fb\",\n    \"fc\",\n    \"fd\",\n    \"fe\",\n    \"ff\"\n];\n/** @internal */ const fromHexChar = (byte)=>{\n    // '0' <= byte && byte <= '9'\n    if (48 <= byte && byte <= 57) {\n        return byte - 48;\n    }\n    // 'a' <= byte && byte <= 'f'\n    if (97 <= byte && byte <= 102) {\n        return byte - 97 + 10;\n    }\n    // 'A' <= byte && byte <= 'F'\n    if (65 <= byte && byte <= 70) {\n        return byte - 65 + 10;\n    }\n    throw new TypeError(\"Invalid input\");\n}; //# sourceMappingURL=hex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/errors.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBugErrorMessage: () => (/* binding */ getBugErrorMessage)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */ /** @internal */ const getBugErrorMessage = (message)=>`BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxjQUFjLEdBQ1AsTUFBTUEscUJBQXFCQyxDQUFBQSxVQUFXLENBQUMsS0FBSyxFQUFFQSxRQUFRLHVFQUF1RSxDQUFDLENBQUMsQ0FDdEksa0NBQWtDIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRCdWdFcnJvck1lc3NhZ2UgPSBtZXNzYWdlID0+IGBCVUc6ICR7bWVzc2FnZX0gLSBwbGVhc2UgcmVwb3J0IGFuIGlzc3VlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9FZmZlY3QtVFMvZWZmZWN0L2lzc3Vlc2A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbImdldEJ1Z0Vycm9yTWVzc2FnZSIsIm1lc3NhZ2UiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js":
/*!*****************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/opCodes/effect.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OP_ASYNC: () => (/* binding */ OP_ASYNC),\n/* harmony export */   OP_COMMIT: () => (/* binding */ OP_COMMIT),\n/* harmony export */   OP_FAILURE: () => (/* binding */ OP_FAILURE),\n/* harmony export */   OP_ITERATOR: () => (/* binding */ OP_ITERATOR),\n/* harmony export */   OP_ON_FAILURE: () => (/* binding */ OP_ON_FAILURE),\n/* harmony export */   OP_ON_SUCCESS: () => (/* binding */ OP_ON_SUCCESS),\n/* harmony export */   OP_ON_SUCCESS_AND_FAILURE: () => (/* binding */ OP_ON_SUCCESS_AND_FAILURE),\n/* harmony export */   OP_REVERT_FLAGS: () => (/* binding */ OP_REVERT_FLAGS),\n/* harmony export */   OP_SUCCESS: () => (/* binding */ OP_SUCCESS),\n/* harmony export */   OP_SYNC: () => (/* binding */ OP_SYNC),\n/* harmony export */   OP_TAG: () => (/* binding */ OP_TAG),\n/* harmony export */   OP_UPDATE_RUNTIME_FLAGS: () => (/* binding */ OP_UPDATE_RUNTIME_FLAGS),\n/* harmony export */   OP_WHILE: () => (/* binding */ OP_WHILE),\n/* harmony export */   OP_WITH_RUNTIME: () => (/* binding */ OP_WITH_RUNTIME),\n/* harmony export */   OP_YIELD: () => (/* binding */ OP_YIELD)\n/* harmony export */ });\n/** @internal */ const OP_ASYNC = \"Async\";\n/** @internal */ const OP_COMMIT = \"Commit\";\n/** @internal */ const OP_FAILURE = \"Failure\";\n/** @internal */ const OP_ON_FAILURE = \"OnFailure\";\n/** @internal */ const OP_ON_SUCCESS = \"OnSuccess\";\n/** @internal */ const OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\";\n/** @internal */ const OP_SUCCESS = \"Success\";\n/** @internal */ const OP_SYNC = \"Sync\";\n/** @internal */ const OP_TAG = \"Tag\";\n/** @internal */ const OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\";\n/** @internal */ const OP_WHILE = \"While\";\n/** @internal */ const OP_ITERATOR = \"Iterator\";\n/** @internal */ const OP_WITH_RUNTIME = \"WithRuntime\";\n/** @internal */ const OP_YIELD = \"Yield\";\n/** @internal */ const OP_REVERT_FLAGS = \"RevertFlags\"; //# sourceMappingURL=effect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL29wQ29kZXMvZWZmZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGNBQWMsR0FDUCxNQUFNQSxXQUFXLFFBQVE7QUFDaEMsY0FBYyxHQUNQLE1BQU1DLFlBQVksU0FBUztBQUNsQyxjQUFjLEdBQ1AsTUFBTUMsYUFBYSxVQUFVO0FBQ3BDLGNBQWMsR0FDUCxNQUFNQyxnQkFBZ0IsWUFBWTtBQUN6QyxjQUFjLEdBQ1AsTUFBTUMsZ0JBQWdCLFlBQVk7QUFDekMsY0FBYyxHQUNQLE1BQU1DLDRCQUE0QixzQkFBc0I7QUFDL0QsY0FBYyxHQUNQLE1BQU1DLGFBQWEsVUFBVTtBQUNwQyxjQUFjLEdBQ1AsTUFBTUMsVUFBVSxPQUFPO0FBQzlCLGNBQWMsR0FDUCxNQUFNQyxTQUFTLE1BQU07QUFDNUIsY0FBYyxHQUNQLE1BQU1DLDBCQUEwQixxQkFBcUI7QUFDNUQsY0FBYyxHQUNQLE1BQU1DLFdBQVcsUUFBUTtBQUNoQyxjQUFjLEdBQ1AsTUFBTUMsY0FBYyxXQUFXO0FBQ3RDLGNBQWMsR0FDUCxNQUFNQyxrQkFBa0IsY0FBYztBQUM3QyxjQUFjLEdBQ1AsTUFBTUMsV0FBVyxRQUFRO0FBQ2hDLGNBQWMsR0FDUCxNQUFNQyxrQkFBa0IsY0FBYyxDQUM3QyxrQ0FBa0MiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9vcENvZGVzL2VmZmVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfQVNZTkMgPSBcIkFzeW5jXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfQ09NTUlUID0gXCJDb21taXRcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9GQUlMVVJFID0gXCJGYWlsdXJlXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfT05fRkFJTFVSRSA9IFwiT25GYWlsdXJlXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfT05fU1VDQ0VTUyA9IFwiT25TdWNjZXNzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfT05fU1VDQ0VTU19BTkRfRkFJTFVSRSA9IFwiT25TdWNjZXNzQW5kRmFpbHVyZVwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX1NVQ0NFU1MgPSBcIlN1Y2Nlc3NcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9TWU5DID0gXCJTeW5jXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfVEFHID0gXCJUYWdcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9VUERBVEVfUlVOVElNRV9GTEFHUyA9IFwiVXBkYXRlUnVudGltZUZsYWdzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfV0hJTEUgPSBcIldoaWxlXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfSVRFUkFUT1IgPSBcIkl0ZXJhdG9yXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfV0lUSF9SVU5USU1FID0gXCJXaXRoUnVudGltZVwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX1lJRUxEID0gXCJZaWVsZFwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX1JFVkVSVF9GTEFHUyA9IFwiUmV2ZXJ0RmxhZ3NcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVmZmVjdC5qcy5tYXAiXSwibmFtZXMiOlsiT1BfQVNZTkMiLCJPUF9DT01NSVQiLCJPUF9GQUlMVVJFIiwiT1BfT05fRkFJTFVSRSIsIk9QX09OX1NVQ0NFU1MiLCJPUF9PTl9TVUNDRVNTX0FORF9GQUlMVVJFIiwiT1BfU1VDQ0VTUyIsIk9QX1NZTkMiLCJPUF9UQUciLCJPUF9VUERBVEVfUlVOVElNRV9GTEFHUyIsIk9QX1dISUxFIiwiT1BfSVRFUkFUT1IiLCJPUF9XSVRIX1JVTlRJTUUiLCJPUF9ZSUVMRCIsIk9QX1JFVkVSVF9GTEFHUyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/option.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/option.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNone: () => (/* binding */ isNone),\n/* harmony export */   isOption: () => (/* binding */ isOption),\n/* harmony export */   isSome: () => (/* binding */ isSome),\n/* harmony export */   none: () => (/* binding */ none),\n/* harmony export */   some: () => (/* binding */ some)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/**\n * @since 2.0.0\n */ \n\n\n\n\nconst TypeId = /*#__PURE__*/ Symbol.for(\"effect/Option\");\nconst CommonProto = {\n    ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n    [TypeId]: {\n        _A: (_)=>_\n    },\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol] () {\n        return this.toJSON();\n    },\n    toString () {\n        return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n    }\n};\nconst SomeProto = /*#__PURE__*/ Object.assign(/*#__PURE__*/ Object.create(CommonProto), {\n    _tag: \"Some\",\n    _op: \"Some\",\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol] (that) {\n        return isOption(that) && isSome(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.value, that.value);\n    },\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol] () {\n        return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.value)));\n    },\n    toJSON () {\n        return {\n            _id: \"Option\",\n            _tag: this._tag,\n            value: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.value)\n        };\n    }\n});\nconst NoneHash = /*#__PURE__*/ _Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(\"None\");\nconst NoneProto = /*#__PURE__*/ Object.assign(/*#__PURE__*/ Object.create(CommonProto), {\n    _tag: \"None\",\n    _op: \"None\",\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol] (that) {\n        return isOption(that) && isNone(that);\n    },\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol] () {\n        return NoneHash;\n    },\n    toJSON () {\n        return {\n            _id: \"Option\",\n            _tag: this._tag\n        };\n    }\n});\n/** @internal */ const isOption = (input)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_4__.hasProperty)(input, TypeId);\n/** @internal */ const isNone = (fa)=>fa._tag === \"None\";\n/** @internal */ const isSome = (fa)=>fa._tag === \"Some\";\n/** @internal */ const none = /*#__PURE__*/ Object.create(NoneProto);\n/** @internal */ const some = (value)=>{\n    const a = Object.create(SomeProto);\n    a.value = value;\n    return a;\n}; //# sourceMappingURL=option.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL29wdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDb0M7QUFDRjtBQUNtQztBQUN4QjtBQUNJO0FBQ2xELE1BQU1PLFNBQVMsV0FBVyxHQUFFQyxPQUFPQyxHQUFHLENBQUM7QUFDdkMsTUFBTUMsY0FBYztJQUNsQixHQUFHSiwyREFBZTtJQUNsQixDQUFDQyxPQUFPLEVBQUU7UUFDUkksSUFBSUMsQ0FBQUEsSUFBS0E7SUFDWDtJQUNBLENBQUNULDhEQUFpQkEsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQ0MsTUFBTTtJQUNwQjtJQUNBUztRQUNFLE9BQU9YLHVEQUFNQSxDQUFDLElBQUksQ0FBQ0UsTUFBTTtJQUMzQjtBQUNGO0FBQ0EsTUFBTVUsWUFBWSxXQUFXLEdBQUVDLE9BQU9DLE1BQU0sQ0FBQyxXQUFXLEdBQUVELE9BQU9FLE1BQU0sQ0FBQ1AsY0FBYztJQUNwRlEsTUFBTTtJQUNOQyxLQUFLO0lBQ0wsQ0FBQ25CLDZDQUFZLENBQUMsRUFBQ3FCLElBQUk7UUFDakIsT0FBT0MsU0FBU0QsU0FBU0UsT0FBT0YsU0FBU3JCLDZDQUFZLENBQUMsSUFBSSxDQUFDeUIsS0FBSyxFQUFFSixLQUFLSSxLQUFLO0lBQzlFO0lBQ0EsQ0FBQ3hCLDRDQUFXLENBQUM7UUFDWCxPQUFPQSw0Q0FBVyxDQUFDLElBQUksRUFBRUEsNkNBQVksQ0FBQ0EsMENBQVMsQ0FBQyxJQUFJLENBQUNpQixJQUFJLEdBQUdqQiwwQ0FBUyxDQUFDLElBQUksQ0FBQ3dCLEtBQUs7SUFDbEY7SUFDQXJCO1FBQ0UsT0FBTztZQUNMeUIsS0FBSztZQUNMWCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmTyxPQUFPckIsdURBQU1BLENBQUMsSUFBSSxDQUFDcUIsS0FBSztRQUMxQjtJQUNGO0FBQ0Y7QUFDQSxNQUFNSyxXQUFXLFdBQVcsR0FBRTdCLDBDQUFTLENBQUM7QUFDeEMsTUFBTThCLFlBQVksV0FBVyxHQUFFaEIsT0FBT0MsTUFBTSxDQUFDLFdBQVcsR0FBRUQsT0FBT0UsTUFBTSxDQUFDUCxjQUFjO0lBQ3BGUSxNQUFNO0lBQ05DLEtBQUs7SUFDTCxDQUFDbkIsNkNBQVksQ0FBQyxFQUFDcUIsSUFBSTtRQUNqQixPQUFPQyxTQUFTRCxTQUFTVyxPQUFPWDtJQUNsQztJQUNBLENBQUNwQiw0Q0FBVyxDQUFDO1FBQ1gsT0FBTzZCO0lBQ1Q7SUFDQTFCO1FBQ0UsT0FBTztZQUNMeUIsS0FBSztZQUNMWCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUNqQjtJQUNGO0FBQ0Y7QUFDQSxjQUFjLEdBQ1AsTUFBTUksV0FBV1csQ0FBQUEsUUFBUzVCLDBEQUFXQSxDQUFDNEIsT0FBTzFCLFFBQVE7QUFDNUQsY0FBYyxHQUNQLE1BQU15QixTQUFTRSxDQUFBQSxLQUFNQSxHQUFHaEIsSUFBSSxLQUFLLE9BQU87QUFDL0MsY0FBYyxHQUNQLE1BQU1LLFNBQVNXLENBQUFBLEtBQU1BLEdBQUdoQixJQUFJLEtBQUssT0FBTztBQUMvQyxjQUFjLEdBQ1AsTUFBTWlCLE9BQU8sV0FBVyxHQUFFcEIsT0FBT0UsTUFBTSxDQUFDYyxXQUFXO0FBQzFELGNBQWMsR0FDUCxNQUFNSyxPQUFPWCxDQUFBQTtJQUNsQixNQUFNWSxJQUFJdEIsT0FBT0UsTUFBTSxDQUFDSDtJQUN4QnVCLEVBQUVaLEtBQUssR0FBR0E7SUFDVixPQUFPWTtBQUNULEVBQUUsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9vcHRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcIi4uL0VxdWFsLmpzXCI7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuLi9IYXNoLmpzXCI7XG5pbXBvcnQgeyBmb3JtYXQsIE5vZGVJbnNwZWN0U3ltYm9sLCB0b0pTT04gfSBmcm9tIFwiLi4vSW5zcGVjdGFibGUuanNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4uL1ByZWRpY2F0ZS5qc1wiO1xuaW1wb3J0IHsgRWZmZWN0UHJvdG90eXBlIH0gZnJvbSBcIi4vZWZmZWN0YWJsZS5qc1wiO1xuY29uc3QgVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJlZmZlY3QvT3B0aW9uXCIpO1xuY29uc3QgQ29tbW9uUHJvdG8gPSB7XG4gIC4uLkVmZmVjdFByb3RvdHlwZSxcbiAgW1R5cGVJZF06IHtcbiAgICBfQTogXyA9PiBfXG4gIH0sXG4gIFtOb2RlSW5zcGVjdFN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XG4gIH0sXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBmb3JtYXQodGhpcy50b0pTT04oKSk7XG4gIH1cbn07XG5jb25zdCBTb21lUHJvdG8gPSAvKiNfX1BVUkVfXyovT2JqZWN0LmFzc2lnbigvKiNfX1BVUkVfXyovT2JqZWN0LmNyZWF0ZShDb21tb25Qcm90byksIHtcbiAgX3RhZzogXCJTb21lXCIsXG4gIF9vcDogXCJTb21lXCIsXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gaXNPcHRpb24odGhhdCkgJiYgaXNTb21lKHRoYXQpICYmIEVxdWFsLmVxdWFscyh0aGlzLnZhbHVlLCB0aGF0LnZhbHVlKTtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jYWNoZWQodGhpcywgSGFzaC5jb21iaW5lKEhhc2guaGFzaCh0aGlzLl90YWcpKShIYXNoLmhhc2godGhpcy52YWx1ZSkpKTtcbiAgfSxcbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfaWQ6IFwiT3B0aW9uXCIsXG4gICAgICBfdGFnOiB0aGlzLl90YWcsXG4gICAgICB2YWx1ZTogdG9KU09OKHRoaXMudmFsdWUpXG4gICAgfTtcbiAgfVxufSk7XG5jb25zdCBOb25lSGFzaCA9IC8qI19fUFVSRV9fKi9IYXNoLmhhc2goXCJOb25lXCIpO1xuY29uc3QgTm9uZVByb3RvID0gLyojX19QVVJFX18qL09iamVjdC5hc3NpZ24oLyojX19QVVJFX18qL09iamVjdC5jcmVhdGUoQ29tbW9uUHJvdG8pLCB7XG4gIF90YWc6IFwiTm9uZVwiLFxuICBfb3A6IFwiTm9uZVwiLFxuICBbRXF1YWwuc3ltYm9sXSh0aGF0KSB7XG4gICAgcmV0dXJuIGlzT3B0aW9uKHRoYXQpICYmIGlzTm9uZSh0aGF0KTtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gTm9uZUhhc2g7XG4gIH0sXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX2lkOiBcIk9wdGlvblwiLFxuICAgICAgX3RhZzogdGhpcy5fdGFnXG4gICAgfTtcbiAgfVxufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNPcHRpb24gPSBpbnB1dCA9PiBoYXNQcm9wZXJ0eShpbnB1dCwgVHlwZUlkKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc05vbmUgPSBmYSA9PiBmYS5fdGFnID09PSBcIk5vbmVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc1NvbWUgPSBmYSA9PiBmYS5fdGFnID09PSBcIlNvbWVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBub25lID0gLyojX19QVVJFX18qL09iamVjdC5jcmVhdGUoTm9uZVByb3RvKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBzb21lID0gdmFsdWUgPT4ge1xuICBjb25zdCBhID0gT2JqZWN0LmNyZWF0ZShTb21lUHJvdG8pO1xuICBhLnZhbHVlID0gdmFsdWU7XG4gIHJldHVybiBhO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiRXF1YWwiLCJIYXNoIiwiZm9ybWF0IiwiTm9kZUluc3BlY3RTeW1ib2wiLCJ0b0pTT04iLCJoYXNQcm9wZXJ0eSIsIkVmZmVjdFByb3RvdHlwZSIsIlR5cGVJZCIsIlN5bWJvbCIsImZvciIsIkNvbW1vblByb3RvIiwiX0EiLCJfIiwidG9TdHJpbmciLCJTb21lUHJvdG8iLCJPYmplY3QiLCJhc3NpZ24iLCJjcmVhdGUiLCJfdGFnIiwiX29wIiwic3ltYm9sIiwidGhhdCIsImlzT3B0aW9uIiwiaXNTb21lIiwiZXF1YWxzIiwidmFsdWUiLCJjYWNoZWQiLCJjb21iaW5lIiwiaGFzaCIsIl9pZCIsIk5vbmVIYXNoIiwiTm9uZVByb3RvIiwiaXNOb25lIiwiaW5wdXQiLCJmYSIsIm5vbmUiLCJzb21lIiwiYSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/option.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/redacted.js":
/*!***********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/redacted.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedactedTypeId: () => (/* binding */ RedactedTypeId),\n/* harmony export */   isRedacted: () => (/* binding */ isRedacted),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   proto: () => (/* binding */ proto),\n/* harmony export */   redactedRegistry: () => (/* binding */ redactedRegistry),\n/* harmony export */   unsafeWipe: () => (/* binding */ unsafeWipe),\n/* harmony export */   value: () => (/* binding */ value)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n\n\n\n\n\n\n\n/** @internal */ const RedactedSymbolKey = \"effect/Redacted\";\n/** @internal */ const redactedRegistry = /*#__PURE__*/ (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__.globalValue)(\"effect/Redacted/redactedRegistry\", ()=>new WeakMap());\n/** @internal */ const RedactedTypeId = /*#__PURE__*/ Symbol.for(RedactedSymbolKey);\n/** @internal */ const proto = {\n    [RedactedTypeId]: {\n        _A: (_)=>_\n    },\n    pipe () {\n        return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_1__.pipeArguments)(this, arguments);\n    },\n    toString () {\n        return \"<redacted>\";\n    },\n    toJSON () {\n        return \"<redacted>\";\n    },\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.NodeInspectSymbol] () {\n        return \"<redacted>\";\n    },\n    [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol] () {\n        return (0,_Function_js__WEBPACK_IMPORTED_MODULE_4__.pipe)(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(RedactedSymbolKey), _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(redactedRegistry.get(this))), _Hash_js__WEBPACK_IMPORTED_MODULE_3__.cached(this));\n    },\n    [_Equal_js__WEBPACK_IMPORTED_MODULE_5__.symbol] (that) {\n        return isRedacted(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_5__.equals(redactedRegistry.get(this), redactedRegistry.get(that));\n    }\n};\n/** @internal */ const isRedacted = (u)=>(0,_Predicate_js__WEBPACK_IMPORTED_MODULE_6__.hasProperty)(u, RedactedTypeId);\n/** @internal */ const make = (value)=>{\n    const redacted = Object.create(proto);\n    redactedRegistry.set(redacted, value);\n    return redacted;\n};\n/** @internal */ const value = (self)=>{\n    if (redactedRegistry.has(self)) {\n        return redactedRegistry.get(self);\n    } else {\n        throw new Error(\"Unable to get redacted value\");\n    }\n};\n/** @internal */ const unsafeWipe = (self)=>redactedRegistry.delete(self); //# sourceMappingURL=redacted.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL3JlZGFjdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ0M7QUFDVTtBQUNiO0FBQ21CO0FBQ1A7QUFDRDtBQUM5QyxjQUFjLEdBQ2QsTUFBTU8sb0JBQW9CO0FBQzFCLGNBQWMsR0FDUCxNQUFNQyxtQkFBbUIsV0FBVyxHQUFFTiw0REFBV0EsQ0FBQyxvQ0FBb0MsSUFBTSxJQUFJTyxXQUFXO0FBQ2xILGNBQWMsR0FDUCxNQUFNQyxpQkFBaUIsV0FBVyxHQUFFQyxPQUFPQyxHQUFHLENBQUNMLG1CQUFtQjtBQUN6RSxjQUFjLEdBQ1AsTUFBTU0sUUFBUTtJQUNuQixDQUFDSCxlQUFlLEVBQUU7UUFDaEJJLElBQUlDLENBQUFBLElBQUtBO0lBQ1g7SUFDQWQ7UUFDRSxPQUFPSSwyREFBYUEsQ0FBQyxJQUFJLEVBQUVXO0lBQzdCO0lBQ0FDO1FBQ0UsT0FBTztJQUNUO0lBQ0FDO1FBQ0UsT0FBTztJQUNUO0lBQ0EsQ0FBQ2QsOERBQWlCQSxDQUFDO1FBQ2pCLE9BQU87SUFDVDtJQUNBLENBQUNELDRDQUFXLENBQUM7UUFDWCxPQUFPRixrREFBSUEsQ0FBQ0UsMENBQVMsQ0FBQ0ksb0JBQW9CSiw2Q0FBWSxDQUFDQSwwQ0FBUyxDQUFDSyxpQkFBaUJjLEdBQUcsQ0FBQyxJQUFJLEtBQUtuQiw0Q0FBVyxDQUFDLElBQUk7SUFDakg7SUFDQSxDQUFDSCw2Q0FBWSxDQUFDLEVBQUN3QixJQUFJO1FBQ2pCLE9BQU9DLFdBQVdELFNBQVN4Qiw2Q0FBWSxDQUFDUSxpQkFBaUJjLEdBQUcsQ0FBQyxJQUFJLEdBQUdkLGlCQUFpQmMsR0FBRyxDQUFDRTtJQUMzRjtBQUNGLEVBQUU7QUFDRixjQUFjLEdBQ1AsTUFBTUMsYUFBYUUsQ0FBQUEsSUFBS3JCLDBEQUFXQSxDQUFDcUIsR0FBR2pCLGdCQUFnQjtBQUM5RCxjQUFjLEdBQ1AsTUFBTWtCLE9BQU9DLENBQUFBO0lBQ2xCLE1BQU1DLFdBQVdDLE9BQU9DLE1BQU0sQ0FBQ25CO0lBQy9CTCxpQkFBaUJ5QixHQUFHLENBQUNILFVBQVVEO0lBQy9CLE9BQU9DO0FBQ1QsRUFBRTtBQUNGLGNBQWMsR0FDUCxNQUFNRCxRQUFRSyxDQUFBQTtJQUNuQixJQUFJMUIsaUJBQWlCMkIsR0FBRyxDQUFDRCxPQUFPO1FBQzlCLE9BQU8xQixpQkFBaUJjLEdBQUcsQ0FBQ1k7SUFDOUIsT0FBTztRQUNMLE1BQU0sSUFBSUUsTUFBTTtJQUNsQjtBQUNGLEVBQUU7QUFDRixjQUFjLEdBQ1AsTUFBTUMsYUFBYUgsQ0FBQUEsT0FBUTFCLGlCQUFpQjhCLE1BQU0sQ0FBQ0osTUFBTSxDQUNoRSxvQ0FBb0MiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9yZWRhY3RlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFcXVhbCBmcm9tIFwiLi4vRXF1YWwuanNcIjtcbmltcG9ydCB7IHBpcGUgfSBmcm9tIFwiLi4vRnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGdsb2JhbFZhbHVlIH0gZnJvbSBcIi4uL0dsb2JhbFZhbHVlLmpzXCI7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuLi9IYXNoLmpzXCI7XG5pbXBvcnQgeyBOb2RlSW5zcGVjdFN5bWJvbCB9IGZyb20gXCIuLi9JbnNwZWN0YWJsZS5qc1wiO1xuaW1wb3J0IHsgcGlwZUFyZ3VtZW50cyB9IGZyb20gXCIuLi9QaXBlYWJsZS5qc1wiO1xuaW1wb3J0IHsgaGFzUHJvcGVydHkgfSBmcm9tIFwiLi4vUHJlZGljYXRlLmpzXCI7XG4vKiogQGludGVybmFsICovXG5jb25zdCBSZWRhY3RlZFN5bWJvbEtleSA9IFwiZWZmZWN0L1JlZGFjdGVkXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgcmVkYWN0ZWRSZWdpc3RyeSA9IC8qI19fUFVSRV9fKi9nbG9iYWxWYWx1ZShcImVmZmVjdC9SZWRhY3RlZC9yZWRhY3RlZFJlZ2lzdHJ5XCIsICgpID0+IG5ldyBXZWFrTWFwKCkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFJlZGFjdGVkVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoUmVkYWN0ZWRTeW1ib2xLZXkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IHByb3RvID0ge1xuICBbUmVkYWN0ZWRUeXBlSWRdOiB7XG4gICAgX0E6IF8gPT4gX1xuICB9LFxuICBwaXBlKCkge1xuICAgIHJldHVybiBwaXBlQXJndW1lbnRzKHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcIjxyZWRhY3RlZD5cIjtcbiAgfSxcbiAgdG9KU09OKCkge1xuICAgIHJldHVybiBcIjxyZWRhY3RlZD5cIjtcbiAgfSxcbiAgW05vZGVJbnNwZWN0U3ltYm9sXSgpIHtcbiAgICByZXR1cm4gXCI8cmVkYWN0ZWQ+XCI7XG4gIH0sXG4gIFtIYXNoLnN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIHBpcGUoSGFzaC5oYXNoKFJlZGFjdGVkU3ltYm9sS2V5KSwgSGFzaC5jb21iaW5lKEhhc2guaGFzaChyZWRhY3RlZFJlZ2lzdHJ5LmdldCh0aGlzKSkpLCBIYXNoLmNhY2hlZCh0aGlzKSk7XG4gIH0sXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gaXNSZWRhY3RlZCh0aGF0KSAmJiBFcXVhbC5lcXVhbHMocmVkYWN0ZWRSZWdpc3RyeS5nZXQodGhpcyksIHJlZGFjdGVkUmVnaXN0cnkuZ2V0KHRoYXQpKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc1JlZGFjdGVkID0gdSA9PiBoYXNQcm9wZXJ0eSh1LCBSZWRhY3RlZFR5cGVJZCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbWFrZSA9IHZhbHVlID0+IHtcbiAgY29uc3QgcmVkYWN0ZWQgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgcmVkYWN0ZWRSZWdpc3RyeS5zZXQocmVkYWN0ZWQsIHZhbHVlKTtcbiAgcmV0dXJuIHJlZGFjdGVkO1xufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCB2YWx1ZSA9IHNlbGYgPT4ge1xuICBpZiAocmVkYWN0ZWRSZWdpc3RyeS5oYXMoc2VsZikpIHtcbiAgICByZXR1cm4gcmVkYWN0ZWRSZWdpc3RyeS5nZXQoc2VsZik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGdldCByZWRhY3RlZCB2YWx1ZVwiKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCB1bnNhZmVXaXBlID0gc2VsZiA9PiByZWRhY3RlZFJlZ2lzdHJ5LmRlbGV0ZShzZWxmKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGFjdGVkLmpzLm1hcCJdLCJuYW1lcyI6WyJFcXVhbCIsInBpcGUiLCJnbG9iYWxWYWx1ZSIsIkhhc2giLCJOb2RlSW5zcGVjdFN5bWJvbCIsInBpcGVBcmd1bWVudHMiLCJoYXNQcm9wZXJ0eSIsIlJlZGFjdGVkU3ltYm9sS2V5IiwicmVkYWN0ZWRSZWdpc3RyeSIsIldlYWtNYXAiLCJSZWRhY3RlZFR5cGVJZCIsIlN5bWJvbCIsImZvciIsInByb3RvIiwiX0EiLCJfIiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJ0b0pTT04iLCJzeW1ib2wiLCJoYXNoIiwiY29tYmluZSIsImdldCIsImNhY2hlZCIsInRoYXQiLCJpc1JlZGFjdGVkIiwiZXF1YWxzIiwidSIsIm1ha2UiLCJ2YWx1ZSIsInJlZGFjdGVkIiwiT2JqZWN0IiwiY3JlYXRlIiwic2V0Iiwic2VsZiIsImhhcyIsIkVycm9yIiwidW5zYWZlV2lwZSIsImRlbGV0ZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/redacted.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/version.js":
/*!**********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/version.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentVersion: () => (/* binding */ getCurrentVersion),\n/* harmony export */   setCurrentVersion: () => (/* binding */ setCurrentVersion)\n/* harmony export */ });\nlet moduleVersion = \"3.16.8\";\nconst getCurrentVersion = ()=>moduleVersion;\nconst setCurrentVersion = (version)=>{\n    moduleVersion = version;\n}; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxnQkFBZ0I7QUFDYixNQUFNQyxvQkFBb0IsSUFBTUQsY0FBYztBQUM5QyxNQUFNRSxvQkFBb0JDLENBQUFBO0lBQy9CSCxnQkFBZ0JHO0FBQ2xCLEVBQUUsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBtb2R1bGVWZXJzaW9uID0gXCIzLjE2LjhcIjtcbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50VmVyc2lvbiA9ICgpID0+IG1vZHVsZVZlcnNpb247XG5leHBvcnQgY29uc3Qgc2V0Q3VycmVudFZlcnNpb24gPSB2ZXJzaW9uID0+IHtcbiAgbW9kdWxlVmVyc2lvbiA9IHZlcnNpb247XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsibW9kdWxlVmVyc2lvbiIsImdldEN1cnJlbnRWZXJzaW9uIiwic2V0Q3VycmVudFZlcnNpb24iLCJ2ZXJzaW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/version.js\n");

/***/ })

};
;